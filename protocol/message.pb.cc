// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: message.proto

#include "message.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// This is a temporary google only hack
#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
#include "third_party/protobuf/version.h"
#endif
// @@protoc_insertion_point(includes)
namespace client {
class command_replyDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<command_reply>
      _instance;
} _command_reply_default_instance_;
class values_typeDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<values_type>
      _instance;
} _values_type_default_instance_;
class keys_typeDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<keys_type>
      _instance;
} _keys_type_default_instance_;
class command_setDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<command_set>
      _instance;
} _command_set_default_instance_;
class command_mset_KvsEntry_DoNotUseDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<command_mset_KvsEntry_DoNotUse>
      _instance;
} _command_mset_KvsEntry_DoNotUse_default_instance_;
class command_msetDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<command_mset>
      _instance;
} _command_mset_default_instance_;
class command_hsetDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<command_hset>
      _instance;
} _command_hset_default_instance_;
class command_hmset_ValuesEntry_DoNotUseDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<command_hmset_ValuesEntry_DoNotUse>
      _instance;
} _command_hmset_ValuesEntry_DoNotUse_default_instance_;
class command_hmsetDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<command_hmset>
      _instance;
} _command_hmset_default_instance_;
class command_mhmset_ValuesEntry_DoNotUseDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<command_mhmset_ValuesEntry_DoNotUse>
      _instance;
} _command_mhmset_ValuesEntry_DoNotUse_default_instance_;
class command_mhmsetDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<command_mhmset>
      _instance;
} _command_mhmset_default_instance_;
class command_getDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<command_get>
      _instance;
} _command_get_default_instance_;
class command_get_replyDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<command_get_reply>
      _instance;
} _command_get_reply_default_instance_;
class command_mgetDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<command_mget>
      _instance;
} _command_mget_default_instance_;
class command_mget_replyDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<command_mget_reply>
      _instance;
} _command_mget_reply_default_instance_;
class command_hgetDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<command_hget>
      _instance;
} _command_hget_default_instance_;
class command_hget_replyDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<command_hget_reply>
      _instance;
} _command_hget_reply_default_instance_;
class command_hmgetDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<command_hmget>
      _instance;
} _command_hmget_default_instance_;
class command_hmget_replyDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<command_hmget_reply>
      _instance;
} _command_hmget_reply_default_instance_;
class command_mhmgetDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<command_mhmget>
      _instance;
} _command_mhmget_default_instance_;
class command_mhmget_reply_DataEntry_DoNotUseDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<command_mhmget_reply_DataEntry_DoNotUse>
      _instance;
} _command_mhmget_reply_DataEntry_DoNotUse_default_instance_;
class command_mhmget_replyDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<command_mhmget_reply>
      _instance;
} _command_mhmget_reply_default_instance_;
class command_delDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<command_del>
      _instance;
} _command_del_default_instance_;
class command_mdelDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<command_mdel>
      _instance;
} _command_mdel_default_instance_;
class command_hdelDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<command_hdel>
      _instance;
} _command_hdel_default_instance_;
class command_hmdelDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<command_hmdel>
      _instance;
} _command_hmdel_default_instance_;
class command_mhmdelDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<command_mhmdel>
      _instance;
} _command_mhmdel_default_instance_;
class command_incrDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<command_incr>
      _instance;
} _command_incr_default_instance_;
class command_mincr_KvsEntry_DoNotUseDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<command_mincr_KvsEntry_DoNotUse>
      _instance;
} _command_mincr_KvsEntry_DoNotUse_default_instance_;
class command_mincrDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<command_mincr>
      _instance;
} _command_mincr_default_instance_;
class command_hincrDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<command_hincr>
      _instance;
} _command_hincr_default_instance_;
class command_hmincr_KvsEntry_DoNotUseDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<command_hmincr_KvsEntry_DoNotUse>
      _instance;
} _command_hmincr_KvsEntry_DoNotUse_default_instance_;
class command_hmincrDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<command_hmincr>
      _instance;
} _command_hmincr_default_instance_;
class command_mhmincr_KvsEntry_DoNotUseDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<command_mhmincr_KvsEntry_DoNotUse>
      _instance;
} _command_mhmincr_KvsEntry_DoNotUse_default_instance_;
class command_mhmincrDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<command_mhmincr>
      _instance;
} _command_mhmincr_default_instance_;
class command_lpushDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<command_lpush>
      _instance;
} _command_lpush_default_instance_;
class command_mlpush_KvsEntry_DoNotUseDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<command_mlpush_KvsEntry_DoNotUse>
      _instance;
} _command_mlpush_KvsEntry_DoNotUse_default_instance_;
class command_mlpushDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<command_mlpush>
      _instance;
} _command_mlpush_default_instance_;
class command_hlpushDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<command_hlpush>
      _instance;
} _command_hlpush_default_instance_;
class command_hmlpush_KvsEntry_DoNotUseDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<command_hmlpush_KvsEntry_DoNotUse>
      _instance;
} _command_hmlpush_KvsEntry_DoNotUse_default_instance_;
class command_hmlpushDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<command_hmlpush>
      _instance;
} _command_hmlpush_default_instance_;
class command_mhmlpush_KvsEntry_DoNotUseDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<command_mhmlpush_KvsEntry_DoNotUse>
      _instance;
} _command_mhmlpush_KvsEntry_DoNotUse_default_instance_;
class command_mhmlpushDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<command_mhmlpush>
      _instance;
} _command_mhmlpush_default_instance_;
class command_lrangeDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<command_lrange>
      _instance;
} _command_lrange_default_instance_;
class command_lrange_replyDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<command_lrange_reply>
      _instance;
} _command_lrange_reply_default_instance_;
class command_mlrangeDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<command_mlrange>
      _instance;
} _command_mlrange_default_instance_;
class command_mlrange_replyDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<command_mlrange_reply>
      _instance;
} _command_mlrange_reply_default_instance_;
class command_hlrangeDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<command_hlrange>
      _instance;
} _command_hlrange_default_instance_;
class command_hlrange_replyDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<command_hlrange_reply>
      _instance;
} _command_hlrange_reply_default_instance_;
class command_hmlrangeDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<command_hmlrange>
      _instance;
} _command_hmlrange_default_instance_;
class command_hmlrange_replyDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<command_hmlrange_reply>
      _instance;
} _command_hmlrange_reply_default_instance_;
class command_mhmlrangeDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<command_mhmlrange>
      _instance;
} _command_mhmlrange_default_instance_;
class command_mhmlrange_replyDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<command_mhmlrange_reply>
      _instance;
} _command_mhmlrange_reply_default_instance_;
class command_lpopDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<command_lpop>
      _instance;
} _command_lpop_default_instance_;
class command_lpop_replyDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<command_lpop_reply>
      _instance;
} _command_lpop_reply_default_instance_;
class command_mlpopDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<command_mlpop>
      _instance;
} _command_mlpop_default_instance_;
class command_mlpop_repyDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<command_mlpop_repy>
      _instance;
} _command_mlpop_repy_default_instance_;
class command_hlpopDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<command_hlpop>
      _instance;
} _command_hlpop_default_instance_;
class command_hlpop_replyDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<command_hlpop_reply>
      _instance;
} _command_hlpop_reply_default_instance_;
class command_hmlpopDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<command_hmlpop>
      _instance;
} _command_hmlpop_default_instance_;
class command_hmlpop_replyDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<command_hmlpop_reply>
      _instance;
} _command_hmlpop_reply_default_instance_;
class command_mhmlpopDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<command_mhmlpop>
      _instance;
} _command_mhmlpop_default_instance_;
class command_mhmlpop_replyDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<command_mhmlpop_reply>
      _instance;
} _command_mhmlpop_reply_default_instance_;
class command_ltrimDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<command_ltrim>
      _instance;
} _command_ltrim_default_instance_;
class command_mltrimDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<command_mltrim>
      _instance;
} _command_mltrim_default_instance_;
class command_hltrimDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<command_hltrim>
      _instance;
} _command_hltrim_default_instance_;
class command_hmltrimDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<command_hmltrim>
      _instance;
} _command_hmltrim_default_instance_;
class command_mhmltrimDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<command_mhmltrim>
      _instance;
} _command_mhmltrim_default_instance_;
class command_llenDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<command_llen>
      _instance;
} _command_llen_default_instance_;
class command_llen_replyDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<command_llen_reply>
      _instance;
} _command_llen_reply_default_instance_;
class command_mllenDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<command_mllen>
      _instance;
} _command_mllen_default_instance_;
class command_mllen_replyDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<command_mllen_reply>
      _instance;
} _command_mllen_reply_default_instance_;
class command_hllenDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<command_hllen>
      _instance;
} _command_hllen_default_instance_;
class command_hllen_replyDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<command_hllen_reply>
      _instance;
} _command_hllen_reply_default_instance_;
class command_hmllenDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<command_hmllen>
      _instance;
} _command_hmllen_default_instance_;
class command_hmllen_replyDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<command_hmllen_reply>
      _instance;
} _command_hmllen_reply_default_instance_;
class command_mhmllenDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<command_mhmllen>
      _instance;
} _command_mhmllen_default_instance_;
class command_mhmllen_replyDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<command_mhmllen_reply>
      _instance;
} _command_mhmllen_reply_default_instance_;
class command_mapgetDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<command_mapget>
      _instance;
} _command_mapget_default_instance_;
class command_mapget_replyDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<command_mapget_reply>
      _instance;
} _command_mapget_reply_default_instance_;
class command_mmapgetDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<command_mmapget>
      _instance;
} _command_mmapget_default_instance_;
class command_mmapget_replyDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<command_mmapget_reply>
      _instance;
} _command_mmapget_reply_default_instance_;
class command_hmapgetDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<command_hmapget>
      _instance;
} _command_hmapget_default_instance_;
class command_hmapget_replyDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<command_hmapget_reply>
      _instance;
} _command_hmapget_reply_default_instance_;
class command_hmmapgetDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<command_hmmapget>
      _instance;
} _command_hmmapget_default_instance_;
class command_hmmapget_replyDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<command_hmmapget_reply>
      _instance;
} _command_hmmapget_reply_default_instance_;
class command_mhmmapgetDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<command_mhmmapget>
      _instance;
} _command_mhmmapget_default_instance_;
class command_mhmmapget_replyDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<command_mhmmapget_reply>
      _instance;
} _command_mhmmapget_reply_default_instance_;
class command_mapsetDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<command_mapset>
      _instance;
} _command_mapset_default_instance_;
class command_mmapset_KvsEntry_DoNotUseDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<command_mmapset_KvsEntry_DoNotUse>
      _instance;
} _command_mmapset_KvsEntry_DoNotUse_default_instance_;
class command_mmapsetDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<command_mmapset>
      _instance;
} _command_mmapset_default_instance_;
class command_hmapsetDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<command_hmapset>
      _instance;
} _command_hmapset_default_instance_;
class command_hmmapset_ValuesEntry_DoNotUseDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<command_hmmapset_ValuesEntry_DoNotUse>
      _instance;
} _command_hmmapset_ValuesEntry_DoNotUse_default_instance_;
class command_hmmapsetDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<command_hmmapset>
      _instance;
} _command_hmmapset_default_instance_;
class command_mhmmapset_ValuesEntry_DoNotUseDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<command_mhmmapset_ValuesEntry_DoNotUse>
      _instance;
} _command_mhmmapset_ValuesEntry_DoNotUse_default_instance_;
class command_mhmmapsetDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<command_mhmmapset>
      _instance;
} _command_mhmmapset_default_instance_;
class command_mapdelDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<command_mapdel>
      _instance;
} _command_mapdel_default_instance_;
class command_mmapdelDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<command_mmapdel>
      _instance;
} _command_mmapdel_default_instance_;
class command_hmapdelDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<command_hmapdel>
      _instance;
} _command_hmapdel_default_instance_;
class command_hmmapdelDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<command_hmmapdel>
      _instance;
} _command_hmmapdel_default_instance_;
class command_mhmmapdel_ValuesEntry_DoNotUseDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<command_mhmmapdel_ValuesEntry_DoNotUse>
      _instance;
} _command_mhmmapdel_ValuesEntry_DoNotUse_default_instance_;
class command_mhmmapdelDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<command_mhmmapdel>
      _instance;
} _command_mhmmapdel_default_instance_;
class command_meetDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<command_meet>
      _instance;
} _command_meet_default_instance_;
}  // namespace client
namespace protobuf_message_2eproto {
void InitDefaultscommand_replyImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  {
    void* ptr = &::client::_command_reply_default_instance_;
    new (ptr) ::client::command_reply();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::client::command_reply::InitAsDefaultInstance();
}

void InitDefaultscommand_reply() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultscommand_replyImpl);
}

void InitDefaultsvalues_typeImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  protobuf_data_2eproto::InitDefaultsVALUE();
  {
    void* ptr = &::client::_values_type_default_instance_;
    new (ptr) ::client::values_type();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::client::values_type::InitAsDefaultInstance();
}

void InitDefaultsvalues_type() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsvalues_typeImpl);
}

void InitDefaultskeys_typeImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  {
    void* ptr = &::client::_keys_type_default_instance_;
    new (ptr) ::client::keys_type();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::client::keys_type::InitAsDefaultInstance();
}

void InitDefaultskeys_type() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultskeys_typeImpl);
}

void InitDefaultscommand_setImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  protobuf_data_2eproto::InitDefaultsVALUE();
  {
    void* ptr = &::client::_command_set_default_instance_;
    new (ptr) ::client::command_set();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::client::command_set::InitAsDefaultInstance();
}

void InitDefaultscommand_set() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultscommand_setImpl);
}

void InitDefaultscommand_mset_KvsEntry_DoNotUseImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  protobuf_data_2eproto::InitDefaultsVALUE();
  {
    void* ptr = &::client::_command_mset_KvsEntry_DoNotUse_default_instance_;
    new (ptr) ::client::command_mset_KvsEntry_DoNotUse();
  }
  ::client::command_mset_KvsEntry_DoNotUse::InitAsDefaultInstance();
}

void InitDefaultscommand_mset_KvsEntry_DoNotUse() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultscommand_mset_KvsEntry_DoNotUseImpl);
}

void InitDefaultscommand_msetImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  protobuf_message_2eproto::InitDefaultscommand_mset_KvsEntry_DoNotUse();
  {
    void* ptr = &::client::_command_mset_default_instance_;
    new (ptr) ::client::command_mset();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::client::command_mset::InitAsDefaultInstance();
}

void InitDefaultscommand_mset() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultscommand_msetImpl);
}

void InitDefaultscommand_hsetImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  protobuf_data_2eproto::InitDefaultsVALUE();
  {
    void* ptr = &::client::_command_hset_default_instance_;
    new (ptr) ::client::command_hset();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::client::command_hset::InitAsDefaultInstance();
}

void InitDefaultscommand_hset() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultscommand_hsetImpl);
}

void InitDefaultscommand_hmset_ValuesEntry_DoNotUseImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  protobuf_data_2eproto::InitDefaultsVALUE();
  {
    void* ptr = &::client::_command_hmset_ValuesEntry_DoNotUse_default_instance_;
    new (ptr) ::client::command_hmset_ValuesEntry_DoNotUse();
  }
  ::client::command_hmset_ValuesEntry_DoNotUse::InitAsDefaultInstance();
}

void InitDefaultscommand_hmset_ValuesEntry_DoNotUse() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultscommand_hmset_ValuesEntry_DoNotUseImpl);
}

void InitDefaultscommand_hmsetImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  protobuf_message_2eproto::InitDefaultscommand_hmset_ValuesEntry_DoNotUse();
  {
    void* ptr = &::client::_command_hmset_default_instance_;
    new (ptr) ::client::command_hmset();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::client::command_hmset::InitAsDefaultInstance();
}

void InitDefaultscommand_hmset() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultscommand_hmsetImpl);
}

void InitDefaultscommand_mhmset_ValuesEntry_DoNotUseImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  protobuf_message_2eproto::InitDefaultsvalues_type();
  {
    void* ptr = &::client::_command_mhmset_ValuesEntry_DoNotUse_default_instance_;
    new (ptr) ::client::command_mhmset_ValuesEntry_DoNotUse();
  }
  ::client::command_mhmset_ValuesEntry_DoNotUse::InitAsDefaultInstance();
}

void InitDefaultscommand_mhmset_ValuesEntry_DoNotUse() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultscommand_mhmset_ValuesEntry_DoNotUseImpl);
}

void InitDefaultscommand_mhmsetImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  protobuf_message_2eproto::InitDefaultscommand_mhmset_ValuesEntry_DoNotUse();
  {
    void* ptr = &::client::_command_mhmset_default_instance_;
    new (ptr) ::client::command_mhmset();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::client::command_mhmset::InitAsDefaultInstance();
}

void InitDefaultscommand_mhmset() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultscommand_mhmsetImpl);
}

void InitDefaultscommand_getImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  {
    void* ptr = &::client::_command_get_default_instance_;
    new (ptr) ::client::command_get();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::client::command_get::InitAsDefaultInstance();
}

void InitDefaultscommand_get() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultscommand_getImpl);
}

void InitDefaultscommand_get_replyImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  protobuf_message_2eproto::InitDefaultscommand_reply();
  protobuf_data_2eproto::InitDefaultsVALUE();
  {
    void* ptr = &::client::_command_get_reply_default_instance_;
    new (ptr) ::client::command_get_reply();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::client::command_get_reply::InitAsDefaultInstance();
}

void InitDefaultscommand_get_reply() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultscommand_get_replyImpl);
}

void InitDefaultscommand_mgetImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  {
    void* ptr = &::client::_command_mget_default_instance_;
    new (ptr) ::client::command_mget();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::client::command_mget::InitAsDefaultInstance();
}

void InitDefaultscommand_mget() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultscommand_mgetImpl);
}

void InitDefaultscommand_mget_replyImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  protobuf_message_2eproto::InitDefaultscommand_reply();
  protobuf_data_2eproto::InitDefaultsVALUE();
  {
    void* ptr = &::client::_command_mget_reply_default_instance_;
    new (ptr) ::client::command_mget_reply();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::client::command_mget_reply::InitAsDefaultInstance();
}

void InitDefaultscommand_mget_reply() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultscommand_mget_replyImpl);
}

void InitDefaultscommand_hgetImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  {
    void* ptr = &::client::_command_hget_default_instance_;
    new (ptr) ::client::command_hget();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::client::command_hget::InitAsDefaultInstance();
}

void InitDefaultscommand_hget() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultscommand_hgetImpl);
}

void InitDefaultscommand_hget_replyImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  protobuf_message_2eproto::InitDefaultscommand_reply();
  protobuf_data_2eproto::InitDefaultsVALUE();
  {
    void* ptr = &::client::_command_hget_reply_default_instance_;
    new (ptr) ::client::command_hget_reply();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::client::command_hget_reply::InitAsDefaultInstance();
}

void InitDefaultscommand_hget_reply() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultscommand_hget_replyImpl);
}

void InitDefaultscommand_hmgetImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  {
    void* ptr = &::client::_command_hmget_default_instance_;
    new (ptr) ::client::command_hmget();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::client::command_hmget::InitAsDefaultInstance();
}

void InitDefaultscommand_hmget() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultscommand_hmgetImpl);
}

void InitDefaultscommand_hmget_replyImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  protobuf_message_2eproto::InitDefaultscommand_reply();
  protobuf_data_2eproto::InitDefaultsVALUE();
  {
    void* ptr = &::client::_command_hmget_reply_default_instance_;
    new (ptr) ::client::command_hmget_reply();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::client::command_hmget_reply::InitAsDefaultInstance();
}

void InitDefaultscommand_hmget_reply() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultscommand_hmget_replyImpl);
}

void InitDefaultscommand_mhmgetImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  {
    void* ptr = &::client::_command_mhmget_default_instance_;
    new (ptr) ::client::command_mhmget();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::client::command_mhmget::InitAsDefaultInstance();
}

void InitDefaultscommand_mhmget() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultscommand_mhmgetImpl);
}

void InitDefaultscommand_mhmget_reply_DataEntry_DoNotUseImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  protobuf_message_2eproto::InitDefaultsvalues_type();
  {
    void* ptr = &::client::_command_mhmget_reply_DataEntry_DoNotUse_default_instance_;
    new (ptr) ::client::command_mhmget_reply_DataEntry_DoNotUse();
  }
  ::client::command_mhmget_reply_DataEntry_DoNotUse::InitAsDefaultInstance();
}

void InitDefaultscommand_mhmget_reply_DataEntry_DoNotUse() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultscommand_mhmget_reply_DataEntry_DoNotUseImpl);
}

void InitDefaultscommand_mhmget_replyImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  protobuf_message_2eproto::InitDefaultscommand_reply();
  protobuf_message_2eproto::InitDefaultscommand_mhmget_reply_DataEntry_DoNotUse();
  {
    void* ptr = &::client::_command_mhmget_reply_default_instance_;
    new (ptr) ::client::command_mhmget_reply();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::client::command_mhmget_reply::InitAsDefaultInstance();
}

void InitDefaultscommand_mhmget_reply() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultscommand_mhmget_replyImpl);
}

void InitDefaultscommand_delImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  {
    void* ptr = &::client::_command_del_default_instance_;
    new (ptr) ::client::command_del();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::client::command_del::InitAsDefaultInstance();
}

void InitDefaultscommand_del() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultscommand_delImpl);
}

void InitDefaultscommand_mdelImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  {
    void* ptr = &::client::_command_mdel_default_instance_;
    new (ptr) ::client::command_mdel();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::client::command_mdel::InitAsDefaultInstance();
}

void InitDefaultscommand_mdel() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultscommand_mdelImpl);
}

void InitDefaultscommand_hdelImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  {
    void* ptr = &::client::_command_hdel_default_instance_;
    new (ptr) ::client::command_hdel();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::client::command_hdel::InitAsDefaultInstance();
}

void InitDefaultscommand_hdel() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultscommand_hdelImpl);
}

void InitDefaultscommand_hmdelImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  {
    void* ptr = &::client::_command_hmdel_default_instance_;
    new (ptr) ::client::command_hmdel();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::client::command_hmdel::InitAsDefaultInstance();
}

void InitDefaultscommand_hmdel() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultscommand_hmdelImpl);
}

void InitDefaultscommand_mhmdelImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  {
    void* ptr = &::client::_command_mhmdel_default_instance_;
    new (ptr) ::client::command_mhmdel();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::client::command_mhmdel::InitAsDefaultInstance();
}

void InitDefaultscommand_mhmdel() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultscommand_mhmdelImpl);
}

void InitDefaultscommand_incrImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  protobuf_data_2eproto::InitDefaultsVALUE();
  {
    void* ptr = &::client::_command_incr_default_instance_;
    new (ptr) ::client::command_incr();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::client::command_incr::InitAsDefaultInstance();
}

void InitDefaultscommand_incr() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultscommand_incrImpl);
}

void InitDefaultscommand_mincr_KvsEntry_DoNotUseImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  protobuf_data_2eproto::InitDefaultsVALUE();
  {
    void* ptr = &::client::_command_mincr_KvsEntry_DoNotUse_default_instance_;
    new (ptr) ::client::command_mincr_KvsEntry_DoNotUse();
  }
  ::client::command_mincr_KvsEntry_DoNotUse::InitAsDefaultInstance();
}

void InitDefaultscommand_mincr_KvsEntry_DoNotUse() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultscommand_mincr_KvsEntry_DoNotUseImpl);
}

void InitDefaultscommand_mincrImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  protobuf_message_2eproto::InitDefaultscommand_mincr_KvsEntry_DoNotUse();
  {
    void* ptr = &::client::_command_mincr_default_instance_;
    new (ptr) ::client::command_mincr();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::client::command_mincr::InitAsDefaultInstance();
}

void InitDefaultscommand_mincr() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultscommand_mincrImpl);
}

void InitDefaultscommand_hincrImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  protobuf_data_2eproto::InitDefaultsVALUE();
  {
    void* ptr = &::client::_command_hincr_default_instance_;
    new (ptr) ::client::command_hincr();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::client::command_hincr::InitAsDefaultInstance();
}

void InitDefaultscommand_hincr() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultscommand_hincrImpl);
}

void InitDefaultscommand_hmincr_KvsEntry_DoNotUseImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  protobuf_data_2eproto::InitDefaultsVALUE();
  {
    void* ptr = &::client::_command_hmincr_KvsEntry_DoNotUse_default_instance_;
    new (ptr) ::client::command_hmincr_KvsEntry_DoNotUse();
  }
  ::client::command_hmincr_KvsEntry_DoNotUse::InitAsDefaultInstance();
}

void InitDefaultscommand_hmincr_KvsEntry_DoNotUse() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultscommand_hmincr_KvsEntry_DoNotUseImpl);
}

void InitDefaultscommand_hmincrImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  protobuf_message_2eproto::InitDefaultscommand_hmincr_KvsEntry_DoNotUse();
  {
    void* ptr = &::client::_command_hmincr_default_instance_;
    new (ptr) ::client::command_hmincr();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::client::command_hmincr::InitAsDefaultInstance();
}

void InitDefaultscommand_hmincr() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultscommand_hmincrImpl);
}

void InitDefaultscommand_mhmincr_KvsEntry_DoNotUseImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  protobuf_message_2eproto::InitDefaultsvalues_type();
  {
    void* ptr = &::client::_command_mhmincr_KvsEntry_DoNotUse_default_instance_;
    new (ptr) ::client::command_mhmincr_KvsEntry_DoNotUse();
  }
  ::client::command_mhmincr_KvsEntry_DoNotUse::InitAsDefaultInstance();
}

void InitDefaultscommand_mhmincr_KvsEntry_DoNotUse() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultscommand_mhmincr_KvsEntry_DoNotUseImpl);
}

void InitDefaultscommand_mhmincrImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  protobuf_message_2eproto::InitDefaultscommand_mhmincr_KvsEntry_DoNotUse();
  {
    void* ptr = &::client::_command_mhmincr_default_instance_;
    new (ptr) ::client::command_mhmincr();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::client::command_mhmincr::InitAsDefaultInstance();
}

void InitDefaultscommand_mhmincr() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultscommand_mhmincrImpl);
}

void InitDefaultscommand_lpushImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  protobuf_data_2eproto::InitDefaultsVALUE();
  {
    void* ptr = &::client::_command_lpush_default_instance_;
    new (ptr) ::client::command_lpush();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::client::command_lpush::InitAsDefaultInstance();
}

void InitDefaultscommand_lpush() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultscommand_lpushImpl);
}

void InitDefaultscommand_mlpush_KvsEntry_DoNotUseImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  protobuf_data_2eproto::InitDefaultsVALUE();
  {
    void* ptr = &::client::_command_mlpush_KvsEntry_DoNotUse_default_instance_;
    new (ptr) ::client::command_mlpush_KvsEntry_DoNotUse();
  }
  ::client::command_mlpush_KvsEntry_DoNotUse::InitAsDefaultInstance();
}

void InitDefaultscommand_mlpush_KvsEntry_DoNotUse() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultscommand_mlpush_KvsEntry_DoNotUseImpl);
}

void InitDefaultscommand_mlpushImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  protobuf_message_2eproto::InitDefaultscommand_mlpush_KvsEntry_DoNotUse();
  {
    void* ptr = &::client::_command_mlpush_default_instance_;
    new (ptr) ::client::command_mlpush();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::client::command_mlpush::InitAsDefaultInstance();
}

void InitDefaultscommand_mlpush() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultscommand_mlpushImpl);
}

void InitDefaultscommand_hlpushImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  protobuf_data_2eproto::InitDefaultsVALUE();
  {
    void* ptr = &::client::_command_hlpush_default_instance_;
    new (ptr) ::client::command_hlpush();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::client::command_hlpush::InitAsDefaultInstance();
}

void InitDefaultscommand_hlpush() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultscommand_hlpushImpl);
}

void InitDefaultscommand_hmlpush_KvsEntry_DoNotUseImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  protobuf_data_2eproto::InitDefaultsVALUE();
  {
    void* ptr = &::client::_command_hmlpush_KvsEntry_DoNotUse_default_instance_;
    new (ptr) ::client::command_hmlpush_KvsEntry_DoNotUse();
  }
  ::client::command_hmlpush_KvsEntry_DoNotUse::InitAsDefaultInstance();
}

void InitDefaultscommand_hmlpush_KvsEntry_DoNotUse() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultscommand_hmlpush_KvsEntry_DoNotUseImpl);
}

void InitDefaultscommand_hmlpushImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  protobuf_message_2eproto::InitDefaultscommand_hmlpush_KvsEntry_DoNotUse();
  {
    void* ptr = &::client::_command_hmlpush_default_instance_;
    new (ptr) ::client::command_hmlpush();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::client::command_hmlpush::InitAsDefaultInstance();
}

void InitDefaultscommand_hmlpush() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultscommand_hmlpushImpl);
}

void InitDefaultscommand_mhmlpush_KvsEntry_DoNotUseImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  protobuf_message_2eproto::InitDefaultsvalues_type();
  {
    void* ptr = &::client::_command_mhmlpush_KvsEntry_DoNotUse_default_instance_;
    new (ptr) ::client::command_mhmlpush_KvsEntry_DoNotUse();
  }
  ::client::command_mhmlpush_KvsEntry_DoNotUse::InitAsDefaultInstance();
}

void InitDefaultscommand_mhmlpush_KvsEntry_DoNotUse() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultscommand_mhmlpush_KvsEntry_DoNotUseImpl);
}

void InitDefaultscommand_mhmlpushImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  protobuf_message_2eproto::InitDefaultscommand_mhmlpush_KvsEntry_DoNotUse();
  {
    void* ptr = &::client::_command_mhmlpush_default_instance_;
    new (ptr) ::client::command_mhmlpush();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::client::command_mhmlpush::InitAsDefaultInstance();
}

void InitDefaultscommand_mhmlpush() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultscommand_mhmlpushImpl);
}

void InitDefaultscommand_lrangeImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  {
    void* ptr = &::client::_command_lrange_default_instance_;
    new (ptr) ::client::command_lrange();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::client::command_lrange::InitAsDefaultInstance();
}

void InitDefaultscommand_lrange() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultscommand_lrangeImpl);
}

void InitDefaultscommand_lrange_replyImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  protobuf_message_2eproto::InitDefaultscommand_reply();
  protobuf_data_2eproto::InitDefaultsVALUE();
  {
    void* ptr = &::client::_command_lrange_reply_default_instance_;
    new (ptr) ::client::command_lrange_reply();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::client::command_lrange_reply::InitAsDefaultInstance();
}

void InitDefaultscommand_lrange_reply() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultscommand_lrange_replyImpl);
}

void InitDefaultscommand_mlrangeImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  {
    void* ptr = &::client::_command_mlrange_default_instance_;
    new (ptr) ::client::command_mlrange();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::client::command_mlrange::InitAsDefaultInstance();
}

void InitDefaultscommand_mlrange() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultscommand_mlrangeImpl);
}

void InitDefaultscommand_mlrange_replyImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  protobuf_message_2eproto::InitDefaultscommand_reply();
  protobuf_data_2eproto::InitDefaultsVALUE();
  {
    void* ptr = &::client::_command_mlrange_reply_default_instance_;
    new (ptr) ::client::command_mlrange_reply();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::client::command_mlrange_reply::InitAsDefaultInstance();
}

void InitDefaultscommand_mlrange_reply() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultscommand_mlrange_replyImpl);
}

void InitDefaultscommand_hlrangeImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  {
    void* ptr = &::client::_command_hlrange_default_instance_;
    new (ptr) ::client::command_hlrange();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::client::command_hlrange::InitAsDefaultInstance();
}

void InitDefaultscommand_hlrange() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultscommand_hlrangeImpl);
}

void InitDefaultscommand_hlrange_replyImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  protobuf_message_2eproto::InitDefaultscommand_reply();
  protobuf_data_2eproto::InitDefaultsVALUE();
  {
    void* ptr = &::client::_command_hlrange_reply_default_instance_;
    new (ptr) ::client::command_hlrange_reply();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::client::command_hlrange_reply::InitAsDefaultInstance();
}

void InitDefaultscommand_hlrange_reply() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultscommand_hlrange_replyImpl);
}

void InitDefaultscommand_hmlrangeImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  {
    void* ptr = &::client::_command_hmlrange_default_instance_;
    new (ptr) ::client::command_hmlrange();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::client::command_hmlrange::InitAsDefaultInstance();
}

void InitDefaultscommand_hmlrange() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultscommand_hmlrangeImpl);
}

void InitDefaultscommand_hmlrange_replyImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  protobuf_message_2eproto::InitDefaultscommand_reply();
  protobuf_data_2eproto::InitDefaultsVALUE();
  {
    void* ptr = &::client::_command_hmlrange_reply_default_instance_;
    new (ptr) ::client::command_hmlrange_reply();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::client::command_hmlrange_reply::InitAsDefaultInstance();
}

void InitDefaultscommand_hmlrange_reply() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultscommand_hmlrange_replyImpl);
}

void InitDefaultscommand_mhmlrangeImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  {
    void* ptr = &::client::_command_mhmlrange_default_instance_;
    new (ptr) ::client::command_mhmlrange();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::client::command_mhmlrange::InitAsDefaultInstance();
}

void InitDefaultscommand_mhmlrange() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultscommand_mhmlrangeImpl);
}

void InitDefaultscommand_mhmlrange_replyImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  protobuf_message_2eproto::InitDefaultscommand_reply();
  protobuf_message_2eproto::InitDefaultsvalues_type();
  {
    void* ptr = &::client::_command_mhmlrange_reply_default_instance_;
    new (ptr) ::client::command_mhmlrange_reply();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::client::command_mhmlrange_reply::InitAsDefaultInstance();
}

void InitDefaultscommand_mhmlrange_reply() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultscommand_mhmlrange_replyImpl);
}

void InitDefaultscommand_lpopImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  {
    void* ptr = &::client::_command_lpop_default_instance_;
    new (ptr) ::client::command_lpop();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::client::command_lpop::InitAsDefaultInstance();
}

void InitDefaultscommand_lpop() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultscommand_lpopImpl);
}

void InitDefaultscommand_lpop_replyImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  protobuf_message_2eproto::InitDefaultscommand_reply();
  protobuf_data_2eproto::InitDefaultsVALUE();
  {
    void* ptr = &::client::_command_lpop_reply_default_instance_;
    new (ptr) ::client::command_lpop_reply();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::client::command_lpop_reply::InitAsDefaultInstance();
}

void InitDefaultscommand_lpop_reply() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultscommand_lpop_replyImpl);
}

void InitDefaultscommand_mlpopImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  {
    void* ptr = &::client::_command_mlpop_default_instance_;
    new (ptr) ::client::command_mlpop();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::client::command_mlpop::InitAsDefaultInstance();
}

void InitDefaultscommand_mlpop() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultscommand_mlpopImpl);
}

void InitDefaultscommand_mlpop_repyImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  protobuf_message_2eproto::InitDefaultscommand_reply();
  protobuf_data_2eproto::InitDefaultsVALUE();
  {
    void* ptr = &::client::_command_mlpop_repy_default_instance_;
    new (ptr) ::client::command_mlpop_repy();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::client::command_mlpop_repy::InitAsDefaultInstance();
}

void InitDefaultscommand_mlpop_repy() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultscommand_mlpop_repyImpl);
}

void InitDefaultscommand_hlpopImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  {
    void* ptr = &::client::_command_hlpop_default_instance_;
    new (ptr) ::client::command_hlpop();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::client::command_hlpop::InitAsDefaultInstance();
}

void InitDefaultscommand_hlpop() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultscommand_hlpopImpl);
}

void InitDefaultscommand_hlpop_replyImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  protobuf_message_2eproto::InitDefaultscommand_reply();
  protobuf_data_2eproto::InitDefaultsVALUE();
  {
    void* ptr = &::client::_command_hlpop_reply_default_instance_;
    new (ptr) ::client::command_hlpop_reply();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::client::command_hlpop_reply::InitAsDefaultInstance();
}

void InitDefaultscommand_hlpop_reply() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultscommand_hlpop_replyImpl);
}

void InitDefaultscommand_hmlpopImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  {
    void* ptr = &::client::_command_hmlpop_default_instance_;
    new (ptr) ::client::command_hmlpop();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::client::command_hmlpop::InitAsDefaultInstance();
}

void InitDefaultscommand_hmlpop() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultscommand_hmlpopImpl);
}

void InitDefaultscommand_hmlpop_replyImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  protobuf_message_2eproto::InitDefaultscommand_reply();
  protobuf_data_2eproto::InitDefaultsVALUE();
  {
    void* ptr = &::client::_command_hmlpop_reply_default_instance_;
    new (ptr) ::client::command_hmlpop_reply();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::client::command_hmlpop_reply::InitAsDefaultInstance();
}

void InitDefaultscommand_hmlpop_reply() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultscommand_hmlpop_replyImpl);
}

void InitDefaultscommand_mhmlpopImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  {
    void* ptr = &::client::_command_mhmlpop_default_instance_;
    new (ptr) ::client::command_mhmlpop();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::client::command_mhmlpop::InitAsDefaultInstance();
}

void InitDefaultscommand_mhmlpop() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultscommand_mhmlpopImpl);
}

void InitDefaultscommand_mhmlpop_replyImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  protobuf_message_2eproto::InitDefaultscommand_reply();
  protobuf_message_2eproto::InitDefaultsvalues_type();
  {
    void* ptr = &::client::_command_mhmlpop_reply_default_instance_;
    new (ptr) ::client::command_mhmlpop_reply();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::client::command_mhmlpop_reply::InitAsDefaultInstance();
}

void InitDefaultscommand_mhmlpop_reply() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultscommand_mhmlpop_replyImpl);
}

void InitDefaultscommand_ltrimImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  {
    void* ptr = &::client::_command_ltrim_default_instance_;
    new (ptr) ::client::command_ltrim();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::client::command_ltrim::InitAsDefaultInstance();
}

void InitDefaultscommand_ltrim() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultscommand_ltrimImpl);
}

void InitDefaultscommand_mltrimImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  {
    void* ptr = &::client::_command_mltrim_default_instance_;
    new (ptr) ::client::command_mltrim();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::client::command_mltrim::InitAsDefaultInstance();
}

void InitDefaultscommand_mltrim() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultscommand_mltrimImpl);
}

void InitDefaultscommand_hltrimImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  {
    void* ptr = &::client::_command_hltrim_default_instance_;
    new (ptr) ::client::command_hltrim();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::client::command_hltrim::InitAsDefaultInstance();
}

void InitDefaultscommand_hltrim() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultscommand_hltrimImpl);
}

void InitDefaultscommand_hmltrimImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  {
    void* ptr = &::client::_command_hmltrim_default_instance_;
    new (ptr) ::client::command_hmltrim();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::client::command_hmltrim::InitAsDefaultInstance();
}

void InitDefaultscommand_hmltrim() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultscommand_hmltrimImpl);
}

void InitDefaultscommand_mhmltrimImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  {
    void* ptr = &::client::_command_mhmltrim_default_instance_;
    new (ptr) ::client::command_mhmltrim();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::client::command_mhmltrim::InitAsDefaultInstance();
}

void InitDefaultscommand_mhmltrim() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultscommand_mhmltrimImpl);
}

void InitDefaultscommand_llenImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  {
    void* ptr = &::client::_command_llen_default_instance_;
    new (ptr) ::client::command_llen();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::client::command_llen::InitAsDefaultInstance();
}

void InitDefaultscommand_llen() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultscommand_llenImpl);
}

void InitDefaultscommand_llen_replyImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  protobuf_message_2eproto::InitDefaultscommand_reply();
  protobuf_data_2eproto::InitDefaultsVALUE();
  {
    void* ptr = &::client::_command_llen_reply_default_instance_;
    new (ptr) ::client::command_llen_reply();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::client::command_llen_reply::InitAsDefaultInstance();
}

void InitDefaultscommand_llen_reply() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultscommand_llen_replyImpl);
}

void InitDefaultscommand_mllenImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  {
    void* ptr = &::client::_command_mllen_default_instance_;
    new (ptr) ::client::command_mllen();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::client::command_mllen::InitAsDefaultInstance();
}

void InitDefaultscommand_mllen() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultscommand_mllenImpl);
}

void InitDefaultscommand_mllen_replyImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  protobuf_message_2eproto::InitDefaultscommand_reply();
  protobuf_data_2eproto::InitDefaultsVALUE();
  {
    void* ptr = &::client::_command_mllen_reply_default_instance_;
    new (ptr) ::client::command_mllen_reply();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::client::command_mllen_reply::InitAsDefaultInstance();
}

void InitDefaultscommand_mllen_reply() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultscommand_mllen_replyImpl);
}

void InitDefaultscommand_hllenImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  {
    void* ptr = &::client::_command_hllen_default_instance_;
    new (ptr) ::client::command_hllen();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::client::command_hllen::InitAsDefaultInstance();
}

void InitDefaultscommand_hllen() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultscommand_hllenImpl);
}

void InitDefaultscommand_hllen_replyImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  protobuf_message_2eproto::InitDefaultscommand_reply();
  protobuf_data_2eproto::InitDefaultsVALUE();
  {
    void* ptr = &::client::_command_hllen_reply_default_instance_;
    new (ptr) ::client::command_hllen_reply();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::client::command_hllen_reply::InitAsDefaultInstance();
}

void InitDefaultscommand_hllen_reply() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultscommand_hllen_replyImpl);
}

void InitDefaultscommand_hmllenImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  {
    void* ptr = &::client::_command_hmllen_default_instance_;
    new (ptr) ::client::command_hmllen();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::client::command_hmllen::InitAsDefaultInstance();
}

void InitDefaultscommand_hmllen() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultscommand_hmllenImpl);
}

void InitDefaultscommand_hmllen_replyImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  protobuf_message_2eproto::InitDefaultscommand_reply();
  protobuf_data_2eproto::InitDefaultsVALUE();
  {
    void* ptr = &::client::_command_hmllen_reply_default_instance_;
    new (ptr) ::client::command_hmllen_reply();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::client::command_hmllen_reply::InitAsDefaultInstance();
}

void InitDefaultscommand_hmllen_reply() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultscommand_hmllen_replyImpl);
}

void InitDefaultscommand_mhmllenImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  {
    void* ptr = &::client::_command_mhmllen_default_instance_;
    new (ptr) ::client::command_mhmllen();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::client::command_mhmllen::InitAsDefaultInstance();
}

void InitDefaultscommand_mhmllen() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultscommand_mhmllenImpl);
}

void InitDefaultscommand_mhmllen_replyImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  protobuf_message_2eproto::InitDefaultscommand_reply();
  protobuf_message_2eproto::InitDefaultsvalues_type();
  {
    void* ptr = &::client::_command_mhmllen_reply_default_instance_;
    new (ptr) ::client::command_mhmllen_reply();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::client::command_mhmllen_reply::InitAsDefaultInstance();
}

void InitDefaultscommand_mhmllen_reply() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultscommand_mhmllen_replyImpl);
}

void InitDefaultscommand_mapgetImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  {
    void* ptr = &::client::_command_mapget_default_instance_;
    new (ptr) ::client::command_mapget();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::client::command_mapget::InitAsDefaultInstance();
}

void InitDefaultscommand_mapget() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultscommand_mapgetImpl);
}

void InitDefaultscommand_mapget_replyImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  protobuf_message_2eproto::InitDefaultscommand_reply();
  protobuf_data_2eproto::InitDefaultsVALUE();
  {
    void* ptr = &::client::_command_mapget_reply_default_instance_;
    new (ptr) ::client::command_mapget_reply();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::client::command_mapget_reply::InitAsDefaultInstance();
}

void InitDefaultscommand_mapget_reply() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultscommand_mapget_replyImpl);
}

void InitDefaultscommand_mmapgetImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  {
    void* ptr = &::client::_command_mmapget_default_instance_;
    new (ptr) ::client::command_mmapget();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::client::command_mmapget::InitAsDefaultInstance();
}

void InitDefaultscommand_mmapget() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultscommand_mmapgetImpl);
}

void InitDefaultscommand_mmapget_replyImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  protobuf_message_2eproto::InitDefaultscommand_reply();
  protobuf_data_2eproto::InitDefaultsVALUE();
  {
    void* ptr = &::client::_command_mmapget_reply_default_instance_;
    new (ptr) ::client::command_mmapget_reply();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::client::command_mmapget_reply::InitAsDefaultInstance();
}

void InitDefaultscommand_mmapget_reply() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultscommand_mmapget_replyImpl);
}

void InitDefaultscommand_hmapgetImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  {
    void* ptr = &::client::_command_hmapget_default_instance_;
    new (ptr) ::client::command_hmapget();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::client::command_hmapget::InitAsDefaultInstance();
}

void InitDefaultscommand_hmapget() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultscommand_hmapgetImpl);
}

void InitDefaultscommand_hmapget_replyImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  protobuf_message_2eproto::InitDefaultscommand_reply();
  protobuf_data_2eproto::InitDefaultsVALUE();
  {
    void* ptr = &::client::_command_hmapget_reply_default_instance_;
    new (ptr) ::client::command_hmapget_reply();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::client::command_hmapget_reply::InitAsDefaultInstance();
}

void InitDefaultscommand_hmapget_reply() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultscommand_hmapget_replyImpl);
}

void InitDefaultscommand_hmmapgetImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  {
    void* ptr = &::client::_command_hmmapget_default_instance_;
    new (ptr) ::client::command_hmmapget();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::client::command_hmmapget::InitAsDefaultInstance();
}

void InitDefaultscommand_hmmapget() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultscommand_hmmapgetImpl);
}

void InitDefaultscommand_hmmapget_replyImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  protobuf_message_2eproto::InitDefaultscommand_reply();
  protobuf_data_2eproto::InitDefaultsVALUE();
  {
    void* ptr = &::client::_command_hmmapget_reply_default_instance_;
    new (ptr) ::client::command_hmmapget_reply();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::client::command_hmmapget_reply::InitAsDefaultInstance();
}

void InitDefaultscommand_hmmapget_reply() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultscommand_hmmapget_replyImpl);
}

void InitDefaultscommand_mhmmapgetImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  {
    void* ptr = &::client::_command_mhmmapget_default_instance_;
    new (ptr) ::client::command_mhmmapget();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::client::command_mhmmapget::InitAsDefaultInstance();
}

void InitDefaultscommand_mhmmapget() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultscommand_mhmmapgetImpl);
}

void InitDefaultscommand_mhmmapget_replyImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  protobuf_message_2eproto::InitDefaultscommand_reply();
  protobuf_message_2eproto::InitDefaultsvalues_type();
  {
    void* ptr = &::client::_command_mhmmapget_reply_default_instance_;
    new (ptr) ::client::command_mhmmapget_reply();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::client::command_mhmmapget_reply::InitAsDefaultInstance();
}

void InitDefaultscommand_mhmmapget_reply() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultscommand_mhmmapget_replyImpl);
}

void InitDefaultscommand_mapsetImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  protobuf_data_2eproto::InitDefaultsVALUE();
  {
    void* ptr = &::client::_command_mapset_default_instance_;
    new (ptr) ::client::command_mapset();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::client::command_mapset::InitAsDefaultInstance();
}

void InitDefaultscommand_mapset() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultscommand_mapsetImpl);
}

void InitDefaultscommand_mmapset_KvsEntry_DoNotUseImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  protobuf_data_2eproto::InitDefaultsVALUE();
  {
    void* ptr = &::client::_command_mmapset_KvsEntry_DoNotUse_default_instance_;
    new (ptr) ::client::command_mmapset_KvsEntry_DoNotUse();
  }
  ::client::command_mmapset_KvsEntry_DoNotUse::InitAsDefaultInstance();
}

void InitDefaultscommand_mmapset_KvsEntry_DoNotUse() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultscommand_mmapset_KvsEntry_DoNotUseImpl);
}

void InitDefaultscommand_mmapsetImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  protobuf_message_2eproto::InitDefaultscommand_mmapset_KvsEntry_DoNotUse();
  {
    void* ptr = &::client::_command_mmapset_default_instance_;
    new (ptr) ::client::command_mmapset();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::client::command_mmapset::InitAsDefaultInstance();
}

void InitDefaultscommand_mmapset() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultscommand_mmapsetImpl);
}

void InitDefaultscommand_hmapsetImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  protobuf_data_2eproto::InitDefaultsVALUE();
  {
    void* ptr = &::client::_command_hmapset_default_instance_;
    new (ptr) ::client::command_hmapset();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::client::command_hmapset::InitAsDefaultInstance();
}

void InitDefaultscommand_hmapset() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultscommand_hmapsetImpl);
}

void InitDefaultscommand_hmmapset_ValuesEntry_DoNotUseImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  protobuf_data_2eproto::InitDefaultsVALUE();
  {
    void* ptr = &::client::_command_hmmapset_ValuesEntry_DoNotUse_default_instance_;
    new (ptr) ::client::command_hmmapset_ValuesEntry_DoNotUse();
  }
  ::client::command_hmmapset_ValuesEntry_DoNotUse::InitAsDefaultInstance();
}

void InitDefaultscommand_hmmapset_ValuesEntry_DoNotUse() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultscommand_hmmapset_ValuesEntry_DoNotUseImpl);
}

void InitDefaultscommand_hmmapsetImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  protobuf_message_2eproto::InitDefaultscommand_hmmapset_ValuesEntry_DoNotUse();
  {
    void* ptr = &::client::_command_hmmapset_default_instance_;
    new (ptr) ::client::command_hmmapset();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::client::command_hmmapset::InitAsDefaultInstance();
}

void InitDefaultscommand_hmmapset() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultscommand_hmmapsetImpl);
}

void InitDefaultscommand_mhmmapset_ValuesEntry_DoNotUseImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  protobuf_data_2eproto::InitDefaultsVALUE();
  {
    void* ptr = &::client::_command_mhmmapset_ValuesEntry_DoNotUse_default_instance_;
    new (ptr) ::client::command_mhmmapset_ValuesEntry_DoNotUse();
  }
  ::client::command_mhmmapset_ValuesEntry_DoNotUse::InitAsDefaultInstance();
}

void InitDefaultscommand_mhmmapset_ValuesEntry_DoNotUse() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultscommand_mhmmapset_ValuesEntry_DoNotUseImpl);
}

void InitDefaultscommand_mhmmapsetImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  protobuf_message_2eproto::InitDefaultscommand_mhmmapset_ValuesEntry_DoNotUse();
  {
    void* ptr = &::client::_command_mhmmapset_default_instance_;
    new (ptr) ::client::command_mhmmapset();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::client::command_mhmmapset::InitAsDefaultInstance();
}

void InitDefaultscommand_mhmmapset() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultscommand_mhmmapsetImpl);
}

void InitDefaultscommand_mapdelImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  {
    void* ptr = &::client::_command_mapdel_default_instance_;
    new (ptr) ::client::command_mapdel();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::client::command_mapdel::InitAsDefaultInstance();
}

void InitDefaultscommand_mapdel() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultscommand_mapdelImpl);
}

void InitDefaultscommand_mmapdelImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  {
    void* ptr = &::client::_command_mmapdel_default_instance_;
    new (ptr) ::client::command_mmapdel();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::client::command_mmapdel::InitAsDefaultInstance();
}

void InitDefaultscommand_mmapdel() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultscommand_mmapdelImpl);
}

void InitDefaultscommand_hmapdelImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  {
    void* ptr = &::client::_command_hmapdel_default_instance_;
    new (ptr) ::client::command_hmapdel();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::client::command_hmapdel::InitAsDefaultInstance();
}

void InitDefaultscommand_hmapdel() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultscommand_hmapdelImpl);
}

void InitDefaultscommand_hmmapdelImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  {
    void* ptr = &::client::_command_hmmapdel_default_instance_;
    new (ptr) ::client::command_hmmapdel();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::client::command_hmmapdel::InitAsDefaultInstance();
}

void InitDefaultscommand_hmmapdel() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultscommand_hmmapdelImpl);
}

void InitDefaultscommand_mhmmapdel_ValuesEntry_DoNotUseImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  protobuf_message_2eproto::InitDefaultskeys_type();
  {
    void* ptr = &::client::_command_mhmmapdel_ValuesEntry_DoNotUse_default_instance_;
    new (ptr) ::client::command_mhmmapdel_ValuesEntry_DoNotUse();
  }
  ::client::command_mhmmapdel_ValuesEntry_DoNotUse::InitAsDefaultInstance();
}

void InitDefaultscommand_mhmmapdel_ValuesEntry_DoNotUse() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultscommand_mhmmapdel_ValuesEntry_DoNotUseImpl);
}

void InitDefaultscommand_mhmmapdelImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  protobuf_message_2eproto::InitDefaultscommand_mhmmapdel_ValuesEntry_DoNotUse();
  {
    void* ptr = &::client::_command_mhmmapdel_default_instance_;
    new (ptr) ::client::command_mhmmapdel();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::client::command_mhmmapdel::InitAsDefaultInstance();
}

void InitDefaultscommand_mhmmapdel() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultscommand_mhmmapdelImpl);
}

void InitDefaultscommand_meetImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  {
    void* ptr = &::client::_command_meet_default_instance_;
    new (ptr) ::client::command_meet();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::client::command_meet::InitAsDefaultInstance();
}

void InitDefaultscommand_meet() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultscommand_meetImpl);
}

::google::protobuf::Metadata file_level_metadata[103];
const ::google::protobuf::EnumDescriptor* file_level_enum_descriptors[1];

const ::google::protobuf::uint32 TableStruct::offsets[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::client::command_reply, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::client::command_reply, errcode_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::client::command_reply, errmsg_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::client::values_type, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::client::values_type, value_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::client::keys_type, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::client::keys_type, value_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::client::command_set, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::client::command_set, key_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::client::command_set, value_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::client::command_mset_KvsEntry_DoNotUse, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::client::command_mset_KvsEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::client::command_mset_KvsEntry_DoNotUse, key_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::client::command_mset_KvsEntry_DoNotUse, value_),
  0,
  1,
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::client::command_mset, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::client::command_mset, kvs_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::client::command_hset, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::client::command_hset, key_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::client::command_hset, field_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::client::command_hset, value_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::client::command_hset, ttl_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::client::command_hmset_ValuesEntry_DoNotUse, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::client::command_hmset_ValuesEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::client::command_hmset_ValuesEntry_DoNotUse, key_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::client::command_hmset_ValuesEntry_DoNotUse, value_),
  0,
  1,
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::client::command_hmset, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::client::command_hmset, key_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::client::command_hmset, values_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::client::command_mhmset_ValuesEntry_DoNotUse, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::client::command_mhmset_ValuesEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::client::command_mhmset_ValuesEntry_DoNotUse, key_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::client::command_mhmset_ValuesEntry_DoNotUse, value_),
  0,
  1,
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::client::command_mhmset, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::client::command_mhmset, fields_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::client::command_mhmset, values_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::client::command_get, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::client::command_get, key_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::client::command_get_reply, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::client::command_get_reply, state_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::client::command_get_reply, data_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::client::command_mget, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::client::command_mget, keys_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::client::command_mget_reply, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::client::command_mget_reply, state_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::client::command_mget_reply, data_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::client::command_hget, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::client::command_hget, key_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::client::command_hget, field_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::client::command_hget_reply, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::client::command_hget_reply, state_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::client::command_hget_reply, data_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::client::command_hmget, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::client::command_hmget, key_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::client::command_hmget, fields_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::client::command_hmget_reply, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::client::command_hmget_reply, state_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::client::command_hmget_reply, data_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::client::command_mhmget, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::client::command_mhmget, keys_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::client::command_mhmget, fields_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::client::command_mhmget_reply_DataEntry_DoNotUse, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::client::command_mhmget_reply_DataEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::client::command_mhmget_reply_DataEntry_DoNotUse, key_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::client::command_mhmget_reply_DataEntry_DoNotUse, value_),
  0,
  1,
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::client::command_mhmget_reply, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::client::command_mhmget_reply, state_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::client::command_mhmget_reply, data_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::client::command_del, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::client::command_del, key_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::client::command_mdel, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::client::command_mdel, keys_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::client::command_hdel, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::client::command_hdel, key_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::client::command_hdel, field_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::client::command_hmdel, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::client::command_hmdel, key_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::client::command_hmdel, fields_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::client::command_mhmdel, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::client::command_mhmdel, keys_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::client::command_mhmdel, fields_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::client::command_incr, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::client::command_incr, key_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::client::command_incr, value_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::client::command_mincr_KvsEntry_DoNotUse, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::client::command_mincr_KvsEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::client::command_mincr_KvsEntry_DoNotUse, key_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::client::command_mincr_KvsEntry_DoNotUse, value_),
  0,
  1,
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::client::command_mincr, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::client::command_mincr, kvs_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::client::command_hincr, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::client::command_hincr, key_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::client::command_hincr, field_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::client::command_hincr, value_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::client::command_hmincr_KvsEntry_DoNotUse, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::client::command_hmincr_KvsEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::client::command_hmincr_KvsEntry_DoNotUse, key_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::client::command_hmincr_KvsEntry_DoNotUse, value_),
  0,
  1,
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::client::command_hmincr, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::client::command_hmincr, key_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::client::command_hmincr, kvs_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::client::command_mhmincr_KvsEntry_DoNotUse, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::client::command_mhmincr_KvsEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::client::command_mhmincr_KvsEntry_DoNotUse, key_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::client::command_mhmincr_KvsEntry_DoNotUse, value_),
  0,
  1,
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::client::command_mhmincr, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::client::command_mhmincr, fields_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::client::command_mhmincr, kvs_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::client::command_lpush, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::client::command_lpush, key_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::client::command_lpush, value_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::client::command_lpush, head_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::client::command_mlpush_KvsEntry_DoNotUse, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::client::command_mlpush_KvsEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::client::command_mlpush_KvsEntry_DoNotUse, key_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::client::command_mlpush_KvsEntry_DoNotUse, value_),
  0,
  1,
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::client::command_mlpush, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::client::command_mlpush, kvs_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::client::command_mlpush, head_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::client::command_hlpush, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::client::command_hlpush, key_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::client::command_hlpush, field_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::client::command_hlpush, value_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::client::command_hmlpush_KvsEntry_DoNotUse, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::client::command_hmlpush_KvsEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::client::command_hmlpush_KvsEntry_DoNotUse, key_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::client::command_hmlpush_KvsEntry_DoNotUse, value_),
  0,
  1,
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::client::command_hmlpush, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::client::command_hmlpush, key_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::client::command_hmlpush, kvs_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::client::command_mhmlpush_KvsEntry_DoNotUse, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::client::command_mhmlpush_KvsEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::client::command_mhmlpush_KvsEntry_DoNotUse, key_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::client::command_mhmlpush_KvsEntry_DoNotUse, value_),
  0,
  1,
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::client::command_mhmlpush, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::client::command_mhmlpush, fields_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::client::command_mhmlpush, kvs_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::client::command_lrange, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::client::command_lrange, key_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::client::command_lrange, start_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::client::command_lrange, stop_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::client::command_lrange_reply, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::client::command_lrange_reply, state_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::client::command_lrange_reply, data_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::client::command_mlrange, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::client::command_mlrange, keys_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::client::command_mlrange, start_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::client::command_mlrange, stop_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::client::command_mlrange_reply, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::client::command_mlrange_reply, state_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::client::command_mlrange_reply, data_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::client::command_hlrange, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::client::command_hlrange, key_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::client::command_hlrange, field_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::client::command_hlrange, start_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::client::command_hlrange, stop_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::client::command_hlrange_reply, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::client::command_hlrange_reply, state_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::client::command_hlrange_reply, value_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::client::command_hmlrange, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::client::command_hmlrange, key_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::client::command_hmlrange, fields_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::client::command_hmlrange, start_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::client::command_hmlrange, stop_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::client::command_hmlrange_reply, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::client::command_hmlrange_reply, state_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::client::command_hmlrange_reply, data_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::client::command_mhmlrange, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::client::command_mhmlrange, keys_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::client::command_mhmlrange, fields_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::client::command_mhmlrange_reply, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::client::command_mhmlrange_reply, state_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::client::command_mhmlrange_reply, data_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::client::command_lpop, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::client::command_lpop, key_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::client::command_lpop, head_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::client::command_lpop_reply, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::client::command_lpop_reply, state_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::client::command_lpop_reply, data_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::client::command_mlpop, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::client::command_mlpop, keys_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::client::command_mlpop, head_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::client::command_mlpop_repy, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::client::command_mlpop_repy, state_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::client::command_mlpop_repy, data_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::client::command_hlpop, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::client::command_hlpop, key_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::client::command_hlpop, field_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::client::command_hlpop_reply, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::client::command_hlpop_reply, state_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::client::command_hlpop_reply, data_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::client::command_hmlpop, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::client::command_hmlpop, key_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::client::command_hmlpop, fields_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::client::command_hmlpop_reply, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::client::command_hmlpop_reply, state_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::client::command_hmlpop_reply, data_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::client::command_mhmlpop, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::client::command_mhmlpop, keys_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::client::command_mhmlpop, fields_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::client::command_mhmlpop_reply, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::client::command_mhmlpop_reply, state_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::client::command_mhmlpop_reply, data_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::client::command_ltrim, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::client::command_ltrim, key_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::client::command_ltrim, start_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::client::command_ltrim, stop_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::client::command_mltrim, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::client::command_mltrim, keys_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::client::command_mltrim, start_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::client::command_mltrim, stop_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::client::command_hltrim, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::client::command_hltrim, key_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::client::command_hltrim, filed_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::client::command_hltrim, start_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::client::command_hltrim, stop_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::client::command_hmltrim, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::client::command_hmltrim, key_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::client::command_hmltrim, fileds_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::client::command_hmltrim, start_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::client::command_hmltrim, stop_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::client::command_mhmltrim, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::client::command_mhmltrim, keys_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::client::command_mhmltrim, fileds_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::client::command_mhmltrim, start_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::client::command_mhmltrim, stop_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::client::command_llen, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::client::command_llen, key_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::client::command_llen_reply, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::client::command_llen_reply, state_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::client::command_llen_reply, data_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::client::command_mllen, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::client::command_mllen, keys_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::client::command_mllen_reply, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::client::command_mllen_reply, state_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::client::command_mllen_reply, data_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::client::command_hllen, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::client::command_hllen, key_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::client::command_hllen, field_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::client::command_hllen_reply, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::client::command_hllen_reply, state_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::client::command_hllen_reply, data_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::client::command_hmllen, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::client::command_hmllen, key_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::client::command_hmllen, fields_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::client::command_hmllen_reply, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::client::command_hmllen_reply, state_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::client::command_hmllen_reply, data_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::client::command_mhmllen, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::client::command_mhmllen, keys_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::client::command_mhmllen, fields_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::client::command_mhmllen_reply, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::client::command_mhmllen_reply, state_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::client::command_mhmllen_reply, data_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::client::command_mapget, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::client::command_mapget, key_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::client::command_mapget_reply, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::client::command_mapget_reply, state_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::client::command_mapget_reply, data_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::client::command_mmapget, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::client::command_mmapget, keys_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::client::command_mmapget_reply, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::client::command_mmapget_reply, state_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::client::command_mmapget_reply, data_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::client::command_hmapget, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::client::command_hmapget, key_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::client::command_hmapget, field_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::client::command_hmapget_reply, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::client::command_hmapget_reply, state_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::client::command_hmapget_reply, data_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::client::command_hmmapget, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::client::command_hmmapget, key_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::client::command_hmmapget, fields_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::client::command_hmmapget_reply, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::client::command_hmmapget_reply, state_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::client::command_hmmapget_reply, data_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::client::command_mhmmapget, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::client::command_mhmmapget, keys_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::client::command_mhmmapget, fields_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::client::command_mhmmapget_reply, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::client::command_mhmmapget_reply, state_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::client::command_mhmmapget_reply, data_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::client::command_mapset, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::client::command_mapset, key_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::client::command_mapset, value_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::client::command_mmapset_KvsEntry_DoNotUse, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::client::command_mmapset_KvsEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::client::command_mmapset_KvsEntry_DoNotUse, key_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::client::command_mmapset_KvsEntry_DoNotUse, value_),
  0,
  1,
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::client::command_mmapset, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::client::command_mmapset, kvs_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::client::command_hmapset, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::client::command_hmapset, key_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::client::command_hmapset, field_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::client::command_hmapset, value_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::client::command_hmmapset_ValuesEntry_DoNotUse, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::client::command_hmmapset_ValuesEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::client::command_hmmapset_ValuesEntry_DoNotUse, key_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::client::command_hmmapset_ValuesEntry_DoNotUse, value_),
  0,
  1,
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::client::command_hmmapset, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::client::command_hmmapset, key_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::client::command_hmmapset, values_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::client::command_mhmmapset_ValuesEntry_DoNotUse, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::client::command_mhmmapset_ValuesEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::client::command_mhmmapset_ValuesEntry_DoNotUse, key_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::client::command_mhmmapset_ValuesEntry_DoNotUse, value_),
  0,
  1,
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::client::command_mhmmapset, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::client::command_mhmmapset, fields_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::client::command_mhmmapset, values_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::client::command_mapdel, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::client::command_mapdel, key_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::client::command_mapdel, mapkeys_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::client::command_mmapdel, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::client::command_mmapdel, keys_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::client::command_mmapdel, mapkeys_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::client::command_hmapdel, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::client::command_hmapdel, key_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::client::command_hmapdel, field_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::client::command_hmapdel, mapkeys_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::client::command_hmmapdel, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::client::command_hmmapdel, key_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::client::command_hmmapdel, field_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::client::command_hmmapdel, mapkeys_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::client::command_mhmmapdel_ValuesEntry_DoNotUse, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::client::command_mhmmapdel_ValuesEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::client::command_mhmmapdel_ValuesEntry_DoNotUse, key_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::client::command_mhmmapdel_ValuesEntry_DoNotUse, value_),
  0,
  1,
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::client::command_mhmmapdel, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::client::command_mhmmapdel, field_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::client::command_mhmmapdel, values_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::client::command_meet, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::client::command_meet, ip_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::client::command_meet, port_),
};
static const ::google::protobuf::internal::MigrationSchema schemas[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::client::command_reply)},
  { 7, -1, sizeof(::client::values_type)},
  { 13, -1, sizeof(::client::keys_type)},
  { 19, -1, sizeof(::client::command_set)},
  { 26, 33, sizeof(::client::command_mset_KvsEntry_DoNotUse)},
  { 35, -1, sizeof(::client::command_mset)},
  { 41, -1, sizeof(::client::command_hset)},
  { 50, 57, sizeof(::client::command_hmset_ValuesEntry_DoNotUse)},
  { 59, -1, sizeof(::client::command_hmset)},
  { 66, 73, sizeof(::client::command_mhmset_ValuesEntry_DoNotUse)},
  { 75, -1, sizeof(::client::command_mhmset)},
  { 82, -1, sizeof(::client::command_get)},
  { 88, -1, sizeof(::client::command_get_reply)},
  { 95, -1, sizeof(::client::command_mget)},
  { 101, -1, sizeof(::client::command_mget_reply)},
  { 108, -1, sizeof(::client::command_hget)},
  { 115, -1, sizeof(::client::command_hget_reply)},
  { 122, -1, sizeof(::client::command_hmget)},
  { 129, -1, sizeof(::client::command_hmget_reply)},
  { 136, -1, sizeof(::client::command_mhmget)},
  { 143, 150, sizeof(::client::command_mhmget_reply_DataEntry_DoNotUse)},
  { 152, -1, sizeof(::client::command_mhmget_reply)},
  { 159, -1, sizeof(::client::command_del)},
  { 165, -1, sizeof(::client::command_mdel)},
  { 171, -1, sizeof(::client::command_hdel)},
  { 178, -1, sizeof(::client::command_hmdel)},
  { 185, -1, sizeof(::client::command_mhmdel)},
  { 192, -1, sizeof(::client::command_incr)},
  { 199, 206, sizeof(::client::command_mincr_KvsEntry_DoNotUse)},
  { 208, -1, sizeof(::client::command_mincr)},
  { 214, -1, sizeof(::client::command_hincr)},
  { 222, 229, sizeof(::client::command_hmincr_KvsEntry_DoNotUse)},
  { 231, -1, sizeof(::client::command_hmincr)},
  { 238, 245, sizeof(::client::command_mhmincr_KvsEntry_DoNotUse)},
  { 247, -1, sizeof(::client::command_mhmincr)},
  { 254, -1, sizeof(::client::command_lpush)},
  { 262, 269, sizeof(::client::command_mlpush_KvsEntry_DoNotUse)},
  { 271, -1, sizeof(::client::command_mlpush)},
  { 278, -1, sizeof(::client::command_hlpush)},
  { 286, 293, sizeof(::client::command_hmlpush_KvsEntry_DoNotUse)},
  { 295, -1, sizeof(::client::command_hmlpush)},
  { 302, 309, sizeof(::client::command_mhmlpush_KvsEntry_DoNotUse)},
  { 311, -1, sizeof(::client::command_mhmlpush)},
  { 318, -1, sizeof(::client::command_lrange)},
  { 326, -1, sizeof(::client::command_lrange_reply)},
  { 333, -1, sizeof(::client::command_mlrange)},
  { 341, -1, sizeof(::client::command_mlrange_reply)},
  { 348, -1, sizeof(::client::command_hlrange)},
  { 357, -1, sizeof(::client::command_hlrange_reply)},
  { 364, -1, sizeof(::client::command_hmlrange)},
  { 373, -1, sizeof(::client::command_hmlrange_reply)},
  { 380, -1, sizeof(::client::command_mhmlrange)},
  { 387, -1, sizeof(::client::command_mhmlrange_reply)},
  { 394, -1, sizeof(::client::command_lpop)},
  { 401, -1, sizeof(::client::command_lpop_reply)},
  { 408, -1, sizeof(::client::command_mlpop)},
  { 415, -1, sizeof(::client::command_mlpop_repy)},
  { 422, -1, sizeof(::client::command_hlpop)},
  { 429, -1, sizeof(::client::command_hlpop_reply)},
  { 436, -1, sizeof(::client::command_hmlpop)},
  { 443, -1, sizeof(::client::command_hmlpop_reply)},
  { 450, -1, sizeof(::client::command_mhmlpop)},
  { 457, -1, sizeof(::client::command_mhmlpop_reply)},
  { 464, -1, sizeof(::client::command_ltrim)},
  { 472, -1, sizeof(::client::command_mltrim)},
  { 480, -1, sizeof(::client::command_hltrim)},
  { 489, -1, sizeof(::client::command_hmltrim)},
  { 498, -1, sizeof(::client::command_mhmltrim)},
  { 507, -1, sizeof(::client::command_llen)},
  { 513, -1, sizeof(::client::command_llen_reply)},
  { 520, -1, sizeof(::client::command_mllen)},
  { 526, -1, sizeof(::client::command_mllen_reply)},
  { 533, -1, sizeof(::client::command_hllen)},
  { 540, -1, sizeof(::client::command_hllen_reply)},
  { 547, -1, sizeof(::client::command_hmllen)},
  { 554, -1, sizeof(::client::command_hmllen_reply)},
  { 561, -1, sizeof(::client::command_mhmllen)},
  { 568, -1, sizeof(::client::command_mhmllen_reply)},
  { 575, -1, sizeof(::client::command_mapget)},
  { 581, -1, sizeof(::client::command_mapget_reply)},
  { 588, -1, sizeof(::client::command_mmapget)},
  { 594, -1, sizeof(::client::command_mmapget_reply)},
  { 601, -1, sizeof(::client::command_hmapget)},
  { 608, -1, sizeof(::client::command_hmapget_reply)},
  { 615, -1, sizeof(::client::command_hmmapget)},
  { 622, -1, sizeof(::client::command_hmmapget_reply)},
  { 629, -1, sizeof(::client::command_mhmmapget)},
  { 636, -1, sizeof(::client::command_mhmmapget_reply)},
  { 643, -1, sizeof(::client::command_mapset)},
  { 650, 657, sizeof(::client::command_mmapset_KvsEntry_DoNotUse)},
  { 659, -1, sizeof(::client::command_mmapset)},
  { 665, -1, sizeof(::client::command_hmapset)},
  { 673, 680, sizeof(::client::command_hmmapset_ValuesEntry_DoNotUse)},
  { 682, -1, sizeof(::client::command_hmmapset)},
  { 689, 696, sizeof(::client::command_mhmmapset_ValuesEntry_DoNotUse)},
  { 698, -1, sizeof(::client::command_mhmmapset)},
  { 705, -1, sizeof(::client::command_mapdel)},
  { 712, -1, sizeof(::client::command_mmapdel)},
  { 719, -1, sizeof(::client::command_hmapdel)},
  { 727, -1, sizeof(::client::command_hmmapdel)},
  { 735, 742, sizeof(::client::command_mhmmapdel_ValuesEntry_DoNotUse)},
  { 744, -1, sizeof(::client::command_mhmmapdel)},
  { 751, -1, sizeof(::client::command_meet)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&::client::_command_reply_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::client::_values_type_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::client::_keys_type_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::client::_command_set_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::client::_command_mset_KvsEntry_DoNotUse_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::client::_command_mset_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::client::_command_hset_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::client::_command_hmset_ValuesEntry_DoNotUse_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::client::_command_hmset_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::client::_command_mhmset_ValuesEntry_DoNotUse_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::client::_command_mhmset_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::client::_command_get_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::client::_command_get_reply_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::client::_command_mget_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::client::_command_mget_reply_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::client::_command_hget_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::client::_command_hget_reply_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::client::_command_hmget_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::client::_command_hmget_reply_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::client::_command_mhmget_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::client::_command_mhmget_reply_DataEntry_DoNotUse_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::client::_command_mhmget_reply_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::client::_command_del_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::client::_command_mdel_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::client::_command_hdel_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::client::_command_hmdel_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::client::_command_mhmdel_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::client::_command_incr_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::client::_command_mincr_KvsEntry_DoNotUse_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::client::_command_mincr_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::client::_command_hincr_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::client::_command_hmincr_KvsEntry_DoNotUse_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::client::_command_hmincr_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::client::_command_mhmincr_KvsEntry_DoNotUse_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::client::_command_mhmincr_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::client::_command_lpush_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::client::_command_mlpush_KvsEntry_DoNotUse_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::client::_command_mlpush_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::client::_command_hlpush_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::client::_command_hmlpush_KvsEntry_DoNotUse_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::client::_command_hmlpush_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::client::_command_mhmlpush_KvsEntry_DoNotUse_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::client::_command_mhmlpush_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::client::_command_lrange_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::client::_command_lrange_reply_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::client::_command_mlrange_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::client::_command_mlrange_reply_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::client::_command_hlrange_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::client::_command_hlrange_reply_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::client::_command_hmlrange_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::client::_command_hmlrange_reply_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::client::_command_mhmlrange_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::client::_command_mhmlrange_reply_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::client::_command_lpop_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::client::_command_lpop_reply_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::client::_command_mlpop_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::client::_command_mlpop_repy_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::client::_command_hlpop_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::client::_command_hlpop_reply_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::client::_command_hmlpop_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::client::_command_hmlpop_reply_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::client::_command_mhmlpop_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::client::_command_mhmlpop_reply_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::client::_command_ltrim_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::client::_command_mltrim_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::client::_command_hltrim_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::client::_command_hmltrim_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::client::_command_mhmltrim_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::client::_command_llen_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::client::_command_llen_reply_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::client::_command_mllen_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::client::_command_mllen_reply_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::client::_command_hllen_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::client::_command_hllen_reply_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::client::_command_hmllen_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::client::_command_hmllen_reply_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::client::_command_mhmllen_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::client::_command_mhmllen_reply_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::client::_command_mapget_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::client::_command_mapget_reply_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::client::_command_mmapget_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::client::_command_mmapget_reply_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::client::_command_hmapget_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::client::_command_hmapget_reply_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::client::_command_hmmapget_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::client::_command_hmmapget_reply_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::client::_command_mhmmapget_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::client::_command_mhmmapget_reply_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::client::_command_mapset_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::client::_command_mmapset_KvsEntry_DoNotUse_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::client::_command_mmapset_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::client::_command_hmapset_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::client::_command_hmmapset_ValuesEntry_DoNotUse_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::client::_command_hmmapset_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::client::_command_mhmmapset_ValuesEntry_DoNotUse_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::client::_command_mhmmapset_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::client::_command_mapdel_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::client::_command_mmapdel_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::client::_command_hmapdel_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::client::_command_hmmapdel_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::client::_command_mhmmapdel_ValuesEntry_DoNotUse_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::client::_command_mhmmapdel_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::client::_command_meet_default_instance_),
};

void protobuf_AssignDescriptors() {
  AddDescriptors();
  ::google::protobuf::MessageFactory* factory = NULL;
  AssignDescriptors(
      "message.proto", schemas, file_default_instances, TableStruct::offsets, factory,
      file_level_metadata, file_level_enum_descriptors, NULL);
}

void protobuf_AssignDescriptorsOnce() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_PROTOBUF_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 103);
}

void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
      "\n\rmessage.proto\022\006client\032\ndata.proto\"0\n\rc"
      "ommand_reply\022\017\n\007errcode\030\001 \001(\005\022\016\n\006errmsg\030"
      "\002 \001(\t\")\n\013values_type\022\032\n\005value\030\001 \003(\0132\013.da"
      "ta.VALUE\"\032\n\tkeys_type\022\r\n\005value\030\001 \003(\t\"6\n\013"
      "command_set\022\013\n\003key\030\001 \001(\t\022\032\n\005value\030\002 \001(\0132"
      "\013.data.VALUE\"s\n\014command_mset\022*\n\003kvs\030\001 \003("
      "\0132\035.client.command_mset.KvsEntry\0327\n\010KvsE"
      "ntry\022\013\n\003key\030\001 \001(\t\022\032\n\005value\030\002 \001(\0132\013.data."
      "VALUE:\0028\001\"S\n\014command_hset\022\013\n\003key\030\001 \001(\t\022\r"
      "\n\005field\030\002 \001(\t\022\032\n\005value\030\003 \001(\0132\013.data.VALU"
      "E\022\013\n\003ttl\030\004 \001(\003\"\213\001\n\rcommand_hmset\022\013\n\003key\030"
      "\001 \001(\t\0221\n\006values\030\002 \003(\0132!.client.command_h"
      "mset.ValuesEntry\032:\n\013ValuesEntry\022\013\n\003key\030\001"
      " \001(\t\022\032\n\005value\030\002 \001(\0132\013.data.VALUE:\0028\001\"\230\001\n"
      "\016command_mhmset\022\016\n\006fields\030\001 \003(\t\0222\n\006value"
      "s\030\002 \003(\0132\".client.command_mhmset.ValuesEn"
      "try\032B\n\013ValuesEntry\022\013\n\003key\030\001 \001(\t\022\"\n\005value"
      "\030\002 \001(\0132\023.client.values_type:\0028\001\"\032\n\013comma"
      "nd_get\022\013\n\003key\030\001 \001(\t\"T\n\021command_get_reply"
      "\022$\n\005state\030\001 \001(\0132\025.client.command_reply\022\031"
      "\n\004data\030\002 \001(\0132\013.data.VALUE\"\034\n\014command_mge"
      "t\022\014\n\004keys\030\001 \003(\t\"U\n\022command_mget_reply\022$\n"
      "\005state\030\001 \001(\0132\025.client.command_reply\022\031\n\004d"
      "ata\030\002 \003(\0132\013.data.VALUE\"*\n\014command_hget\022\013"
      "\n\003key\030\001 \001(\t\022\r\n\005field\030\002 \001(\t\"U\n\022command_hg"
      "et_reply\022$\n\005state\030\001 \001(\0132\025.client.command"
      "_reply\022\031\n\004data\030\002 \001(\0132\013.data.VALUE\",\n\rcom"
      "mand_hmget\022\013\n\003key\030\001 \001(\t\022\016\n\006fields\030\002 \003(\t\""
      "V\n\023command_hmget_reply\022$\n\005state\030\001 \001(\0132\025."
      "client.command_reply\022\031\n\004data\030\002 \003(\0132\013.dat"
      "a.VALUE\".\n\016command_mhmget\022\014\n\004keys\030\001 \003(\t\022"
      "\016\n\006fields\030\002 \003(\t\"\264\001\n\024command_mhmget_reply"
      "\022$\n\005state\030\001 \001(\0132\025.client.command_reply\0224"
      "\n\004data\030\002 \003(\0132&.client.command_mhmget_rep"
      "ly.DataEntry\032@\n\tDataEntry\022\013\n\003key\030\001 \001(\t\022\""
      "\n\005value\030\002 \001(\0132\023.client.values_type:\0028\001\"\032"
      "\n\013command_del\022\013\n\003key\030\001 \001(\t\"\034\n\014command_md"
      "el\022\014\n\004keys\030\001 \003(\t\"*\n\014command_hdel\022\013\n\003key\030"
      "\001 \001(\t\022\r\n\005field\030\002 \001(\t\",\n\rcommand_hmdel\022\013\n"
      "\003key\030\001 \001(\t\022\016\n\006fields\030\002 \003(\t\".\n\016command_mh"
      "mdel\022\014\n\004keys\030\001 \003(\t\022\016\n\006fields\030\002 \003(\t\"7\n\014co"
      "mmand_incr\022\013\n\003key\030\001 \001(\t\022\032\n\005value\030\002 \001(\0132\013"
      ".data.VALUE\"u\n\rcommand_mincr\022+\n\003kvs\030\001 \003("
      "\0132\036.client.command_mincr.KvsEntry\0327\n\010Kvs"
      "Entry\022\013\n\003key\030\001 \001(\t\022\032\n\005value\030\002 \001(\0132\013.data"
      ".VALUE:\0028\001\"G\n\rcommand_hincr\022\013\n\003key\030\001 \001(\t"
      "\022\r\n\005field\030\002 \001(\t\022\032\n\005value\030\003 \001(\0132\013.data.VA"
      "LUE\"\204\001\n\016command_hmincr\022\013\n\003key\030\001 \001(\t\022,\n\003k"
      "vs\030\002 \003(\0132\037.client.command_hmincr.KvsEntr"
      "y\0327\n\010KvsEntry\022\013\n\003key\030\001 \001(\t\022\032\n\005value\030\002 \001("
      "\0132\013.data.VALUE:\0028\001\"\221\001\n\017command_mhmincr\022\016"
      "\n\006fields\030\001 \003(\t\022-\n\003kvs\030\002 \003(\0132 .client.com"
      "mand_mhmincr.KvsEntry\032\?\n\010KvsEntry\022\013\n\003key"
      "\030\001 \001(\t\022\"\n\005value\030\002 \001(\0132\023.client.values_ty"
      "pe:\0028\001\"F\n\rcommand_lpush\022\013\n\003key\030\001 \001(\t\022\032\n\005"
      "value\030\002 \001(\0132\013.data.VALUE\022\014\n\004head\030\003 \001(\010\"\205"
      "\001\n\016command_mlpush\022,\n\003kvs\030\001 \003(\0132\037.client."
      "command_mlpush.KvsEntry\022\014\n\004head\030\002 \001(\010\0327\n"
      "\010KvsEntry\022\013\n\003key\030\001 \001(\t\022\032\n\005value\030\002 \001(\0132\013."
      "data.VALUE:\0028\001\"H\n\016command_hlpush\022\013\n\003key\030"
      "\001 \001(\t\022\r\n\005field\030\002 \001(\t\022\032\n\005value\030\003 \001(\0132\013.da"
      "ta.VALUE\"\206\001\n\017command_hmlpush\022\013\n\003key\030\001 \001("
      "\t\022-\n\003kvs\030\002 \003(\0132 .client.command_hmlpush."
      "KvsEntry\0327\n\010KvsEntry\022\013\n\003key\030\001 \001(\t\022\032\n\005val"
      "ue\030\002 \001(\0132\013.data.VALUE:\0028\001\"\223\001\n\020command_mh"
      "mlpush\022\016\n\006fields\030\001 \003(\t\022.\n\003kvs\030\002 \003(\0132!.cl"
      "ient.command_mhmlpush.KvsEntry\032\?\n\010KvsEnt"
      "ry\022\013\n\003key\030\001 \001(\t\022\"\n\005value\030\002 \001(\0132\023.client."
      "values_type:\0028\001\":\n\016command_lrange\022\013\n\003key"
      "\030\001 \001(\t\022\r\n\005start\030\002 \001(\005\022\014\n\004stop\030\003 \001(\005\"W\n\024c"
      "ommand_lrange_reply\022$\n\005state\030\001 \001(\0132\025.cli"
      "ent.command_reply\022\031\n\004data\030\002 \001(\0132\013.data.V"
      "ALUE\"<\n\017command_mlrange\022\014\n\004keys\030\001 \003(\t\022\r\n"
      "\005start\030\002 \001(\005\022\014\n\004stop\030\003 \001(\005\"X\n\025command_ml"
      "range_reply\022$\n\005state\030\001 \001(\0132\025.client.comm"
      "and_reply\022\031\n\004data\030\002 \003(\0132\013.data.VALUE\"J\n\017"
      "command_hlrange\022\013\n\003key\030\001 \001(\t\022\r\n\005field\030\002 "
      "\001(\t\022\r\n\005start\030\003 \001(\005\022\014\n\004stop\030\004 \001(\005\"Y\n\025comm"
      "and_hlrange_reply\022$\n\005state\030\001 \001(\0132\025.clien"
      "t.command_reply\022\032\n\005value\030\002 \001(\0132\013.data.VA"
      "LUE\"L\n\020command_hmlrange\022\013\n\003key\030\001 \001(\t\022\016\n\006"
      "fields\030\002 \003(\t\022\r\n\005start\030\003 \001(\005\022\014\n\004stop\030\004 \001("
      "\005\"Y\n\026command_hmlrange_reply\022$\n\005state\030\001 \001"
      "(\0132\025.client.command_reply\022\031\n\004data\030\002 \003(\0132"
      "\013.data.VALUE\"1\n\021command_mhmlrange\022\014\n\004key"
      "s\030\001 \003(\t\022\016\n\006fields\030\002 \003(\t\"b\n\027command_mhmlr"
      "ange_reply\022$\n\005state\030\001 \001(\0132\025.client.comma"
      "nd_reply\022!\n\004data\030\002 \003(\0132\023.client.values_t"
      "ype\")\n\014command_lpop\022\013\n\003key\030\001 \001(\t\022\014\n\004head"
      "\030\002 \001(\010\"U\n\022command_lpop_reply\022$\n\005state\030\001 "
      "\001(\0132\025.client.command_reply\022\031\n\004data\030\002 \001(\013"
      "2\013.data.VALUE\"+\n\rcommand_mlpop\022\014\n\004keys\030\001"
      " \003(\t\022\014\n\004head\030\002 \001(\010\"U\n\022command_mlpop_repy"
      "\022$\n\005state\030\001 \001(\0132\025.client.command_reply\022\031"
      "\n\004data\030\002 \003(\0132\013.data.VALUE\"+\n\rcommand_hlp"
      "op\022\013\n\003key\030\001 \001(\t\022\r\n\005field\030\002 \001(\t\"V\n\023comman"
      "d_hlpop_reply\022$\n\005state\030\001 \001(\0132\025.client.co"
      "mmand_reply\022\031\n\004data\030\002 \001(\0132\013.data.VALUE\"-"
      "\n\016command_hmlpop\022\013\n\003key\030\001 \001(\t\022\016\n\006fields\030"
      "\002 \003(\t\"W\n\024command_hmlpop_reply\022$\n\005state\030\001"
      " \001(\0132\025.client.command_reply\022\031\n\004data\030\002 \003("
      "\0132\013.data.VALUE\"/\n\017command_mhmlpop\022\014\n\004key"
      "s\030\001 \003(\t\022\016\n\006fields\030\002 \003(\t\"`\n\025command_mhmlp"
      "op_reply\022$\n\005state\030\001 \001(\0132\025.client.command"
      "_reply\022!\n\004data\030\002 \003(\0132\023.client.values_typ"
      "e\"9\n\rcommand_ltrim\022\013\n\003key\030\001 \001(\t\022\r\n\005start"
      "\030\002 \001(\005\022\014\n\004stop\030\003 \001(\005\";\n\016command_mltrim\022\014"
      "\n\004keys\030\001 \003(\t\022\r\n\005start\030\002 \001(\005\022\014\n\004stop\030\003 \001("
      "\005\"I\n\016command_hltrim\022\013\n\003key\030\001 \001(\t\022\r\n\005file"
      "d\030\002 \001(\t\022\r\n\005start\030\003 \001(\005\022\014\n\004stop\030\004 \001(\005\"K\n\017"
      "command_hmltrim\022\013\n\003key\030\001 \001(\t\022\016\n\006fileds\030\002"
      " \003(\t\022\r\n\005start\030\003 \001(\005\022\014\n\004stop\030\004 \001(\005\"M\n\020com"
      "mand_mhmltrim\022\014\n\004keys\030\001 \003(\t\022\016\n\006fileds\030\002 "
      "\003(\t\022\r\n\005start\030\003 \001(\005\022\014\n\004stop\030\004 \001(\005\"\033\n\014comm"
      "and_llen\022\013\n\003key\030\001 \001(\t\"U\n\022command_llen_re"
      "ply\022$\n\005state\030\001 \001(\0132\025.client.command_repl"
      "y\022\031\n\004data\030\002 \001(\0132\013.data.VALUE\"\035\n\rcommand_"
      "mllen\022\014\n\004keys\030\001 \003(\t\"V\n\023command_mllen_rep"
      "ly\022$\n\005state\030\001 \001(\0132\025.client.command_reply"
      "\022\031\n\004data\030\002 \003(\0132\013.data.VALUE\"+\n\rcommand_h"
      "llen\022\013\n\003key\030\001 \001(\t\022\r\n\005field\030\002 \001(\t\"V\n\023comm"
      "and_hllen_reply\022$\n\005state\030\001 \001(\0132\025.client."
      "command_reply\022\031\n\004data\030\002 \001(\0132\013.data.VALUE"
      "\"-\n\016command_hmllen\022\013\n\003key\030\001 \001(\t\022\016\n\006field"
      "s\030\002 \003(\t\"W\n\024command_hmllen_reply\022$\n\005state"
      "\030\001 \001(\0132\025.client.command_reply\022\031\n\004data\030\002 "
      "\003(\0132\013.data.VALUE\"/\n\017command_mhmllen\022\014\n\004k"
      "eys\030\001 \003(\t\022\016\n\006fields\030\002 \003(\t\"`\n\025command_mhm"
      "llen_reply\022$\n\005state\030\001 \001(\0132\025.client.comma"
      "nd_reply\022!\n\004data\030\002 \003(\0132\023.client.values_t"
      "ype\"\035\n\016command_mapget\022\013\n\003key\030\001 \001(\t\"W\n\024co"
      "mmand_mapget_reply\022$\n\005state\030\001 \001(\0132\025.clie"
      "nt.command_reply\022\031\n\004data\030\002 \001(\0132\013.data.VA"
      "LUE\"\037\n\017command_mmapget\022\014\n\004keys\030\001 \003(\t\"X\n\025"
      "command_mmapget_reply\022$\n\005state\030\001 \001(\0132\025.c"
      "lient.command_reply\022\031\n\004data\030\002 \003(\0132\013.data"
      ".VALUE\"-\n\017command_hmapget\022\013\n\003key\030\001 \001(\t\022\r"
      "\n\005field\030\002 \001(\t\"X\n\025command_hmapget_reply\022$"
      "\n\005state\030\001 \001(\0132\025.client.command_reply\022\031\n\004"
      "data\030\002 \001(\0132\013.data.VALUE\"/\n\020command_hmmap"
      "get\022\013\n\003key\030\001 \001(\t\022\016\n\006fields\030\002 \003(\t\"Y\n\026comm"
      "and_hmmapget_reply\022$\n\005state\030\001 \001(\0132\025.clie"
      "nt.command_reply\022\031\n\004data\030\002 \003(\0132\013.data.VA"
      "LUE\"1\n\021command_mhmmapget\022\014\n\004keys\030\001 \003(\t\022\016"
      "\n\006fields\030\002 \003(\t\"b\n\027command_mhmmapget_repl"
      "y\022$\n\005state\030\001 \001(\0132\025.client.command_reply\022"
      "!\n\004data\030\002 \003(\0132\023.client.values_type\"9\n\016co"
      "mmand_mapset\022\013\n\003key\030\001 \001(\t\022\032\n\005value\030\002 \001(\013"
      "2\013.data.VALUE\"y\n\017command_mmapset\022-\n\003kvs\030"
      "\001 \003(\0132 .client.command_mmapset.KvsEntry\032"
      "7\n\010KvsEntry\022\013\n\003key\030\001 \001(\t\022\032\n\005value\030\002 \001(\0132"
      "\013.data.VALUE:\0028\001\"I\n\017command_hmapset\022\013\n\003k"
      "ey\030\001 \001(\t\022\r\n\005field\030\002 \001(\t\022\032\n\005value\030\003 \001(\0132\013"
      ".data.VALUE\"\221\001\n\020command_hmmapset\022\013\n\003key\030"
      "\001 \001(\t\0224\n\006values\030\002 \003(\0132$.client.command_h"
      "mmapset.ValuesEntry\032:\n\013ValuesEntry\022\013\n\003ke"
      "y\030\001 \001(\t\022\032\n\005value\030\002 \001(\0132\013.data.VALUE:\0028\001\""
      "\226\001\n\021command_mhmmapset\022\016\n\006fields\030\001 \003(\t\0225\n"
      "\006values\030\002 \003(\0132%.client.command_mhmmapset"
      ".ValuesEntry\032:\n\013ValuesEntry\022\013\n\003key\030\001 \001(\t"
      "\022\032\n\005value\030\002 \001(\0132\013.data.VALUE:\0028\001\".\n\016comm"
      "and_mapdel\022\013\n\003key\030\001 \001(\t\022\017\n\007mapkeys\030\002 \003(\t"
      "\"0\n\017command_mmapdel\022\014\n\004keys\030\001 \003(\t\022\017\n\007map"
      "keys\030\002 \003(\t\">\n\017command_hmapdel\022\013\n\003key\030\001 \001"
      "(\t\022\r\n\005field\030\002 \001(\t\022\017\n\007mapkeys\030\003 \003(\t\"\?\n\020co"
      "mmand_hmmapdel\022\013\n\003key\030\001 \001(\t\022\r\n\005field\030\002 \003"
      "(\t\022\017\n\007mapkeys\030\003 \003(\t\"\233\001\n\021command_mhmmapde"
      "l\022\r\n\005field\030\001 \003(\t\0225\n\006values\030\002 \003(\0132%.clien"
      "t.command_mhmmapdel.ValuesEntry\032@\n\013Value"
      "sEntry\022\013\n\003key\030\001 \001(\t\022 \n\005value\030\002 \001(\0132\021.cli"
      "ent.keys_type:\0028\001\"(\n\014command_meet\022\n\n\002ip\030"
      "\001 \001(\t\022\014\n\004port\030\002 \001(\003*5\n\004type\022\n\n\006UNKNOW\020\000\022"
      "\r\n\tNOT_FOUND\020\001\022\010\n\004HSET\020\002\022\010\n\004HGET\020\003b\006prot"
      "o3"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 6922);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "message.proto", &protobuf_RegisterTypes);
  ::protobuf_data_2eproto::AddDescriptors();
}

void AddDescriptors() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at dynamic initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;
}  // namespace protobuf_message_2eproto
namespace client {
const ::google::protobuf::EnumDescriptor* type_descriptor() {
  protobuf_message_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_message_2eproto::file_level_enum_descriptors[0];
}
bool type_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}


// ===================================================================

void command_reply::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int command_reply::kErrcodeFieldNumber;
const int command_reply::kErrmsgFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

command_reply::command_reply()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_message_2eproto::InitDefaultscommand_reply();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:client.command_reply)
}
command_reply::command_reply(const command_reply& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  errmsg_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.errmsg().size() > 0) {
    errmsg_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.errmsg_);
  }
  errcode_ = from.errcode_;
  // @@protoc_insertion_point(copy_constructor:client.command_reply)
}

void command_reply::SharedCtor() {
  errmsg_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  errcode_ = 0;
  _cached_size_ = 0;
}

command_reply::~command_reply() {
  // @@protoc_insertion_point(destructor:client.command_reply)
  SharedDtor();
}

void command_reply::SharedDtor() {
  errmsg_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void command_reply::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* command_reply::descriptor() {
  ::protobuf_message_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_message_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const command_reply& command_reply::default_instance() {
  ::protobuf_message_2eproto::InitDefaultscommand_reply();
  return *internal_default_instance();
}

command_reply* command_reply::New(::google::protobuf::Arena* arena) const {
  command_reply* n = new command_reply;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void command_reply::Clear() {
// @@protoc_insertion_point(message_clear_start:client.command_reply)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  errmsg_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  errcode_ = 0;
  _internal_metadata_.Clear();
}

bool command_reply::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:client.command_reply)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int32 errcode = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &errcode_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string errmsg = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_errmsg()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->errmsg().data(), static_cast<int>(this->errmsg().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "client.command_reply.errmsg"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:client.command_reply)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:client.command_reply)
  return false;
#undef DO_
}

void command_reply::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:client.command_reply)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 errcode = 1;
  if (this->errcode() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->errcode(), output);
  }

  // string errmsg = 2;
  if (this->errmsg().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->errmsg().data(), static_cast<int>(this->errmsg().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "client.command_reply.errmsg");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->errmsg(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:client.command_reply)
}

::google::protobuf::uint8* command_reply::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:client.command_reply)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 errcode = 1;
  if (this->errcode() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->errcode(), target);
  }

  // string errmsg = 2;
  if (this->errmsg().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->errmsg().data(), static_cast<int>(this->errmsg().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "client.command_reply.errmsg");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->errmsg(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:client.command_reply)
  return target;
}

size_t command_reply::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:client.command_reply)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // string errmsg = 2;
  if (this->errmsg().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->errmsg());
  }

  // int32 errcode = 1;
  if (this->errcode() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->errcode());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void command_reply::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:client.command_reply)
  GOOGLE_DCHECK_NE(&from, this);
  const command_reply* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const command_reply>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:client.command_reply)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:client.command_reply)
    MergeFrom(*source);
  }
}

void command_reply::MergeFrom(const command_reply& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:client.command_reply)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.errmsg().size() > 0) {

    errmsg_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.errmsg_);
  }
  if (from.errcode() != 0) {
    set_errcode(from.errcode());
  }
}

void command_reply::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:client.command_reply)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void command_reply::CopyFrom(const command_reply& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:client.command_reply)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool command_reply::IsInitialized() const {
  return true;
}

void command_reply::Swap(command_reply* other) {
  if (other == this) return;
  InternalSwap(other);
}
void command_reply::InternalSwap(command_reply* other) {
  using std::swap;
  errmsg_.Swap(&other->errmsg_);
  swap(errcode_, other->errcode_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata command_reply::GetMetadata() const {
  protobuf_message_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_message_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void values_type::InitAsDefaultInstance() {
}
void values_type::clear_value() {
  value_.Clear();
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int values_type::kValueFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

values_type::values_type()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_message_2eproto::InitDefaultsvalues_type();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:client.values_type)
}
values_type::values_type(const values_type& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      value_(from.value_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:client.values_type)
}

void values_type::SharedCtor() {
  _cached_size_ = 0;
}

values_type::~values_type() {
  // @@protoc_insertion_point(destructor:client.values_type)
  SharedDtor();
}

void values_type::SharedDtor() {
}

void values_type::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* values_type::descriptor() {
  ::protobuf_message_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_message_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const values_type& values_type::default_instance() {
  ::protobuf_message_2eproto::InitDefaultsvalues_type();
  return *internal_default_instance();
}

values_type* values_type::New(::google::protobuf::Arena* arena) const {
  values_type* n = new values_type;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void values_type::Clear() {
// @@protoc_insertion_point(message_clear_start:client.values_type)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  value_.Clear();
  _internal_metadata_.Clear();
}

bool values_type::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:client.values_type)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .data.VALUE value = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(input, add_value()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:client.values_type)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:client.values_type)
  return false;
#undef DO_
}

void values_type::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:client.values_type)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .data.VALUE value = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->value_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->value(static_cast<int>(i)), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:client.values_type)
}

::google::protobuf::uint8* values_type::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:client.values_type)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .data.VALUE value = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->value_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->value(static_cast<int>(i)), deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:client.values_type)
  return target;
}

size_t values_type::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:client.values_type)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // repeated .data.VALUE value = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->value_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->value(static_cast<int>(i)));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void values_type::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:client.values_type)
  GOOGLE_DCHECK_NE(&from, this);
  const values_type* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const values_type>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:client.values_type)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:client.values_type)
    MergeFrom(*source);
  }
}

void values_type::MergeFrom(const values_type& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:client.values_type)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  value_.MergeFrom(from.value_);
}

void values_type::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:client.values_type)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void values_type::CopyFrom(const values_type& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:client.values_type)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool values_type::IsInitialized() const {
  return true;
}

void values_type::Swap(values_type* other) {
  if (other == this) return;
  InternalSwap(other);
}
void values_type::InternalSwap(values_type* other) {
  using std::swap;
  value_.InternalSwap(&other->value_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata values_type::GetMetadata() const {
  protobuf_message_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_message_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void keys_type::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int keys_type::kValueFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

keys_type::keys_type()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_message_2eproto::InitDefaultskeys_type();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:client.keys_type)
}
keys_type::keys_type(const keys_type& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      value_(from.value_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:client.keys_type)
}

void keys_type::SharedCtor() {
  _cached_size_ = 0;
}

keys_type::~keys_type() {
  // @@protoc_insertion_point(destructor:client.keys_type)
  SharedDtor();
}

void keys_type::SharedDtor() {
}

void keys_type::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* keys_type::descriptor() {
  ::protobuf_message_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_message_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const keys_type& keys_type::default_instance() {
  ::protobuf_message_2eproto::InitDefaultskeys_type();
  return *internal_default_instance();
}

keys_type* keys_type::New(::google::protobuf::Arena* arena) const {
  keys_type* n = new keys_type;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void keys_type::Clear() {
// @@protoc_insertion_point(message_clear_start:client.keys_type)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  value_.Clear();
  _internal_metadata_.Clear();
}

bool keys_type::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:client.keys_type)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated string value = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_value()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->value(this->value_size() - 1).data(),
            static_cast<int>(this->value(this->value_size() - 1).length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "client.keys_type.value"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:client.keys_type)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:client.keys_type)
  return false;
#undef DO_
}

void keys_type::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:client.keys_type)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated string value = 1;
  for (int i = 0, n = this->value_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->value(i).data(), static_cast<int>(this->value(i).length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "client.keys_type.value");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->value(i), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:client.keys_type)
}

::google::protobuf::uint8* keys_type::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:client.keys_type)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated string value = 1;
  for (int i = 0, n = this->value_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->value(i).data(), static_cast<int>(this->value(i).length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "client.keys_type.value");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(1, this->value(i), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:client.keys_type)
  return target;
}

size_t keys_type::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:client.keys_type)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // repeated string value = 1;
  total_size += 1 *
      ::google::protobuf::internal::FromIntSize(this->value_size());
  for (int i = 0, n = this->value_size(); i < n; i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->value(i));
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void keys_type::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:client.keys_type)
  GOOGLE_DCHECK_NE(&from, this);
  const keys_type* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const keys_type>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:client.keys_type)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:client.keys_type)
    MergeFrom(*source);
  }
}

void keys_type::MergeFrom(const keys_type& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:client.keys_type)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  value_.MergeFrom(from.value_);
}

void keys_type::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:client.keys_type)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void keys_type::CopyFrom(const keys_type& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:client.keys_type)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool keys_type::IsInitialized() const {
  return true;
}

void keys_type::Swap(keys_type* other) {
  if (other == this) return;
  InternalSwap(other);
}
void keys_type::InternalSwap(keys_type* other) {
  using std::swap;
  value_.InternalSwap(&other->value_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata keys_type::GetMetadata() const {
  protobuf_message_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_message_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void command_set::InitAsDefaultInstance() {
  ::client::_command_set_default_instance_._instance.get_mutable()->value_ = const_cast< ::data::VALUE*>(
      ::data::VALUE::internal_default_instance());
}
void command_set::clear_value() {
  if (GetArenaNoVirtual() == NULL && value_ != NULL) {
    delete value_;
  }
  value_ = NULL;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int command_set::kKeyFieldNumber;
const int command_set::kValueFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

command_set::command_set()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_message_2eproto::InitDefaultscommand_set();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:client.command_set)
}
command_set::command_set(const command_set& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  key_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.key().size() > 0) {
    key_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.key_);
  }
  if (from.has_value()) {
    value_ = new ::data::VALUE(*from.value_);
  } else {
    value_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:client.command_set)
}

void command_set::SharedCtor() {
  key_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  value_ = NULL;
  _cached_size_ = 0;
}

command_set::~command_set() {
  // @@protoc_insertion_point(destructor:client.command_set)
  SharedDtor();
}

void command_set::SharedDtor() {
  key_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete value_;
}

void command_set::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* command_set::descriptor() {
  ::protobuf_message_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_message_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const command_set& command_set::default_instance() {
  ::protobuf_message_2eproto::InitDefaultscommand_set();
  return *internal_default_instance();
}

command_set* command_set::New(::google::protobuf::Arena* arena) const {
  command_set* n = new command_set;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void command_set::Clear() {
// @@protoc_insertion_point(message_clear_start:client.command_set)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  key_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == NULL && value_ != NULL) {
    delete value_;
  }
  value_ = NULL;
  _internal_metadata_.Clear();
}

bool command_set::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:client.command_set)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string key = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_key()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->key().data(), static_cast<int>(this->key().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "client.command_set.key"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .data.VALUE value = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_value()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:client.command_set)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:client.command_set)
  return false;
#undef DO_
}

void command_set::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:client.command_set)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string key = 1;
  if (this->key().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->key().data(), static_cast<int>(this->key().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "client.command_set.key");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->key(), output);
  }

  // .data.VALUE value = 2;
  if (this->has_value()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->value_, output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:client.command_set)
}

::google::protobuf::uint8* command_set::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:client.command_set)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string key = 1;
  if (this->key().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->key().data(), static_cast<int>(this->key().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "client.command_set.key");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->key(), target);
  }

  // .data.VALUE value = 2;
  if (this->has_value()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, *this->value_, deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:client.command_set)
  return target;
}

size_t command_set::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:client.command_set)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // string key = 1;
  if (this->key().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->key());
  }

  // .data.VALUE value = 2;
  if (this->has_value()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->value_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void command_set::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:client.command_set)
  GOOGLE_DCHECK_NE(&from, this);
  const command_set* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const command_set>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:client.command_set)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:client.command_set)
    MergeFrom(*source);
  }
}

void command_set::MergeFrom(const command_set& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:client.command_set)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.key().size() > 0) {

    key_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.key_);
  }
  if (from.has_value()) {
    mutable_value()->::data::VALUE::MergeFrom(from.value());
  }
}

void command_set::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:client.command_set)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void command_set::CopyFrom(const command_set& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:client.command_set)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool command_set::IsInitialized() const {
  return true;
}

void command_set::Swap(command_set* other) {
  if (other == this) return;
  InternalSwap(other);
}
void command_set::InternalSwap(command_set* other) {
  using std::swap;
  key_.Swap(&other->key_);
  swap(value_, other->value_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata command_set::GetMetadata() const {
  protobuf_message_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_message_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

command_mset_KvsEntry_DoNotUse::command_mset_KvsEntry_DoNotUse() {}
command_mset_KvsEntry_DoNotUse::command_mset_KvsEntry_DoNotUse(::google::protobuf::Arena* arena) : SuperType(arena) {}
void command_mset_KvsEntry_DoNotUse::MergeFrom(const command_mset_KvsEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::google::protobuf::Metadata command_mset_KvsEntry_DoNotUse::GetMetadata() const {
  ::protobuf_message_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_message_2eproto::file_level_metadata[4];
}
void command_mset_KvsEntry_DoNotUse::MergeFrom(
    const ::google::protobuf::Message& other) {
  ::google::protobuf::Message::MergeFrom(other);
}


// ===================================================================

void command_mset::InitAsDefaultInstance() {
}
void command_mset::clear_kvs() {
  kvs_.Clear();
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int command_mset::kKvsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

command_mset::command_mset()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_message_2eproto::InitDefaultscommand_mset();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:client.command_mset)
}
command_mset::command_mset(const command_mset& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  kvs_.MergeFrom(from.kvs_);
  // @@protoc_insertion_point(copy_constructor:client.command_mset)
}

void command_mset::SharedCtor() {
  _cached_size_ = 0;
}

command_mset::~command_mset() {
  // @@protoc_insertion_point(destructor:client.command_mset)
  SharedDtor();
}

void command_mset::SharedDtor() {
}

void command_mset::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* command_mset::descriptor() {
  ::protobuf_message_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_message_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const command_mset& command_mset::default_instance() {
  ::protobuf_message_2eproto::InitDefaultscommand_mset();
  return *internal_default_instance();
}

command_mset* command_mset::New(::google::protobuf::Arena* arena) const {
  command_mset* n = new command_mset;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void command_mset::Clear() {
// @@protoc_insertion_point(message_clear_start:client.command_mset)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  kvs_.Clear();
  _internal_metadata_.Clear();
}

bool command_mset::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:client.command_mset)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // map<string, .data.VALUE> kvs = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          command_mset_KvsEntry_DoNotUse::Parser< ::google::protobuf::internal::MapField<
              command_mset_KvsEntry_DoNotUse,
              ::std::string, ::data::VALUE,
              ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
              ::google::protobuf::internal::WireFormatLite::TYPE_MESSAGE,
              0 >,
            ::google::protobuf::Map< ::std::string, ::data::VALUE > > parser(&kvs_);
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
              input, &parser));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            parser.key().data(), static_cast<int>(parser.key().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "client.command_mset.KvsEntry.key"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:client.command_mset)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:client.command_mset)
  return false;
#undef DO_
}

void command_mset::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:client.command_mset)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // map<string, .data.VALUE> kvs = 1;
  if (!this->kvs().empty()) {
    typedef ::google::protobuf::Map< ::std::string, ::data::VALUE >::const_pointer
        ConstPtr;
    typedef ConstPtr SortItem;
    typedef ::google::protobuf::internal::CompareByDerefFirst<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
          p->first.data(), static_cast<int>(p->first.length()),
          ::google::protobuf::internal::WireFormatLite::SERIALIZE,
          "client.command_mset.KvsEntry.key");
      }
    };

    if (output->IsSerializationDeterministic() &&
        this->kvs().size() > 1) {
      ::google::protobuf::scoped_array<SortItem> items(
          new SortItem[this->kvs().size()]);
      typedef ::google::protobuf::Map< ::std::string, ::data::VALUE >::size_type size_type;
      size_type n = 0;
      for (::google::protobuf::Map< ::std::string, ::data::VALUE >::const_iterator
          it = this->kvs().begin();
          it != this->kvs().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      ::google::protobuf::scoped_ptr<command_mset_KvsEntry_DoNotUse> entry;
      for (size_type i = 0; i < n; i++) {
        entry.reset(kvs_.NewEntryWrapper(
            items[static_cast<ptrdiff_t>(i)]->first, items[static_cast<ptrdiff_t>(i)]->second));
        ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
            1, *entry, output);
        Utf8Check::Check(items[static_cast<ptrdiff_t>(i)]);
      }
    } else {
      ::google::protobuf::scoped_ptr<command_mset_KvsEntry_DoNotUse> entry;
      for (::google::protobuf::Map< ::std::string, ::data::VALUE >::const_iterator
          it = this->kvs().begin();
          it != this->kvs().end(); ++it) {
        entry.reset(kvs_.NewEntryWrapper(
            it->first, it->second));
        ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
            1, *entry, output);
        Utf8Check::Check(&*it);
      }
    }
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:client.command_mset)
}

::google::protobuf::uint8* command_mset::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:client.command_mset)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // map<string, .data.VALUE> kvs = 1;
  if (!this->kvs().empty()) {
    typedef ::google::protobuf::Map< ::std::string, ::data::VALUE >::const_pointer
        ConstPtr;
    typedef ConstPtr SortItem;
    typedef ::google::protobuf::internal::CompareByDerefFirst<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
          p->first.data(), static_cast<int>(p->first.length()),
          ::google::protobuf::internal::WireFormatLite::SERIALIZE,
          "client.command_mset.KvsEntry.key");
      }
    };

    if (deterministic &&
        this->kvs().size() > 1) {
      ::google::protobuf::scoped_array<SortItem> items(
          new SortItem[this->kvs().size()]);
      typedef ::google::protobuf::Map< ::std::string, ::data::VALUE >::size_type size_type;
      size_type n = 0;
      for (::google::protobuf::Map< ::std::string, ::data::VALUE >::const_iterator
          it = this->kvs().begin();
          it != this->kvs().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      ::google::protobuf::scoped_ptr<command_mset_KvsEntry_DoNotUse> entry;
      for (size_type i = 0; i < n; i++) {
        entry.reset(kvs_.NewEntryWrapper(
            items[static_cast<ptrdiff_t>(i)]->first, items[static_cast<ptrdiff_t>(i)]->second));
        target = ::google::protobuf::internal::WireFormatLite::
                   InternalWriteMessageNoVirtualToArray(
                       1, *entry, deterministic, target);
;
        Utf8Check::Check(items[static_cast<ptrdiff_t>(i)]);
      }
    } else {
      ::google::protobuf::scoped_ptr<command_mset_KvsEntry_DoNotUse> entry;
      for (::google::protobuf::Map< ::std::string, ::data::VALUE >::const_iterator
          it = this->kvs().begin();
          it != this->kvs().end(); ++it) {
        entry.reset(kvs_.NewEntryWrapper(
            it->first, it->second));
        target = ::google::protobuf::internal::WireFormatLite::
                   InternalWriteMessageNoVirtualToArray(
                       1, *entry, deterministic, target);
;
        Utf8Check::Check(&*it);
      }
    }
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:client.command_mset)
  return target;
}

size_t command_mset::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:client.command_mset)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // map<string, .data.VALUE> kvs = 1;
  total_size += 1 *
      ::google::protobuf::internal::FromIntSize(this->kvs_size());
  {
    ::google::protobuf::scoped_ptr<command_mset_KvsEntry_DoNotUse> entry;
    for (::google::protobuf::Map< ::std::string, ::data::VALUE >::const_iterator
        it = this->kvs().begin();
        it != this->kvs().end(); ++it) {
      entry.reset(kvs_.NewEntryWrapper(it->first, it->second));
      total_size += ::google::protobuf::internal::WireFormatLite::
          MessageSizeNoVirtual(*entry);
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void command_mset::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:client.command_mset)
  GOOGLE_DCHECK_NE(&from, this);
  const command_mset* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const command_mset>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:client.command_mset)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:client.command_mset)
    MergeFrom(*source);
  }
}

void command_mset::MergeFrom(const command_mset& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:client.command_mset)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  kvs_.MergeFrom(from.kvs_);
}

void command_mset::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:client.command_mset)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void command_mset::CopyFrom(const command_mset& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:client.command_mset)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool command_mset::IsInitialized() const {
  return true;
}

void command_mset::Swap(command_mset* other) {
  if (other == this) return;
  InternalSwap(other);
}
void command_mset::InternalSwap(command_mset* other) {
  using std::swap;
  kvs_.Swap(&other->kvs_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata command_mset::GetMetadata() const {
  protobuf_message_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_message_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void command_hset::InitAsDefaultInstance() {
  ::client::_command_hset_default_instance_._instance.get_mutable()->value_ = const_cast< ::data::VALUE*>(
      ::data::VALUE::internal_default_instance());
}
void command_hset::clear_value() {
  if (GetArenaNoVirtual() == NULL && value_ != NULL) {
    delete value_;
  }
  value_ = NULL;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int command_hset::kKeyFieldNumber;
const int command_hset::kFieldFieldNumber;
const int command_hset::kValueFieldNumber;
const int command_hset::kTtlFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

command_hset::command_hset()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_message_2eproto::InitDefaultscommand_hset();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:client.command_hset)
}
command_hset::command_hset(const command_hset& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  key_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.key().size() > 0) {
    key_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.key_);
  }
  field_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.field().size() > 0) {
    field_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.field_);
  }
  if (from.has_value()) {
    value_ = new ::data::VALUE(*from.value_);
  } else {
    value_ = NULL;
  }
  ttl_ = from.ttl_;
  // @@protoc_insertion_point(copy_constructor:client.command_hset)
}

void command_hset::SharedCtor() {
  key_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  field_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&value_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&ttl_) -
      reinterpret_cast<char*>(&value_)) + sizeof(ttl_));
  _cached_size_ = 0;
}

command_hset::~command_hset() {
  // @@protoc_insertion_point(destructor:client.command_hset)
  SharedDtor();
}

void command_hset::SharedDtor() {
  key_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  field_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete value_;
}

void command_hset::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* command_hset::descriptor() {
  ::protobuf_message_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_message_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const command_hset& command_hset::default_instance() {
  ::protobuf_message_2eproto::InitDefaultscommand_hset();
  return *internal_default_instance();
}

command_hset* command_hset::New(::google::protobuf::Arena* arena) const {
  command_hset* n = new command_hset;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void command_hset::Clear() {
// @@protoc_insertion_point(message_clear_start:client.command_hset)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  key_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  field_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == NULL && value_ != NULL) {
    delete value_;
  }
  value_ = NULL;
  ttl_ = GOOGLE_LONGLONG(0);
  _internal_metadata_.Clear();
}

bool command_hset::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:client.command_hset)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string key = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_key()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->key().data(), static_cast<int>(this->key().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "client.command_hset.key"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string field = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_field()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->field().data(), static_cast<int>(this->field().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "client.command_hset.field"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .data.VALUE value = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_value()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int64 ttl = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &ttl_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:client.command_hset)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:client.command_hset)
  return false;
#undef DO_
}

void command_hset::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:client.command_hset)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string key = 1;
  if (this->key().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->key().data(), static_cast<int>(this->key().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "client.command_hset.key");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->key(), output);
  }

  // string field = 2;
  if (this->field().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->field().data(), static_cast<int>(this->field().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "client.command_hset.field");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->field(), output);
  }

  // .data.VALUE value = 3;
  if (this->has_value()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, *this->value_, output);
  }

  // int64 ttl = 4;
  if (this->ttl() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(4, this->ttl(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:client.command_hset)
}

::google::protobuf::uint8* command_hset::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:client.command_hset)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string key = 1;
  if (this->key().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->key().data(), static_cast<int>(this->key().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "client.command_hset.key");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->key(), target);
  }

  // string field = 2;
  if (this->field().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->field().data(), static_cast<int>(this->field().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "client.command_hset.field");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->field(), target);
  }

  // .data.VALUE value = 3;
  if (this->has_value()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        3, *this->value_, deterministic, target);
  }

  // int64 ttl = 4;
  if (this->ttl() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(4, this->ttl(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:client.command_hset)
  return target;
}

size_t command_hset::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:client.command_hset)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // string key = 1;
  if (this->key().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->key());
  }

  // string field = 2;
  if (this->field().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->field());
  }

  // .data.VALUE value = 3;
  if (this->has_value()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->value_);
  }

  // int64 ttl = 4;
  if (this->ttl() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->ttl());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void command_hset::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:client.command_hset)
  GOOGLE_DCHECK_NE(&from, this);
  const command_hset* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const command_hset>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:client.command_hset)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:client.command_hset)
    MergeFrom(*source);
  }
}

void command_hset::MergeFrom(const command_hset& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:client.command_hset)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.key().size() > 0) {

    key_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.key_);
  }
  if (from.field().size() > 0) {

    field_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.field_);
  }
  if (from.has_value()) {
    mutable_value()->::data::VALUE::MergeFrom(from.value());
  }
  if (from.ttl() != 0) {
    set_ttl(from.ttl());
  }
}

void command_hset::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:client.command_hset)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void command_hset::CopyFrom(const command_hset& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:client.command_hset)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool command_hset::IsInitialized() const {
  return true;
}

void command_hset::Swap(command_hset* other) {
  if (other == this) return;
  InternalSwap(other);
}
void command_hset::InternalSwap(command_hset* other) {
  using std::swap;
  key_.Swap(&other->key_);
  field_.Swap(&other->field_);
  swap(value_, other->value_);
  swap(ttl_, other->ttl_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata command_hset::GetMetadata() const {
  protobuf_message_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_message_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

command_hmset_ValuesEntry_DoNotUse::command_hmset_ValuesEntry_DoNotUse() {}
command_hmset_ValuesEntry_DoNotUse::command_hmset_ValuesEntry_DoNotUse(::google::protobuf::Arena* arena) : SuperType(arena) {}
void command_hmset_ValuesEntry_DoNotUse::MergeFrom(const command_hmset_ValuesEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::google::protobuf::Metadata command_hmset_ValuesEntry_DoNotUse::GetMetadata() const {
  ::protobuf_message_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_message_2eproto::file_level_metadata[7];
}
void command_hmset_ValuesEntry_DoNotUse::MergeFrom(
    const ::google::protobuf::Message& other) {
  ::google::protobuf::Message::MergeFrom(other);
}


// ===================================================================

void command_hmset::InitAsDefaultInstance() {
}
void command_hmset::clear_values() {
  values_.Clear();
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int command_hmset::kKeyFieldNumber;
const int command_hmset::kValuesFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

command_hmset::command_hmset()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_message_2eproto::InitDefaultscommand_hmset();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:client.command_hmset)
}
command_hmset::command_hmset(const command_hmset& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  values_.MergeFrom(from.values_);
  key_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.key().size() > 0) {
    key_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.key_);
  }
  // @@protoc_insertion_point(copy_constructor:client.command_hmset)
}

void command_hmset::SharedCtor() {
  key_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _cached_size_ = 0;
}

command_hmset::~command_hmset() {
  // @@protoc_insertion_point(destructor:client.command_hmset)
  SharedDtor();
}

void command_hmset::SharedDtor() {
  key_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void command_hmset::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* command_hmset::descriptor() {
  ::protobuf_message_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_message_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const command_hmset& command_hmset::default_instance() {
  ::protobuf_message_2eproto::InitDefaultscommand_hmset();
  return *internal_default_instance();
}

command_hmset* command_hmset::New(::google::protobuf::Arena* arena) const {
  command_hmset* n = new command_hmset;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void command_hmset::Clear() {
// @@protoc_insertion_point(message_clear_start:client.command_hmset)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  values_.Clear();
  key_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _internal_metadata_.Clear();
}

bool command_hmset::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:client.command_hmset)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string key = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_key()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->key().data(), static_cast<int>(this->key().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "client.command_hmset.key"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // map<string, .data.VALUE> values = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          command_hmset_ValuesEntry_DoNotUse::Parser< ::google::protobuf::internal::MapField<
              command_hmset_ValuesEntry_DoNotUse,
              ::std::string, ::data::VALUE,
              ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
              ::google::protobuf::internal::WireFormatLite::TYPE_MESSAGE,
              0 >,
            ::google::protobuf::Map< ::std::string, ::data::VALUE > > parser(&values_);
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
              input, &parser));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            parser.key().data(), static_cast<int>(parser.key().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "client.command_hmset.ValuesEntry.key"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:client.command_hmset)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:client.command_hmset)
  return false;
#undef DO_
}

void command_hmset::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:client.command_hmset)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string key = 1;
  if (this->key().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->key().data(), static_cast<int>(this->key().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "client.command_hmset.key");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->key(), output);
  }

  // map<string, .data.VALUE> values = 2;
  if (!this->values().empty()) {
    typedef ::google::protobuf::Map< ::std::string, ::data::VALUE >::const_pointer
        ConstPtr;
    typedef ConstPtr SortItem;
    typedef ::google::protobuf::internal::CompareByDerefFirst<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
          p->first.data(), static_cast<int>(p->first.length()),
          ::google::protobuf::internal::WireFormatLite::SERIALIZE,
          "client.command_hmset.ValuesEntry.key");
      }
    };

    if (output->IsSerializationDeterministic() &&
        this->values().size() > 1) {
      ::google::protobuf::scoped_array<SortItem> items(
          new SortItem[this->values().size()]);
      typedef ::google::protobuf::Map< ::std::string, ::data::VALUE >::size_type size_type;
      size_type n = 0;
      for (::google::protobuf::Map< ::std::string, ::data::VALUE >::const_iterator
          it = this->values().begin();
          it != this->values().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      ::google::protobuf::scoped_ptr<command_hmset_ValuesEntry_DoNotUse> entry;
      for (size_type i = 0; i < n; i++) {
        entry.reset(values_.NewEntryWrapper(
            items[static_cast<ptrdiff_t>(i)]->first, items[static_cast<ptrdiff_t>(i)]->second));
        ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
            2, *entry, output);
        Utf8Check::Check(items[static_cast<ptrdiff_t>(i)]);
      }
    } else {
      ::google::protobuf::scoped_ptr<command_hmset_ValuesEntry_DoNotUse> entry;
      for (::google::protobuf::Map< ::std::string, ::data::VALUE >::const_iterator
          it = this->values().begin();
          it != this->values().end(); ++it) {
        entry.reset(values_.NewEntryWrapper(
            it->first, it->second));
        ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
            2, *entry, output);
        Utf8Check::Check(&*it);
      }
    }
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:client.command_hmset)
}

::google::protobuf::uint8* command_hmset::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:client.command_hmset)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string key = 1;
  if (this->key().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->key().data(), static_cast<int>(this->key().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "client.command_hmset.key");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->key(), target);
  }

  // map<string, .data.VALUE> values = 2;
  if (!this->values().empty()) {
    typedef ::google::protobuf::Map< ::std::string, ::data::VALUE >::const_pointer
        ConstPtr;
    typedef ConstPtr SortItem;
    typedef ::google::protobuf::internal::CompareByDerefFirst<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
          p->first.data(), static_cast<int>(p->first.length()),
          ::google::protobuf::internal::WireFormatLite::SERIALIZE,
          "client.command_hmset.ValuesEntry.key");
      }
    };

    if (deterministic &&
        this->values().size() > 1) {
      ::google::protobuf::scoped_array<SortItem> items(
          new SortItem[this->values().size()]);
      typedef ::google::protobuf::Map< ::std::string, ::data::VALUE >::size_type size_type;
      size_type n = 0;
      for (::google::protobuf::Map< ::std::string, ::data::VALUE >::const_iterator
          it = this->values().begin();
          it != this->values().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      ::google::protobuf::scoped_ptr<command_hmset_ValuesEntry_DoNotUse> entry;
      for (size_type i = 0; i < n; i++) {
        entry.reset(values_.NewEntryWrapper(
            items[static_cast<ptrdiff_t>(i)]->first, items[static_cast<ptrdiff_t>(i)]->second));
        target = ::google::protobuf::internal::WireFormatLite::
                   InternalWriteMessageNoVirtualToArray(
                       2, *entry, deterministic, target);
;
        Utf8Check::Check(items[static_cast<ptrdiff_t>(i)]);
      }
    } else {
      ::google::protobuf::scoped_ptr<command_hmset_ValuesEntry_DoNotUse> entry;
      for (::google::protobuf::Map< ::std::string, ::data::VALUE >::const_iterator
          it = this->values().begin();
          it != this->values().end(); ++it) {
        entry.reset(values_.NewEntryWrapper(
            it->first, it->second));
        target = ::google::protobuf::internal::WireFormatLite::
                   InternalWriteMessageNoVirtualToArray(
                       2, *entry, deterministic, target);
;
        Utf8Check::Check(&*it);
      }
    }
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:client.command_hmset)
  return target;
}

size_t command_hmset::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:client.command_hmset)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // map<string, .data.VALUE> values = 2;
  total_size += 1 *
      ::google::protobuf::internal::FromIntSize(this->values_size());
  {
    ::google::protobuf::scoped_ptr<command_hmset_ValuesEntry_DoNotUse> entry;
    for (::google::protobuf::Map< ::std::string, ::data::VALUE >::const_iterator
        it = this->values().begin();
        it != this->values().end(); ++it) {
      entry.reset(values_.NewEntryWrapper(it->first, it->second));
      total_size += ::google::protobuf::internal::WireFormatLite::
          MessageSizeNoVirtual(*entry);
    }
  }

  // string key = 1;
  if (this->key().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->key());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void command_hmset::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:client.command_hmset)
  GOOGLE_DCHECK_NE(&from, this);
  const command_hmset* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const command_hmset>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:client.command_hmset)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:client.command_hmset)
    MergeFrom(*source);
  }
}

void command_hmset::MergeFrom(const command_hmset& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:client.command_hmset)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  values_.MergeFrom(from.values_);
  if (from.key().size() > 0) {

    key_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.key_);
  }
}

void command_hmset::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:client.command_hmset)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void command_hmset::CopyFrom(const command_hmset& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:client.command_hmset)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool command_hmset::IsInitialized() const {
  return true;
}

void command_hmset::Swap(command_hmset* other) {
  if (other == this) return;
  InternalSwap(other);
}
void command_hmset::InternalSwap(command_hmset* other) {
  using std::swap;
  values_.Swap(&other->values_);
  key_.Swap(&other->key_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata command_hmset::GetMetadata() const {
  protobuf_message_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_message_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

command_mhmset_ValuesEntry_DoNotUse::command_mhmset_ValuesEntry_DoNotUse() {}
command_mhmset_ValuesEntry_DoNotUse::command_mhmset_ValuesEntry_DoNotUse(::google::protobuf::Arena* arena) : SuperType(arena) {}
void command_mhmset_ValuesEntry_DoNotUse::MergeFrom(const command_mhmset_ValuesEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::google::protobuf::Metadata command_mhmset_ValuesEntry_DoNotUse::GetMetadata() const {
  ::protobuf_message_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_message_2eproto::file_level_metadata[9];
}
void command_mhmset_ValuesEntry_DoNotUse::MergeFrom(
    const ::google::protobuf::Message& other) {
  ::google::protobuf::Message::MergeFrom(other);
}


// ===================================================================

void command_mhmset::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int command_mhmset::kFieldsFieldNumber;
const int command_mhmset::kValuesFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

command_mhmset::command_mhmset()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_message_2eproto::InitDefaultscommand_mhmset();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:client.command_mhmset)
}
command_mhmset::command_mhmset(const command_mhmset& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      fields_(from.fields_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  values_.MergeFrom(from.values_);
  // @@protoc_insertion_point(copy_constructor:client.command_mhmset)
}

void command_mhmset::SharedCtor() {
  _cached_size_ = 0;
}

command_mhmset::~command_mhmset() {
  // @@protoc_insertion_point(destructor:client.command_mhmset)
  SharedDtor();
}

void command_mhmset::SharedDtor() {
}

void command_mhmset::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* command_mhmset::descriptor() {
  ::protobuf_message_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_message_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const command_mhmset& command_mhmset::default_instance() {
  ::protobuf_message_2eproto::InitDefaultscommand_mhmset();
  return *internal_default_instance();
}

command_mhmset* command_mhmset::New(::google::protobuf::Arena* arena) const {
  command_mhmset* n = new command_mhmset;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void command_mhmset::Clear() {
// @@protoc_insertion_point(message_clear_start:client.command_mhmset)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  fields_.Clear();
  values_.Clear();
  _internal_metadata_.Clear();
}

bool command_mhmset::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:client.command_mhmset)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated string fields = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_fields()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->fields(this->fields_size() - 1).data(),
            static_cast<int>(this->fields(this->fields_size() - 1).length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "client.command_mhmset.fields"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // map<string, .client.values_type> values = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          command_mhmset_ValuesEntry_DoNotUse::Parser< ::google::protobuf::internal::MapField<
              command_mhmset_ValuesEntry_DoNotUse,
              ::std::string, ::client::values_type,
              ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
              ::google::protobuf::internal::WireFormatLite::TYPE_MESSAGE,
              0 >,
            ::google::protobuf::Map< ::std::string, ::client::values_type > > parser(&values_);
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
              input, &parser));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            parser.key().data(), static_cast<int>(parser.key().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "client.command_mhmset.ValuesEntry.key"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:client.command_mhmset)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:client.command_mhmset)
  return false;
#undef DO_
}

void command_mhmset::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:client.command_mhmset)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated string fields = 1;
  for (int i = 0, n = this->fields_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->fields(i).data(), static_cast<int>(this->fields(i).length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "client.command_mhmset.fields");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->fields(i), output);
  }

  // map<string, .client.values_type> values = 2;
  if (!this->values().empty()) {
    typedef ::google::protobuf::Map< ::std::string, ::client::values_type >::const_pointer
        ConstPtr;
    typedef ConstPtr SortItem;
    typedef ::google::protobuf::internal::CompareByDerefFirst<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
          p->first.data(), static_cast<int>(p->first.length()),
          ::google::protobuf::internal::WireFormatLite::SERIALIZE,
          "client.command_mhmset.ValuesEntry.key");
      }
    };

    if (output->IsSerializationDeterministic() &&
        this->values().size() > 1) {
      ::google::protobuf::scoped_array<SortItem> items(
          new SortItem[this->values().size()]);
      typedef ::google::protobuf::Map< ::std::string, ::client::values_type >::size_type size_type;
      size_type n = 0;
      for (::google::protobuf::Map< ::std::string, ::client::values_type >::const_iterator
          it = this->values().begin();
          it != this->values().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      ::google::protobuf::scoped_ptr<command_mhmset_ValuesEntry_DoNotUse> entry;
      for (size_type i = 0; i < n; i++) {
        entry.reset(values_.NewEntryWrapper(
            items[static_cast<ptrdiff_t>(i)]->first, items[static_cast<ptrdiff_t>(i)]->second));
        ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
            2, *entry, output);
        Utf8Check::Check(items[static_cast<ptrdiff_t>(i)]);
      }
    } else {
      ::google::protobuf::scoped_ptr<command_mhmset_ValuesEntry_DoNotUse> entry;
      for (::google::protobuf::Map< ::std::string, ::client::values_type >::const_iterator
          it = this->values().begin();
          it != this->values().end(); ++it) {
        entry.reset(values_.NewEntryWrapper(
            it->first, it->second));
        ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
            2, *entry, output);
        Utf8Check::Check(&*it);
      }
    }
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:client.command_mhmset)
}

::google::protobuf::uint8* command_mhmset::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:client.command_mhmset)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated string fields = 1;
  for (int i = 0, n = this->fields_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->fields(i).data(), static_cast<int>(this->fields(i).length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "client.command_mhmset.fields");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(1, this->fields(i), target);
  }

  // map<string, .client.values_type> values = 2;
  if (!this->values().empty()) {
    typedef ::google::protobuf::Map< ::std::string, ::client::values_type >::const_pointer
        ConstPtr;
    typedef ConstPtr SortItem;
    typedef ::google::protobuf::internal::CompareByDerefFirst<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
          p->first.data(), static_cast<int>(p->first.length()),
          ::google::protobuf::internal::WireFormatLite::SERIALIZE,
          "client.command_mhmset.ValuesEntry.key");
      }
    };

    if (deterministic &&
        this->values().size() > 1) {
      ::google::protobuf::scoped_array<SortItem> items(
          new SortItem[this->values().size()]);
      typedef ::google::protobuf::Map< ::std::string, ::client::values_type >::size_type size_type;
      size_type n = 0;
      for (::google::protobuf::Map< ::std::string, ::client::values_type >::const_iterator
          it = this->values().begin();
          it != this->values().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      ::google::protobuf::scoped_ptr<command_mhmset_ValuesEntry_DoNotUse> entry;
      for (size_type i = 0; i < n; i++) {
        entry.reset(values_.NewEntryWrapper(
            items[static_cast<ptrdiff_t>(i)]->first, items[static_cast<ptrdiff_t>(i)]->second));
        target = ::google::protobuf::internal::WireFormatLite::
                   InternalWriteMessageNoVirtualToArray(
                       2, *entry, deterministic, target);
;
        Utf8Check::Check(items[static_cast<ptrdiff_t>(i)]);
      }
    } else {
      ::google::protobuf::scoped_ptr<command_mhmset_ValuesEntry_DoNotUse> entry;
      for (::google::protobuf::Map< ::std::string, ::client::values_type >::const_iterator
          it = this->values().begin();
          it != this->values().end(); ++it) {
        entry.reset(values_.NewEntryWrapper(
            it->first, it->second));
        target = ::google::protobuf::internal::WireFormatLite::
                   InternalWriteMessageNoVirtualToArray(
                       2, *entry, deterministic, target);
;
        Utf8Check::Check(&*it);
      }
    }
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:client.command_mhmset)
  return target;
}

size_t command_mhmset::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:client.command_mhmset)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // repeated string fields = 1;
  total_size += 1 *
      ::google::protobuf::internal::FromIntSize(this->fields_size());
  for (int i = 0, n = this->fields_size(); i < n; i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->fields(i));
  }

  // map<string, .client.values_type> values = 2;
  total_size += 1 *
      ::google::protobuf::internal::FromIntSize(this->values_size());
  {
    ::google::protobuf::scoped_ptr<command_mhmset_ValuesEntry_DoNotUse> entry;
    for (::google::protobuf::Map< ::std::string, ::client::values_type >::const_iterator
        it = this->values().begin();
        it != this->values().end(); ++it) {
      entry.reset(values_.NewEntryWrapper(it->first, it->second));
      total_size += ::google::protobuf::internal::WireFormatLite::
          MessageSizeNoVirtual(*entry);
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void command_mhmset::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:client.command_mhmset)
  GOOGLE_DCHECK_NE(&from, this);
  const command_mhmset* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const command_mhmset>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:client.command_mhmset)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:client.command_mhmset)
    MergeFrom(*source);
  }
}

void command_mhmset::MergeFrom(const command_mhmset& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:client.command_mhmset)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  fields_.MergeFrom(from.fields_);
  values_.MergeFrom(from.values_);
}

void command_mhmset::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:client.command_mhmset)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void command_mhmset::CopyFrom(const command_mhmset& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:client.command_mhmset)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool command_mhmset::IsInitialized() const {
  return true;
}

void command_mhmset::Swap(command_mhmset* other) {
  if (other == this) return;
  InternalSwap(other);
}
void command_mhmset::InternalSwap(command_mhmset* other) {
  using std::swap;
  fields_.InternalSwap(&other->fields_);
  values_.Swap(&other->values_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata command_mhmset::GetMetadata() const {
  protobuf_message_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_message_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void command_get::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int command_get::kKeyFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

command_get::command_get()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_message_2eproto::InitDefaultscommand_get();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:client.command_get)
}
command_get::command_get(const command_get& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  key_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.key().size() > 0) {
    key_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.key_);
  }
  // @@protoc_insertion_point(copy_constructor:client.command_get)
}

void command_get::SharedCtor() {
  key_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _cached_size_ = 0;
}

command_get::~command_get() {
  // @@protoc_insertion_point(destructor:client.command_get)
  SharedDtor();
}

void command_get::SharedDtor() {
  key_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void command_get::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* command_get::descriptor() {
  ::protobuf_message_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_message_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const command_get& command_get::default_instance() {
  ::protobuf_message_2eproto::InitDefaultscommand_get();
  return *internal_default_instance();
}

command_get* command_get::New(::google::protobuf::Arena* arena) const {
  command_get* n = new command_get;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void command_get::Clear() {
// @@protoc_insertion_point(message_clear_start:client.command_get)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  key_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _internal_metadata_.Clear();
}

bool command_get::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:client.command_get)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string key = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_key()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->key().data(), static_cast<int>(this->key().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "client.command_get.key"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:client.command_get)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:client.command_get)
  return false;
#undef DO_
}

void command_get::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:client.command_get)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string key = 1;
  if (this->key().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->key().data(), static_cast<int>(this->key().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "client.command_get.key");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->key(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:client.command_get)
}

::google::protobuf::uint8* command_get::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:client.command_get)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string key = 1;
  if (this->key().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->key().data(), static_cast<int>(this->key().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "client.command_get.key");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->key(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:client.command_get)
  return target;
}

size_t command_get::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:client.command_get)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // string key = 1;
  if (this->key().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->key());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void command_get::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:client.command_get)
  GOOGLE_DCHECK_NE(&from, this);
  const command_get* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const command_get>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:client.command_get)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:client.command_get)
    MergeFrom(*source);
  }
}

void command_get::MergeFrom(const command_get& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:client.command_get)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.key().size() > 0) {

    key_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.key_);
  }
}

void command_get::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:client.command_get)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void command_get::CopyFrom(const command_get& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:client.command_get)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool command_get::IsInitialized() const {
  return true;
}

void command_get::Swap(command_get* other) {
  if (other == this) return;
  InternalSwap(other);
}
void command_get::InternalSwap(command_get* other) {
  using std::swap;
  key_.Swap(&other->key_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata command_get::GetMetadata() const {
  protobuf_message_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_message_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void command_get_reply::InitAsDefaultInstance() {
  ::client::_command_get_reply_default_instance_._instance.get_mutable()->state_ = const_cast< ::client::command_reply*>(
      ::client::command_reply::internal_default_instance());
  ::client::_command_get_reply_default_instance_._instance.get_mutable()->data_ = const_cast< ::data::VALUE*>(
      ::data::VALUE::internal_default_instance());
}
void command_get_reply::clear_data() {
  if (GetArenaNoVirtual() == NULL && data_ != NULL) {
    delete data_;
  }
  data_ = NULL;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int command_get_reply::kStateFieldNumber;
const int command_get_reply::kDataFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

command_get_reply::command_get_reply()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_message_2eproto::InitDefaultscommand_get_reply();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:client.command_get_reply)
}
command_get_reply::command_get_reply(const command_get_reply& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_state()) {
    state_ = new ::client::command_reply(*from.state_);
  } else {
    state_ = NULL;
  }
  if (from.has_data()) {
    data_ = new ::data::VALUE(*from.data_);
  } else {
    data_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:client.command_get_reply)
}

void command_get_reply::SharedCtor() {
  ::memset(&state_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&data_) -
      reinterpret_cast<char*>(&state_)) + sizeof(data_));
  _cached_size_ = 0;
}

command_get_reply::~command_get_reply() {
  // @@protoc_insertion_point(destructor:client.command_get_reply)
  SharedDtor();
}

void command_get_reply::SharedDtor() {
  if (this != internal_default_instance()) delete state_;
  if (this != internal_default_instance()) delete data_;
}

void command_get_reply::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* command_get_reply::descriptor() {
  ::protobuf_message_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_message_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const command_get_reply& command_get_reply::default_instance() {
  ::protobuf_message_2eproto::InitDefaultscommand_get_reply();
  return *internal_default_instance();
}

command_get_reply* command_get_reply::New(::google::protobuf::Arena* arena) const {
  command_get_reply* n = new command_get_reply;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void command_get_reply::Clear() {
// @@protoc_insertion_point(message_clear_start:client.command_get_reply)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == NULL && state_ != NULL) {
    delete state_;
  }
  state_ = NULL;
  if (GetArenaNoVirtual() == NULL && data_ != NULL) {
    delete data_;
  }
  data_ = NULL;
  _internal_metadata_.Clear();
}

bool command_get_reply::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:client.command_get_reply)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .client.command_reply state = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_state()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .data.VALUE data = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_data()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:client.command_get_reply)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:client.command_get_reply)
  return false;
#undef DO_
}

void command_get_reply::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:client.command_get_reply)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .client.command_reply state = 1;
  if (this->has_state()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->state_, output);
  }

  // .data.VALUE data = 2;
  if (this->has_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->data_, output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:client.command_get_reply)
}

::google::protobuf::uint8* command_get_reply::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:client.command_get_reply)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .client.command_reply state = 1;
  if (this->has_state()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, *this->state_, deterministic, target);
  }

  // .data.VALUE data = 2;
  if (this->has_data()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, *this->data_, deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:client.command_get_reply)
  return target;
}

size_t command_get_reply::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:client.command_get_reply)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // .client.command_reply state = 1;
  if (this->has_state()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->state_);
  }

  // .data.VALUE data = 2;
  if (this->has_data()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->data_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void command_get_reply::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:client.command_get_reply)
  GOOGLE_DCHECK_NE(&from, this);
  const command_get_reply* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const command_get_reply>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:client.command_get_reply)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:client.command_get_reply)
    MergeFrom(*source);
  }
}

void command_get_reply::MergeFrom(const command_get_reply& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:client.command_get_reply)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_state()) {
    mutable_state()->::client::command_reply::MergeFrom(from.state());
  }
  if (from.has_data()) {
    mutable_data()->::data::VALUE::MergeFrom(from.data());
  }
}

void command_get_reply::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:client.command_get_reply)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void command_get_reply::CopyFrom(const command_get_reply& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:client.command_get_reply)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool command_get_reply::IsInitialized() const {
  return true;
}

void command_get_reply::Swap(command_get_reply* other) {
  if (other == this) return;
  InternalSwap(other);
}
void command_get_reply::InternalSwap(command_get_reply* other) {
  using std::swap;
  swap(state_, other->state_);
  swap(data_, other->data_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata command_get_reply::GetMetadata() const {
  protobuf_message_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_message_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void command_mget::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int command_mget::kKeysFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

command_mget::command_mget()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_message_2eproto::InitDefaultscommand_mget();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:client.command_mget)
}
command_mget::command_mget(const command_mget& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      keys_(from.keys_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:client.command_mget)
}

void command_mget::SharedCtor() {
  _cached_size_ = 0;
}

command_mget::~command_mget() {
  // @@protoc_insertion_point(destructor:client.command_mget)
  SharedDtor();
}

void command_mget::SharedDtor() {
}

void command_mget::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* command_mget::descriptor() {
  ::protobuf_message_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_message_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const command_mget& command_mget::default_instance() {
  ::protobuf_message_2eproto::InitDefaultscommand_mget();
  return *internal_default_instance();
}

command_mget* command_mget::New(::google::protobuf::Arena* arena) const {
  command_mget* n = new command_mget;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void command_mget::Clear() {
// @@protoc_insertion_point(message_clear_start:client.command_mget)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  keys_.Clear();
  _internal_metadata_.Clear();
}

bool command_mget::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:client.command_mget)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated string keys = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_keys()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->keys(this->keys_size() - 1).data(),
            static_cast<int>(this->keys(this->keys_size() - 1).length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "client.command_mget.keys"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:client.command_mget)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:client.command_mget)
  return false;
#undef DO_
}

void command_mget::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:client.command_mget)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated string keys = 1;
  for (int i = 0, n = this->keys_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->keys(i).data(), static_cast<int>(this->keys(i).length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "client.command_mget.keys");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->keys(i), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:client.command_mget)
}

::google::protobuf::uint8* command_mget::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:client.command_mget)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated string keys = 1;
  for (int i = 0, n = this->keys_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->keys(i).data(), static_cast<int>(this->keys(i).length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "client.command_mget.keys");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(1, this->keys(i), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:client.command_mget)
  return target;
}

size_t command_mget::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:client.command_mget)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // repeated string keys = 1;
  total_size += 1 *
      ::google::protobuf::internal::FromIntSize(this->keys_size());
  for (int i = 0, n = this->keys_size(); i < n; i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->keys(i));
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void command_mget::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:client.command_mget)
  GOOGLE_DCHECK_NE(&from, this);
  const command_mget* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const command_mget>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:client.command_mget)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:client.command_mget)
    MergeFrom(*source);
  }
}

void command_mget::MergeFrom(const command_mget& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:client.command_mget)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  keys_.MergeFrom(from.keys_);
}

void command_mget::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:client.command_mget)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void command_mget::CopyFrom(const command_mget& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:client.command_mget)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool command_mget::IsInitialized() const {
  return true;
}

void command_mget::Swap(command_mget* other) {
  if (other == this) return;
  InternalSwap(other);
}
void command_mget::InternalSwap(command_mget* other) {
  using std::swap;
  keys_.InternalSwap(&other->keys_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata command_mget::GetMetadata() const {
  protobuf_message_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_message_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void command_mget_reply::InitAsDefaultInstance() {
  ::client::_command_mget_reply_default_instance_._instance.get_mutable()->state_ = const_cast< ::client::command_reply*>(
      ::client::command_reply::internal_default_instance());
}
void command_mget_reply::clear_data() {
  data_.Clear();
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int command_mget_reply::kStateFieldNumber;
const int command_mget_reply::kDataFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

command_mget_reply::command_mget_reply()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_message_2eproto::InitDefaultscommand_mget_reply();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:client.command_mget_reply)
}
command_mget_reply::command_mget_reply(const command_mget_reply& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      data_(from.data_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_state()) {
    state_ = new ::client::command_reply(*from.state_);
  } else {
    state_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:client.command_mget_reply)
}

void command_mget_reply::SharedCtor() {
  state_ = NULL;
  _cached_size_ = 0;
}

command_mget_reply::~command_mget_reply() {
  // @@protoc_insertion_point(destructor:client.command_mget_reply)
  SharedDtor();
}

void command_mget_reply::SharedDtor() {
  if (this != internal_default_instance()) delete state_;
}

void command_mget_reply::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* command_mget_reply::descriptor() {
  ::protobuf_message_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_message_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const command_mget_reply& command_mget_reply::default_instance() {
  ::protobuf_message_2eproto::InitDefaultscommand_mget_reply();
  return *internal_default_instance();
}

command_mget_reply* command_mget_reply::New(::google::protobuf::Arena* arena) const {
  command_mget_reply* n = new command_mget_reply;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void command_mget_reply::Clear() {
// @@protoc_insertion_point(message_clear_start:client.command_mget_reply)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  data_.Clear();
  if (GetArenaNoVirtual() == NULL && state_ != NULL) {
    delete state_;
  }
  state_ = NULL;
  _internal_metadata_.Clear();
}

bool command_mget_reply::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:client.command_mget_reply)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .client.command_reply state = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_state()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .data.VALUE data = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(input, add_data()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:client.command_mget_reply)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:client.command_mget_reply)
  return false;
#undef DO_
}

void command_mget_reply::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:client.command_mget_reply)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .client.command_reply state = 1;
  if (this->has_state()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->state_, output);
  }

  // repeated .data.VALUE data = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->data_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->data(static_cast<int>(i)), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:client.command_mget_reply)
}

::google::protobuf::uint8* command_mget_reply::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:client.command_mget_reply)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .client.command_reply state = 1;
  if (this->has_state()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, *this->state_, deterministic, target);
  }

  // repeated .data.VALUE data = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->data_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, this->data(static_cast<int>(i)), deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:client.command_mget_reply)
  return target;
}

size_t command_mget_reply::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:client.command_mget_reply)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // repeated .data.VALUE data = 2;
  {
    unsigned int count = static_cast<unsigned int>(this->data_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->data(static_cast<int>(i)));
    }
  }

  // .client.command_reply state = 1;
  if (this->has_state()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->state_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void command_mget_reply::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:client.command_mget_reply)
  GOOGLE_DCHECK_NE(&from, this);
  const command_mget_reply* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const command_mget_reply>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:client.command_mget_reply)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:client.command_mget_reply)
    MergeFrom(*source);
  }
}

void command_mget_reply::MergeFrom(const command_mget_reply& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:client.command_mget_reply)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  data_.MergeFrom(from.data_);
  if (from.has_state()) {
    mutable_state()->::client::command_reply::MergeFrom(from.state());
  }
}

void command_mget_reply::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:client.command_mget_reply)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void command_mget_reply::CopyFrom(const command_mget_reply& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:client.command_mget_reply)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool command_mget_reply::IsInitialized() const {
  return true;
}

void command_mget_reply::Swap(command_mget_reply* other) {
  if (other == this) return;
  InternalSwap(other);
}
void command_mget_reply::InternalSwap(command_mget_reply* other) {
  using std::swap;
  data_.InternalSwap(&other->data_);
  swap(state_, other->state_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata command_mget_reply::GetMetadata() const {
  protobuf_message_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_message_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void command_hget::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int command_hget::kKeyFieldNumber;
const int command_hget::kFieldFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

command_hget::command_hget()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_message_2eproto::InitDefaultscommand_hget();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:client.command_hget)
}
command_hget::command_hget(const command_hget& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  key_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.key().size() > 0) {
    key_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.key_);
  }
  field_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.field().size() > 0) {
    field_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.field_);
  }
  // @@protoc_insertion_point(copy_constructor:client.command_hget)
}

void command_hget::SharedCtor() {
  key_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  field_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _cached_size_ = 0;
}

command_hget::~command_hget() {
  // @@protoc_insertion_point(destructor:client.command_hget)
  SharedDtor();
}

void command_hget::SharedDtor() {
  key_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  field_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void command_hget::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* command_hget::descriptor() {
  ::protobuf_message_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_message_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const command_hget& command_hget::default_instance() {
  ::protobuf_message_2eproto::InitDefaultscommand_hget();
  return *internal_default_instance();
}

command_hget* command_hget::New(::google::protobuf::Arena* arena) const {
  command_hget* n = new command_hget;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void command_hget::Clear() {
// @@protoc_insertion_point(message_clear_start:client.command_hget)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  key_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  field_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _internal_metadata_.Clear();
}

bool command_hget::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:client.command_hget)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string key = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_key()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->key().data(), static_cast<int>(this->key().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "client.command_hget.key"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string field = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_field()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->field().data(), static_cast<int>(this->field().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "client.command_hget.field"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:client.command_hget)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:client.command_hget)
  return false;
#undef DO_
}

void command_hget::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:client.command_hget)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string key = 1;
  if (this->key().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->key().data(), static_cast<int>(this->key().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "client.command_hget.key");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->key(), output);
  }

  // string field = 2;
  if (this->field().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->field().data(), static_cast<int>(this->field().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "client.command_hget.field");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->field(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:client.command_hget)
}

::google::protobuf::uint8* command_hget::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:client.command_hget)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string key = 1;
  if (this->key().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->key().data(), static_cast<int>(this->key().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "client.command_hget.key");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->key(), target);
  }

  // string field = 2;
  if (this->field().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->field().data(), static_cast<int>(this->field().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "client.command_hget.field");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->field(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:client.command_hget)
  return target;
}

size_t command_hget::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:client.command_hget)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // string key = 1;
  if (this->key().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->key());
  }

  // string field = 2;
  if (this->field().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->field());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void command_hget::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:client.command_hget)
  GOOGLE_DCHECK_NE(&from, this);
  const command_hget* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const command_hget>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:client.command_hget)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:client.command_hget)
    MergeFrom(*source);
  }
}

void command_hget::MergeFrom(const command_hget& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:client.command_hget)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.key().size() > 0) {

    key_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.key_);
  }
  if (from.field().size() > 0) {

    field_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.field_);
  }
}

void command_hget::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:client.command_hget)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void command_hget::CopyFrom(const command_hget& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:client.command_hget)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool command_hget::IsInitialized() const {
  return true;
}

void command_hget::Swap(command_hget* other) {
  if (other == this) return;
  InternalSwap(other);
}
void command_hget::InternalSwap(command_hget* other) {
  using std::swap;
  key_.Swap(&other->key_);
  field_.Swap(&other->field_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata command_hget::GetMetadata() const {
  protobuf_message_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_message_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void command_hget_reply::InitAsDefaultInstance() {
  ::client::_command_hget_reply_default_instance_._instance.get_mutable()->state_ = const_cast< ::client::command_reply*>(
      ::client::command_reply::internal_default_instance());
  ::client::_command_hget_reply_default_instance_._instance.get_mutable()->data_ = const_cast< ::data::VALUE*>(
      ::data::VALUE::internal_default_instance());
}
void command_hget_reply::clear_data() {
  if (GetArenaNoVirtual() == NULL && data_ != NULL) {
    delete data_;
  }
  data_ = NULL;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int command_hget_reply::kStateFieldNumber;
const int command_hget_reply::kDataFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

command_hget_reply::command_hget_reply()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_message_2eproto::InitDefaultscommand_hget_reply();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:client.command_hget_reply)
}
command_hget_reply::command_hget_reply(const command_hget_reply& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_state()) {
    state_ = new ::client::command_reply(*from.state_);
  } else {
    state_ = NULL;
  }
  if (from.has_data()) {
    data_ = new ::data::VALUE(*from.data_);
  } else {
    data_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:client.command_hget_reply)
}

void command_hget_reply::SharedCtor() {
  ::memset(&state_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&data_) -
      reinterpret_cast<char*>(&state_)) + sizeof(data_));
  _cached_size_ = 0;
}

command_hget_reply::~command_hget_reply() {
  // @@protoc_insertion_point(destructor:client.command_hget_reply)
  SharedDtor();
}

void command_hget_reply::SharedDtor() {
  if (this != internal_default_instance()) delete state_;
  if (this != internal_default_instance()) delete data_;
}

void command_hget_reply::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* command_hget_reply::descriptor() {
  ::protobuf_message_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_message_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const command_hget_reply& command_hget_reply::default_instance() {
  ::protobuf_message_2eproto::InitDefaultscommand_hget_reply();
  return *internal_default_instance();
}

command_hget_reply* command_hget_reply::New(::google::protobuf::Arena* arena) const {
  command_hget_reply* n = new command_hget_reply;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void command_hget_reply::Clear() {
// @@protoc_insertion_point(message_clear_start:client.command_hget_reply)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == NULL && state_ != NULL) {
    delete state_;
  }
  state_ = NULL;
  if (GetArenaNoVirtual() == NULL && data_ != NULL) {
    delete data_;
  }
  data_ = NULL;
  _internal_metadata_.Clear();
}

bool command_hget_reply::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:client.command_hget_reply)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .client.command_reply state = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_state()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .data.VALUE data = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_data()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:client.command_hget_reply)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:client.command_hget_reply)
  return false;
#undef DO_
}

void command_hget_reply::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:client.command_hget_reply)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .client.command_reply state = 1;
  if (this->has_state()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->state_, output);
  }

  // .data.VALUE data = 2;
  if (this->has_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->data_, output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:client.command_hget_reply)
}

::google::protobuf::uint8* command_hget_reply::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:client.command_hget_reply)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .client.command_reply state = 1;
  if (this->has_state()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, *this->state_, deterministic, target);
  }

  // .data.VALUE data = 2;
  if (this->has_data()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, *this->data_, deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:client.command_hget_reply)
  return target;
}

size_t command_hget_reply::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:client.command_hget_reply)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // .client.command_reply state = 1;
  if (this->has_state()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->state_);
  }

  // .data.VALUE data = 2;
  if (this->has_data()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->data_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void command_hget_reply::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:client.command_hget_reply)
  GOOGLE_DCHECK_NE(&from, this);
  const command_hget_reply* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const command_hget_reply>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:client.command_hget_reply)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:client.command_hget_reply)
    MergeFrom(*source);
  }
}

void command_hget_reply::MergeFrom(const command_hget_reply& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:client.command_hget_reply)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_state()) {
    mutable_state()->::client::command_reply::MergeFrom(from.state());
  }
  if (from.has_data()) {
    mutable_data()->::data::VALUE::MergeFrom(from.data());
  }
}

void command_hget_reply::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:client.command_hget_reply)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void command_hget_reply::CopyFrom(const command_hget_reply& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:client.command_hget_reply)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool command_hget_reply::IsInitialized() const {
  return true;
}

void command_hget_reply::Swap(command_hget_reply* other) {
  if (other == this) return;
  InternalSwap(other);
}
void command_hget_reply::InternalSwap(command_hget_reply* other) {
  using std::swap;
  swap(state_, other->state_);
  swap(data_, other->data_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata command_hget_reply::GetMetadata() const {
  protobuf_message_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_message_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void command_hmget::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int command_hmget::kKeyFieldNumber;
const int command_hmget::kFieldsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

command_hmget::command_hmget()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_message_2eproto::InitDefaultscommand_hmget();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:client.command_hmget)
}
command_hmget::command_hmget(const command_hmget& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      fields_(from.fields_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  key_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.key().size() > 0) {
    key_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.key_);
  }
  // @@protoc_insertion_point(copy_constructor:client.command_hmget)
}

void command_hmget::SharedCtor() {
  key_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _cached_size_ = 0;
}

command_hmget::~command_hmget() {
  // @@protoc_insertion_point(destructor:client.command_hmget)
  SharedDtor();
}

void command_hmget::SharedDtor() {
  key_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void command_hmget::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* command_hmget::descriptor() {
  ::protobuf_message_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_message_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const command_hmget& command_hmget::default_instance() {
  ::protobuf_message_2eproto::InitDefaultscommand_hmget();
  return *internal_default_instance();
}

command_hmget* command_hmget::New(::google::protobuf::Arena* arena) const {
  command_hmget* n = new command_hmget;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void command_hmget::Clear() {
// @@protoc_insertion_point(message_clear_start:client.command_hmget)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  fields_.Clear();
  key_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _internal_metadata_.Clear();
}

bool command_hmget::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:client.command_hmget)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string key = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_key()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->key().data(), static_cast<int>(this->key().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "client.command_hmget.key"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated string fields = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_fields()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->fields(this->fields_size() - 1).data(),
            static_cast<int>(this->fields(this->fields_size() - 1).length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "client.command_hmget.fields"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:client.command_hmget)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:client.command_hmget)
  return false;
#undef DO_
}

void command_hmget::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:client.command_hmget)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string key = 1;
  if (this->key().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->key().data(), static_cast<int>(this->key().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "client.command_hmget.key");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->key(), output);
  }

  // repeated string fields = 2;
  for (int i = 0, n = this->fields_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->fields(i).data(), static_cast<int>(this->fields(i).length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "client.command_hmget.fields");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->fields(i), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:client.command_hmget)
}

::google::protobuf::uint8* command_hmget::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:client.command_hmget)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string key = 1;
  if (this->key().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->key().data(), static_cast<int>(this->key().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "client.command_hmget.key");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->key(), target);
  }

  // repeated string fields = 2;
  for (int i = 0, n = this->fields_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->fields(i).data(), static_cast<int>(this->fields(i).length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "client.command_hmget.fields");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(2, this->fields(i), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:client.command_hmget)
  return target;
}

size_t command_hmget::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:client.command_hmget)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // repeated string fields = 2;
  total_size += 1 *
      ::google::protobuf::internal::FromIntSize(this->fields_size());
  for (int i = 0, n = this->fields_size(); i < n; i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->fields(i));
  }

  // string key = 1;
  if (this->key().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->key());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void command_hmget::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:client.command_hmget)
  GOOGLE_DCHECK_NE(&from, this);
  const command_hmget* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const command_hmget>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:client.command_hmget)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:client.command_hmget)
    MergeFrom(*source);
  }
}

void command_hmget::MergeFrom(const command_hmget& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:client.command_hmget)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  fields_.MergeFrom(from.fields_);
  if (from.key().size() > 0) {

    key_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.key_);
  }
}

void command_hmget::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:client.command_hmget)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void command_hmget::CopyFrom(const command_hmget& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:client.command_hmget)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool command_hmget::IsInitialized() const {
  return true;
}

void command_hmget::Swap(command_hmget* other) {
  if (other == this) return;
  InternalSwap(other);
}
void command_hmget::InternalSwap(command_hmget* other) {
  using std::swap;
  fields_.InternalSwap(&other->fields_);
  key_.Swap(&other->key_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata command_hmget::GetMetadata() const {
  protobuf_message_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_message_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void command_hmget_reply::InitAsDefaultInstance() {
  ::client::_command_hmget_reply_default_instance_._instance.get_mutable()->state_ = const_cast< ::client::command_reply*>(
      ::client::command_reply::internal_default_instance());
}
void command_hmget_reply::clear_data() {
  data_.Clear();
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int command_hmget_reply::kStateFieldNumber;
const int command_hmget_reply::kDataFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

command_hmget_reply::command_hmget_reply()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_message_2eproto::InitDefaultscommand_hmget_reply();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:client.command_hmget_reply)
}
command_hmget_reply::command_hmget_reply(const command_hmget_reply& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      data_(from.data_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_state()) {
    state_ = new ::client::command_reply(*from.state_);
  } else {
    state_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:client.command_hmget_reply)
}

void command_hmget_reply::SharedCtor() {
  state_ = NULL;
  _cached_size_ = 0;
}

command_hmget_reply::~command_hmget_reply() {
  // @@protoc_insertion_point(destructor:client.command_hmget_reply)
  SharedDtor();
}

void command_hmget_reply::SharedDtor() {
  if (this != internal_default_instance()) delete state_;
}

void command_hmget_reply::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* command_hmget_reply::descriptor() {
  ::protobuf_message_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_message_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const command_hmget_reply& command_hmget_reply::default_instance() {
  ::protobuf_message_2eproto::InitDefaultscommand_hmget_reply();
  return *internal_default_instance();
}

command_hmget_reply* command_hmget_reply::New(::google::protobuf::Arena* arena) const {
  command_hmget_reply* n = new command_hmget_reply;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void command_hmget_reply::Clear() {
// @@protoc_insertion_point(message_clear_start:client.command_hmget_reply)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  data_.Clear();
  if (GetArenaNoVirtual() == NULL && state_ != NULL) {
    delete state_;
  }
  state_ = NULL;
  _internal_metadata_.Clear();
}

bool command_hmget_reply::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:client.command_hmget_reply)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .client.command_reply state = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_state()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .data.VALUE data = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(input, add_data()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:client.command_hmget_reply)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:client.command_hmget_reply)
  return false;
#undef DO_
}

void command_hmget_reply::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:client.command_hmget_reply)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .client.command_reply state = 1;
  if (this->has_state()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->state_, output);
  }

  // repeated .data.VALUE data = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->data_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->data(static_cast<int>(i)), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:client.command_hmget_reply)
}

::google::protobuf::uint8* command_hmget_reply::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:client.command_hmget_reply)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .client.command_reply state = 1;
  if (this->has_state()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, *this->state_, deterministic, target);
  }

  // repeated .data.VALUE data = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->data_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, this->data(static_cast<int>(i)), deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:client.command_hmget_reply)
  return target;
}

size_t command_hmget_reply::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:client.command_hmget_reply)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // repeated .data.VALUE data = 2;
  {
    unsigned int count = static_cast<unsigned int>(this->data_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->data(static_cast<int>(i)));
    }
  }

  // .client.command_reply state = 1;
  if (this->has_state()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->state_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void command_hmget_reply::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:client.command_hmget_reply)
  GOOGLE_DCHECK_NE(&from, this);
  const command_hmget_reply* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const command_hmget_reply>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:client.command_hmget_reply)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:client.command_hmget_reply)
    MergeFrom(*source);
  }
}

void command_hmget_reply::MergeFrom(const command_hmget_reply& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:client.command_hmget_reply)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  data_.MergeFrom(from.data_);
  if (from.has_state()) {
    mutable_state()->::client::command_reply::MergeFrom(from.state());
  }
}

void command_hmget_reply::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:client.command_hmget_reply)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void command_hmget_reply::CopyFrom(const command_hmget_reply& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:client.command_hmget_reply)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool command_hmget_reply::IsInitialized() const {
  return true;
}

void command_hmget_reply::Swap(command_hmget_reply* other) {
  if (other == this) return;
  InternalSwap(other);
}
void command_hmget_reply::InternalSwap(command_hmget_reply* other) {
  using std::swap;
  data_.InternalSwap(&other->data_);
  swap(state_, other->state_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata command_hmget_reply::GetMetadata() const {
  protobuf_message_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_message_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void command_mhmget::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int command_mhmget::kKeysFieldNumber;
const int command_mhmget::kFieldsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

command_mhmget::command_mhmget()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_message_2eproto::InitDefaultscommand_mhmget();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:client.command_mhmget)
}
command_mhmget::command_mhmget(const command_mhmget& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      keys_(from.keys_),
      fields_(from.fields_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:client.command_mhmget)
}

void command_mhmget::SharedCtor() {
  _cached_size_ = 0;
}

command_mhmget::~command_mhmget() {
  // @@protoc_insertion_point(destructor:client.command_mhmget)
  SharedDtor();
}

void command_mhmget::SharedDtor() {
}

void command_mhmget::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* command_mhmget::descriptor() {
  ::protobuf_message_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_message_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const command_mhmget& command_mhmget::default_instance() {
  ::protobuf_message_2eproto::InitDefaultscommand_mhmget();
  return *internal_default_instance();
}

command_mhmget* command_mhmget::New(::google::protobuf::Arena* arena) const {
  command_mhmget* n = new command_mhmget;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void command_mhmget::Clear() {
// @@protoc_insertion_point(message_clear_start:client.command_mhmget)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  keys_.Clear();
  fields_.Clear();
  _internal_metadata_.Clear();
}

bool command_mhmget::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:client.command_mhmget)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated string keys = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_keys()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->keys(this->keys_size() - 1).data(),
            static_cast<int>(this->keys(this->keys_size() - 1).length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "client.command_mhmget.keys"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated string fields = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_fields()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->fields(this->fields_size() - 1).data(),
            static_cast<int>(this->fields(this->fields_size() - 1).length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "client.command_mhmget.fields"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:client.command_mhmget)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:client.command_mhmget)
  return false;
#undef DO_
}

void command_mhmget::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:client.command_mhmget)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated string keys = 1;
  for (int i = 0, n = this->keys_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->keys(i).data(), static_cast<int>(this->keys(i).length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "client.command_mhmget.keys");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->keys(i), output);
  }

  // repeated string fields = 2;
  for (int i = 0, n = this->fields_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->fields(i).data(), static_cast<int>(this->fields(i).length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "client.command_mhmget.fields");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->fields(i), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:client.command_mhmget)
}

::google::protobuf::uint8* command_mhmget::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:client.command_mhmget)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated string keys = 1;
  for (int i = 0, n = this->keys_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->keys(i).data(), static_cast<int>(this->keys(i).length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "client.command_mhmget.keys");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(1, this->keys(i), target);
  }

  // repeated string fields = 2;
  for (int i = 0, n = this->fields_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->fields(i).data(), static_cast<int>(this->fields(i).length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "client.command_mhmget.fields");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(2, this->fields(i), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:client.command_mhmget)
  return target;
}

size_t command_mhmget::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:client.command_mhmget)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // repeated string keys = 1;
  total_size += 1 *
      ::google::protobuf::internal::FromIntSize(this->keys_size());
  for (int i = 0, n = this->keys_size(); i < n; i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->keys(i));
  }

  // repeated string fields = 2;
  total_size += 1 *
      ::google::protobuf::internal::FromIntSize(this->fields_size());
  for (int i = 0, n = this->fields_size(); i < n; i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->fields(i));
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void command_mhmget::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:client.command_mhmget)
  GOOGLE_DCHECK_NE(&from, this);
  const command_mhmget* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const command_mhmget>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:client.command_mhmget)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:client.command_mhmget)
    MergeFrom(*source);
  }
}

void command_mhmget::MergeFrom(const command_mhmget& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:client.command_mhmget)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  keys_.MergeFrom(from.keys_);
  fields_.MergeFrom(from.fields_);
}

void command_mhmget::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:client.command_mhmget)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void command_mhmget::CopyFrom(const command_mhmget& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:client.command_mhmget)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool command_mhmget::IsInitialized() const {
  return true;
}

void command_mhmget::Swap(command_mhmget* other) {
  if (other == this) return;
  InternalSwap(other);
}
void command_mhmget::InternalSwap(command_mhmget* other) {
  using std::swap;
  keys_.InternalSwap(&other->keys_);
  fields_.InternalSwap(&other->fields_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata command_mhmget::GetMetadata() const {
  protobuf_message_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_message_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

command_mhmget_reply_DataEntry_DoNotUse::command_mhmget_reply_DataEntry_DoNotUse() {}
command_mhmget_reply_DataEntry_DoNotUse::command_mhmget_reply_DataEntry_DoNotUse(::google::protobuf::Arena* arena) : SuperType(arena) {}
void command_mhmget_reply_DataEntry_DoNotUse::MergeFrom(const command_mhmget_reply_DataEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::google::protobuf::Metadata command_mhmget_reply_DataEntry_DoNotUse::GetMetadata() const {
  ::protobuf_message_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_message_2eproto::file_level_metadata[20];
}
void command_mhmget_reply_DataEntry_DoNotUse::MergeFrom(
    const ::google::protobuf::Message& other) {
  ::google::protobuf::Message::MergeFrom(other);
}


// ===================================================================

void command_mhmget_reply::InitAsDefaultInstance() {
  ::client::_command_mhmget_reply_default_instance_._instance.get_mutable()->state_ = const_cast< ::client::command_reply*>(
      ::client::command_reply::internal_default_instance());
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int command_mhmget_reply::kStateFieldNumber;
const int command_mhmget_reply::kDataFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

command_mhmget_reply::command_mhmget_reply()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_message_2eproto::InitDefaultscommand_mhmget_reply();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:client.command_mhmget_reply)
}
command_mhmget_reply::command_mhmget_reply(const command_mhmget_reply& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  data_.MergeFrom(from.data_);
  if (from.has_state()) {
    state_ = new ::client::command_reply(*from.state_);
  } else {
    state_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:client.command_mhmget_reply)
}

void command_mhmget_reply::SharedCtor() {
  state_ = NULL;
  _cached_size_ = 0;
}

command_mhmget_reply::~command_mhmget_reply() {
  // @@protoc_insertion_point(destructor:client.command_mhmget_reply)
  SharedDtor();
}

void command_mhmget_reply::SharedDtor() {
  if (this != internal_default_instance()) delete state_;
}

void command_mhmget_reply::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* command_mhmget_reply::descriptor() {
  ::protobuf_message_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_message_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const command_mhmget_reply& command_mhmget_reply::default_instance() {
  ::protobuf_message_2eproto::InitDefaultscommand_mhmget_reply();
  return *internal_default_instance();
}

command_mhmget_reply* command_mhmget_reply::New(::google::protobuf::Arena* arena) const {
  command_mhmget_reply* n = new command_mhmget_reply;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void command_mhmget_reply::Clear() {
// @@protoc_insertion_point(message_clear_start:client.command_mhmget_reply)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  data_.Clear();
  if (GetArenaNoVirtual() == NULL && state_ != NULL) {
    delete state_;
  }
  state_ = NULL;
  _internal_metadata_.Clear();
}

bool command_mhmget_reply::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:client.command_mhmget_reply)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .client.command_reply state = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_state()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // map<string, .client.values_type> data = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          command_mhmget_reply_DataEntry_DoNotUse::Parser< ::google::protobuf::internal::MapField<
              command_mhmget_reply_DataEntry_DoNotUse,
              ::std::string, ::client::values_type,
              ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
              ::google::protobuf::internal::WireFormatLite::TYPE_MESSAGE,
              0 >,
            ::google::protobuf::Map< ::std::string, ::client::values_type > > parser(&data_);
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
              input, &parser));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            parser.key().data(), static_cast<int>(parser.key().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "client.command_mhmget_reply.DataEntry.key"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:client.command_mhmget_reply)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:client.command_mhmget_reply)
  return false;
#undef DO_
}

void command_mhmget_reply::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:client.command_mhmget_reply)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .client.command_reply state = 1;
  if (this->has_state()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->state_, output);
  }

  // map<string, .client.values_type> data = 2;
  if (!this->data().empty()) {
    typedef ::google::protobuf::Map< ::std::string, ::client::values_type >::const_pointer
        ConstPtr;
    typedef ConstPtr SortItem;
    typedef ::google::protobuf::internal::CompareByDerefFirst<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
          p->first.data(), static_cast<int>(p->first.length()),
          ::google::protobuf::internal::WireFormatLite::SERIALIZE,
          "client.command_mhmget_reply.DataEntry.key");
      }
    };

    if (output->IsSerializationDeterministic() &&
        this->data().size() > 1) {
      ::google::protobuf::scoped_array<SortItem> items(
          new SortItem[this->data().size()]);
      typedef ::google::protobuf::Map< ::std::string, ::client::values_type >::size_type size_type;
      size_type n = 0;
      for (::google::protobuf::Map< ::std::string, ::client::values_type >::const_iterator
          it = this->data().begin();
          it != this->data().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      ::google::protobuf::scoped_ptr<command_mhmget_reply_DataEntry_DoNotUse> entry;
      for (size_type i = 0; i < n; i++) {
        entry.reset(data_.NewEntryWrapper(
            items[static_cast<ptrdiff_t>(i)]->first, items[static_cast<ptrdiff_t>(i)]->second));
        ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
            2, *entry, output);
        Utf8Check::Check(items[static_cast<ptrdiff_t>(i)]);
      }
    } else {
      ::google::protobuf::scoped_ptr<command_mhmget_reply_DataEntry_DoNotUse> entry;
      for (::google::protobuf::Map< ::std::string, ::client::values_type >::const_iterator
          it = this->data().begin();
          it != this->data().end(); ++it) {
        entry.reset(data_.NewEntryWrapper(
            it->first, it->second));
        ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
            2, *entry, output);
        Utf8Check::Check(&*it);
      }
    }
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:client.command_mhmget_reply)
}

::google::protobuf::uint8* command_mhmget_reply::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:client.command_mhmget_reply)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .client.command_reply state = 1;
  if (this->has_state()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, *this->state_, deterministic, target);
  }

  // map<string, .client.values_type> data = 2;
  if (!this->data().empty()) {
    typedef ::google::protobuf::Map< ::std::string, ::client::values_type >::const_pointer
        ConstPtr;
    typedef ConstPtr SortItem;
    typedef ::google::protobuf::internal::CompareByDerefFirst<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
          p->first.data(), static_cast<int>(p->first.length()),
          ::google::protobuf::internal::WireFormatLite::SERIALIZE,
          "client.command_mhmget_reply.DataEntry.key");
      }
    };

    if (deterministic &&
        this->data().size() > 1) {
      ::google::protobuf::scoped_array<SortItem> items(
          new SortItem[this->data().size()]);
      typedef ::google::protobuf::Map< ::std::string, ::client::values_type >::size_type size_type;
      size_type n = 0;
      for (::google::protobuf::Map< ::std::string, ::client::values_type >::const_iterator
          it = this->data().begin();
          it != this->data().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      ::google::protobuf::scoped_ptr<command_mhmget_reply_DataEntry_DoNotUse> entry;
      for (size_type i = 0; i < n; i++) {
        entry.reset(data_.NewEntryWrapper(
            items[static_cast<ptrdiff_t>(i)]->first, items[static_cast<ptrdiff_t>(i)]->second));
        target = ::google::protobuf::internal::WireFormatLite::
                   InternalWriteMessageNoVirtualToArray(
                       2, *entry, deterministic, target);
;
        Utf8Check::Check(items[static_cast<ptrdiff_t>(i)]);
      }
    } else {
      ::google::protobuf::scoped_ptr<command_mhmget_reply_DataEntry_DoNotUse> entry;
      for (::google::protobuf::Map< ::std::string, ::client::values_type >::const_iterator
          it = this->data().begin();
          it != this->data().end(); ++it) {
        entry.reset(data_.NewEntryWrapper(
            it->first, it->second));
        target = ::google::protobuf::internal::WireFormatLite::
                   InternalWriteMessageNoVirtualToArray(
                       2, *entry, deterministic, target);
;
        Utf8Check::Check(&*it);
      }
    }
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:client.command_mhmget_reply)
  return target;
}

size_t command_mhmget_reply::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:client.command_mhmget_reply)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // map<string, .client.values_type> data = 2;
  total_size += 1 *
      ::google::protobuf::internal::FromIntSize(this->data_size());
  {
    ::google::protobuf::scoped_ptr<command_mhmget_reply_DataEntry_DoNotUse> entry;
    for (::google::protobuf::Map< ::std::string, ::client::values_type >::const_iterator
        it = this->data().begin();
        it != this->data().end(); ++it) {
      entry.reset(data_.NewEntryWrapper(it->first, it->second));
      total_size += ::google::protobuf::internal::WireFormatLite::
          MessageSizeNoVirtual(*entry);
    }
  }

  // .client.command_reply state = 1;
  if (this->has_state()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->state_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void command_mhmget_reply::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:client.command_mhmget_reply)
  GOOGLE_DCHECK_NE(&from, this);
  const command_mhmget_reply* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const command_mhmget_reply>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:client.command_mhmget_reply)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:client.command_mhmget_reply)
    MergeFrom(*source);
  }
}

void command_mhmget_reply::MergeFrom(const command_mhmget_reply& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:client.command_mhmget_reply)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  data_.MergeFrom(from.data_);
  if (from.has_state()) {
    mutable_state()->::client::command_reply::MergeFrom(from.state());
  }
}

void command_mhmget_reply::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:client.command_mhmget_reply)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void command_mhmget_reply::CopyFrom(const command_mhmget_reply& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:client.command_mhmget_reply)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool command_mhmget_reply::IsInitialized() const {
  return true;
}

void command_mhmget_reply::Swap(command_mhmget_reply* other) {
  if (other == this) return;
  InternalSwap(other);
}
void command_mhmget_reply::InternalSwap(command_mhmget_reply* other) {
  using std::swap;
  data_.Swap(&other->data_);
  swap(state_, other->state_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata command_mhmget_reply::GetMetadata() const {
  protobuf_message_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_message_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void command_del::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int command_del::kKeyFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

command_del::command_del()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_message_2eproto::InitDefaultscommand_del();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:client.command_del)
}
command_del::command_del(const command_del& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  key_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.key().size() > 0) {
    key_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.key_);
  }
  // @@protoc_insertion_point(copy_constructor:client.command_del)
}

void command_del::SharedCtor() {
  key_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _cached_size_ = 0;
}

command_del::~command_del() {
  // @@protoc_insertion_point(destructor:client.command_del)
  SharedDtor();
}

void command_del::SharedDtor() {
  key_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void command_del::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* command_del::descriptor() {
  ::protobuf_message_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_message_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const command_del& command_del::default_instance() {
  ::protobuf_message_2eproto::InitDefaultscommand_del();
  return *internal_default_instance();
}

command_del* command_del::New(::google::protobuf::Arena* arena) const {
  command_del* n = new command_del;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void command_del::Clear() {
// @@protoc_insertion_point(message_clear_start:client.command_del)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  key_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _internal_metadata_.Clear();
}

bool command_del::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:client.command_del)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string key = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_key()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->key().data(), static_cast<int>(this->key().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "client.command_del.key"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:client.command_del)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:client.command_del)
  return false;
#undef DO_
}

void command_del::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:client.command_del)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string key = 1;
  if (this->key().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->key().data(), static_cast<int>(this->key().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "client.command_del.key");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->key(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:client.command_del)
}

::google::protobuf::uint8* command_del::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:client.command_del)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string key = 1;
  if (this->key().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->key().data(), static_cast<int>(this->key().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "client.command_del.key");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->key(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:client.command_del)
  return target;
}

size_t command_del::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:client.command_del)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // string key = 1;
  if (this->key().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->key());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void command_del::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:client.command_del)
  GOOGLE_DCHECK_NE(&from, this);
  const command_del* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const command_del>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:client.command_del)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:client.command_del)
    MergeFrom(*source);
  }
}

void command_del::MergeFrom(const command_del& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:client.command_del)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.key().size() > 0) {

    key_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.key_);
  }
}

void command_del::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:client.command_del)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void command_del::CopyFrom(const command_del& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:client.command_del)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool command_del::IsInitialized() const {
  return true;
}

void command_del::Swap(command_del* other) {
  if (other == this) return;
  InternalSwap(other);
}
void command_del::InternalSwap(command_del* other) {
  using std::swap;
  key_.Swap(&other->key_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata command_del::GetMetadata() const {
  protobuf_message_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_message_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void command_mdel::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int command_mdel::kKeysFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

command_mdel::command_mdel()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_message_2eproto::InitDefaultscommand_mdel();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:client.command_mdel)
}
command_mdel::command_mdel(const command_mdel& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      keys_(from.keys_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:client.command_mdel)
}

void command_mdel::SharedCtor() {
  _cached_size_ = 0;
}

command_mdel::~command_mdel() {
  // @@protoc_insertion_point(destructor:client.command_mdel)
  SharedDtor();
}

void command_mdel::SharedDtor() {
}

void command_mdel::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* command_mdel::descriptor() {
  ::protobuf_message_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_message_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const command_mdel& command_mdel::default_instance() {
  ::protobuf_message_2eproto::InitDefaultscommand_mdel();
  return *internal_default_instance();
}

command_mdel* command_mdel::New(::google::protobuf::Arena* arena) const {
  command_mdel* n = new command_mdel;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void command_mdel::Clear() {
// @@protoc_insertion_point(message_clear_start:client.command_mdel)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  keys_.Clear();
  _internal_metadata_.Clear();
}

bool command_mdel::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:client.command_mdel)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated string keys = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_keys()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->keys(this->keys_size() - 1).data(),
            static_cast<int>(this->keys(this->keys_size() - 1).length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "client.command_mdel.keys"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:client.command_mdel)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:client.command_mdel)
  return false;
#undef DO_
}

void command_mdel::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:client.command_mdel)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated string keys = 1;
  for (int i = 0, n = this->keys_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->keys(i).data(), static_cast<int>(this->keys(i).length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "client.command_mdel.keys");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->keys(i), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:client.command_mdel)
}

::google::protobuf::uint8* command_mdel::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:client.command_mdel)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated string keys = 1;
  for (int i = 0, n = this->keys_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->keys(i).data(), static_cast<int>(this->keys(i).length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "client.command_mdel.keys");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(1, this->keys(i), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:client.command_mdel)
  return target;
}

size_t command_mdel::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:client.command_mdel)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // repeated string keys = 1;
  total_size += 1 *
      ::google::protobuf::internal::FromIntSize(this->keys_size());
  for (int i = 0, n = this->keys_size(); i < n; i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->keys(i));
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void command_mdel::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:client.command_mdel)
  GOOGLE_DCHECK_NE(&from, this);
  const command_mdel* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const command_mdel>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:client.command_mdel)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:client.command_mdel)
    MergeFrom(*source);
  }
}

void command_mdel::MergeFrom(const command_mdel& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:client.command_mdel)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  keys_.MergeFrom(from.keys_);
}

void command_mdel::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:client.command_mdel)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void command_mdel::CopyFrom(const command_mdel& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:client.command_mdel)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool command_mdel::IsInitialized() const {
  return true;
}

void command_mdel::Swap(command_mdel* other) {
  if (other == this) return;
  InternalSwap(other);
}
void command_mdel::InternalSwap(command_mdel* other) {
  using std::swap;
  keys_.InternalSwap(&other->keys_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata command_mdel::GetMetadata() const {
  protobuf_message_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_message_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void command_hdel::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int command_hdel::kKeyFieldNumber;
const int command_hdel::kFieldFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

command_hdel::command_hdel()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_message_2eproto::InitDefaultscommand_hdel();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:client.command_hdel)
}
command_hdel::command_hdel(const command_hdel& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  key_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.key().size() > 0) {
    key_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.key_);
  }
  field_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.field().size() > 0) {
    field_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.field_);
  }
  // @@protoc_insertion_point(copy_constructor:client.command_hdel)
}

void command_hdel::SharedCtor() {
  key_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  field_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _cached_size_ = 0;
}

command_hdel::~command_hdel() {
  // @@protoc_insertion_point(destructor:client.command_hdel)
  SharedDtor();
}

void command_hdel::SharedDtor() {
  key_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  field_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void command_hdel::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* command_hdel::descriptor() {
  ::protobuf_message_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_message_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const command_hdel& command_hdel::default_instance() {
  ::protobuf_message_2eproto::InitDefaultscommand_hdel();
  return *internal_default_instance();
}

command_hdel* command_hdel::New(::google::protobuf::Arena* arena) const {
  command_hdel* n = new command_hdel;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void command_hdel::Clear() {
// @@protoc_insertion_point(message_clear_start:client.command_hdel)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  key_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  field_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _internal_metadata_.Clear();
}

bool command_hdel::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:client.command_hdel)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string key = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_key()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->key().data(), static_cast<int>(this->key().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "client.command_hdel.key"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string field = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_field()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->field().data(), static_cast<int>(this->field().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "client.command_hdel.field"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:client.command_hdel)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:client.command_hdel)
  return false;
#undef DO_
}

void command_hdel::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:client.command_hdel)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string key = 1;
  if (this->key().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->key().data(), static_cast<int>(this->key().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "client.command_hdel.key");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->key(), output);
  }

  // string field = 2;
  if (this->field().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->field().data(), static_cast<int>(this->field().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "client.command_hdel.field");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->field(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:client.command_hdel)
}

::google::protobuf::uint8* command_hdel::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:client.command_hdel)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string key = 1;
  if (this->key().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->key().data(), static_cast<int>(this->key().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "client.command_hdel.key");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->key(), target);
  }

  // string field = 2;
  if (this->field().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->field().data(), static_cast<int>(this->field().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "client.command_hdel.field");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->field(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:client.command_hdel)
  return target;
}

size_t command_hdel::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:client.command_hdel)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // string key = 1;
  if (this->key().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->key());
  }

  // string field = 2;
  if (this->field().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->field());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void command_hdel::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:client.command_hdel)
  GOOGLE_DCHECK_NE(&from, this);
  const command_hdel* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const command_hdel>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:client.command_hdel)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:client.command_hdel)
    MergeFrom(*source);
  }
}

void command_hdel::MergeFrom(const command_hdel& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:client.command_hdel)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.key().size() > 0) {

    key_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.key_);
  }
  if (from.field().size() > 0) {

    field_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.field_);
  }
}

void command_hdel::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:client.command_hdel)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void command_hdel::CopyFrom(const command_hdel& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:client.command_hdel)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool command_hdel::IsInitialized() const {
  return true;
}

void command_hdel::Swap(command_hdel* other) {
  if (other == this) return;
  InternalSwap(other);
}
void command_hdel::InternalSwap(command_hdel* other) {
  using std::swap;
  key_.Swap(&other->key_);
  field_.Swap(&other->field_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata command_hdel::GetMetadata() const {
  protobuf_message_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_message_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void command_hmdel::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int command_hmdel::kKeyFieldNumber;
const int command_hmdel::kFieldsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

command_hmdel::command_hmdel()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_message_2eproto::InitDefaultscommand_hmdel();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:client.command_hmdel)
}
command_hmdel::command_hmdel(const command_hmdel& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      fields_(from.fields_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  key_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.key().size() > 0) {
    key_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.key_);
  }
  // @@protoc_insertion_point(copy_constructor:client.command_hmdel)
}

void command_hmdel::SharedCtor() {
  key_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _cached_size_ = 0;
}

command_hmdel::~command_hmdel() {
  // @@protoc_insertion_point(destructor:client.command_hmdel)
  SharedDtor();
}

void command_hmdel::SharedDtor() {
  key_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void command_hmdel::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* command_hmdel::descriptor() {
  ::protobuf_message_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_message_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const command_hmdel& command_hmdel::default_instance() {
  ::protobuf_message_2eproto::InitDefaultscommand_hmdel();
  return *internal_default_instance();
}

command_hmdel* command_hmdel::New(::google::protobuf::Arena* arena) const {
  command_hmdel* n = new command_hmdel;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void command_hmdel::Clear() {
// @@protoc_insertion_point(message_clear_start:client.command_hmdel)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  fields_.Clear();
  key_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _internal_metadata_.Clear();
}

bool command_hmdel::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:client.command_hmdel)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string key = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_key()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->key().data(), static_cast<int>(this->key().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "client.command_hmdel.key"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated string fields = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_fields()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->fields(this->fields_size() - 1).data(),
            static_cast<int>(this->fields(this->fields_size() - 1).length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "client.command_hmdel.fields"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:client.command_hmdel)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:client.command_hmdel)
  return false;
#undef DO_
}

void command_hmdel::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:client.command_hmdel)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string key = 1;
  if (this->key().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->key().data(), static_cast<int>(this->key().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "client.command_hmdel.key");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->key(), output);
  }

  // repeated string fields = 2;
  for (int i = 0, n = this->fields_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->fields(i).data(), static_cast<int>(this->fields(i).length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "client.command_hmdel.fields");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->fields(i), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:client.command_hmdel)
}

::google::protobuf::uint8* command_hmdel::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:client.command_hmdel)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string key = 1;
  if (this->key().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->key().data(), static_cast<int>(this->key().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "client.command_hmdel.key");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->key(), target);
  }

  // repeated string fields = 2;
  for (int i = 0, n = this->fields_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->fields(i).data(), static_cast<int>(this->fields(i).length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "client.command_hmdel.fields");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(2, this->fields(i), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:client.command_hmdel)
  return target;
}

size_t command_hmdel::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:client.command_hmdel)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // repeated string fields = 2;
  total_size += 1 *
      ::google::protobuf::internal::FromIntSize(this->fields_size());
  for (int i = 0, n = this->fields_size(); i < n; i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->fields(i));
  }

  // string key = 1;
  if (this->key().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->key());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void command_hmdel::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:client.command_hmdel)
  GOOGLE_DCHECK_NE(&from, this);
  const command_hmdel* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const command_hmdel>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:client.command_hmdel)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:client.command_hmdel)
    MergeFrom(*source);
  }
}

void command_hmdel::MergeFrom(const command_hmdel& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:client.command_hmdel)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  fields_.MergeFrom(from.fields_);
  if (from.key().size() > 0) {

    key_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.key_);
  }
}

void command_hmdel::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:client.command_hmdel)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void command_hmdel::CopyFrom(const command_hmdel& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:client.command_hmdel)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool command_hmdel::IsInitialized() const {
  return true;
}

void command_hmdel::Swap(command_hmdel* other) {
  if (other == this) return;
  InternalSwap(other);
}
void command_hmdel::InternalSwap(command_hmdel* other) {
  using std::swap;
  fields_.InternalSwap(&other->fields_);
  key_.Swap(&other->key_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata command_hmdel::GetMetadata() const {
  protobuf_message_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_message_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void command_mhmdel::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int command_mhmdel::kKeysFieldNumber;
const int command_mhmdel::kFieldsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

command_mhmdel::command_mhmdel()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_message_2eproto::InitDefaultscommand_mhmdel();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:client.command_mhmdel)
}
command_mhmdel::command_mhmdel(const command_mhmdel& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      keys_(from.keys_),
      fields_(from.fields_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:client.command_mhmdel)
}

void command_mhmdel::SharedCtor() {
  _cached_size_ = 0;
}

command_mhmdel::~command_mhmdel() {
  // @@protoc_insertion_point(destructor:client.command_mhmdel)
  SharedDtor();
}

void command_mhmdel::SharedDtor() {
}

void command_mhmdel::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* command_mhmdel::descriptor() {
  ::protobuf_message_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_message_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const command_mhmdel& command_mhmdel::default_instance() {
  ::protobuf_message_2eproto::InitDefaultscommand_mhmdel();
  return *internal_default_instance();
}

command_mhmdel* command_mhmdel::New(::google::protobuf::Arena* arena) const {
  command_mhmdel* n = new command_mhmdel;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void command_mhmdel::Clear() {
// @@protoc_insertion_point(message_clear_start:client.command_mhmdel)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  keys_.Clear();
  fields_.Clear();
  _internal_metadata_.Clear();
}

bool command_mhmdel::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:client.command_mhmdel)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated string keys = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_keys()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->keys(this->keys_size() - 1).data(),
            static_cast<int>(this->keys(this->keys_size() - 1).length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "client.command_mhmdel.keys"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated string fields = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_fields()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->fields(this->fields_size() - 1).data(),
            static_cast<int>(this->fields(this->fields_size() - 1).length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "client.command_mhmdel.fields"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:client.command_mhmdel)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:client.command_mhmdel)
  return false;
#undef DO_
}

void command_mhmdel::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:client.command_mhmdel)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated string keys = 1;
  for (int i = 0, n = this->keys_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->keys(i).data(), static_cast<int>(this->keys(i).length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "client.command_mhmdel.keys");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->keys(i), output);
  }

  // repeated string fields = 2;
  for (int i = 0, n = this->fields_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->fields(i).data(), static_cast<int>(this->fields(i).length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "client.command_mhmdel.fields");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->fields(i), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:client.command_mhmdel)
}

::google::protobuf::uint8* command_mhmdel::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:client.command_mhmdel)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated string keys = 1;
  for (int i = 0, n = this->keys_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->keys(i).data(), static_cast<int>(this->keys(i).length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "client.command_mhmdel.keys");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(1, this->keys(i), target);
  }

  // repeated string fields = 2;
  for (int i = 0, n = this->fields_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->fields(i).data(), static_cast<int>(this->fields(i).length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "client.command_mhmdel.fields");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(2, this->fields(i), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:client.command_mhmdel)
  return target;
}

size_t command_mhmdel::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:client.command_mhmdel)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // repeated string keys = 1;
  total_size += 1 *
      ::google::protobuf::internal::FromIntSize(this->keys_size());
  for (int i = 0, n = this->keys_size(); i < n; i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->keys(i));
  }

  // repeated string fields = 2;
  total_size += 1 *
      ::google::protobuf::internal::FromIntSize(this->fields_size());
  for (int i = 0, n = this->fields_size(); i < n; i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->fields(i));
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void command_mhmdel::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:client.command_mhmdel)
  GOOGLE_DCHECK_NE(&from, this);
  const command_mhmdel* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const command_mhmdel>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:client.command_mhmdel)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:client.command_mhmdel)
    MergeFrom(*source);
  }
}

void command_mhmdel::MergeFrom(const command_mhmdel& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:client.command_mhmdel)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  keys_.MergeFrom(from.keys_);
  fields_.MergeFrom(from.fields_);
}

void command_mhmdel::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:client.command_mhmdel)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void command_mhmdel::CopyFrom(const command_mhmdel& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:client.command_mhmdel)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool command_mhmdel::IsInitialized() const {
  return true;
}

void command_mhmdel::Swap(command_mhmdel* other) {
  if (other == this) return;
  InternalSwap(other);
}
void command_mhmdel::InternalSwap(command_mhmdel* other) {
  using std::swap;
  keys_.InternalSwap(&other->keys_);
  fields_.InternalSwap(&other->fields_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata command_mhmdel::GetMetadata() const {
  protobuf_message_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_message_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void command_incr::InitAsDefaultInstance() {
  ::client::_command_incr_default_instance_._instance.get_mutable()->value_ = const_cast< ::data::VALUE*>(
      ::data::VALUE::internal_default_instance());
}
void command_incr::clear_value() {
  if (GetArenaNoVirtual() == NULL && value_ != NULL) {
    delete value_;
  }
  value_ = NULL;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int command_incr::kKeyFieldNumber;
const int command_incr::kValueFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

command_incr::command_incr()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_message_2eproto::InitDefaultscommand_incr();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:client.command_incr)
}
command_incr::command_incr(const command_incr& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  key_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.key().size() > 0) {
    key_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.key_);
  }
  if (from.has_value()) {
    value_ = new ::data::VALUE(*from.value_);
  } else {
    value_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:client.command_incr)
}

void command_incr::SharedCtor() {
  key_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  value_ = NULL;
  _cached_size_ = 0;
}

command_incr::~command_incr() {
  // @@protoc_insertion_point(destructor:client.command_incr)
  SharedDtor();
}

void command_incr::SharedDtor() {
  key_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete value_;
}

void command_incr::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* command_incr::descriptor() {
  ::protobuf_message_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_message_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const command_incr& command_incr::default_instance() {
  ::protobuf_message_2eproto::InitDefaultscommand_incr();
  return *internal_default_instance();
}

command_incr* command_incr::New(::google::protobuf::Arena* arena) const {
  command_incr* n = new command_incr;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void command_incr::Clear() {
// @@protoc_insertion_point(message_clear_start:client.command_incr)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  key_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == NULL && value_ != NULL) {
    delete value_;
  }
  value_ = NULL;
  _internal_metadata_.Clear();
}

bool command_incr::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:client.command_incr)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string key = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_key()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->key().data(), static_cast<int>(this->key().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "client.command_incr.key"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .data.VALUE value = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_value()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:client.command_incr)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:client.command_incr)
  return false;
#undef DO_
}

void command_incr::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:client.command_incr)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string key = 1;
  if (this->key().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->key().data(), static_cast<int>(this->key().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "client.command_incr.key");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->key(), output);
  }

  // .data.VALUE value = 2;
  if (this->has_value()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->value_, output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:client.command_incr)
}

::google::protobuf::uint8* command_incr::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:client.command_incr)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string key = 1;
  if (this->key().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->key().data(), static_cast<int>(this->key().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "client.command_incr.key");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->key(), target);
  }

  // .data.VALUE value = 2;
  if (this->has_value()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, *this->value_, deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:client.command_incr)
  return target;
}

size_t command_incr::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:client.command_incr)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // string key = 1;
  if (this->key().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->key());
  }

  // .data.VALUE value = 2;
  if (this->has_value()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->value_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void command_incr::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:client.command_incr)
  GOOGLE_DCHECK_NE(&from, this);
  const command_incr* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const command_incr>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:client.command_incr)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:client.command_incr)
    MergeFrom(*source);
  }
}

void command_incr::MergeFrom(const command_incr& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:client.command_incr)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.key().size() > 0) {

    key_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.key_);
  }
  if (from.has_value()) {
    mutable_value()->::data::VALUE::MergeFrom(from.value());
  }
}

void command_incr::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:client.command_incr)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void command_incr::CopyFrom(const command_incr& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:client.command_incr)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool command_incr::IsInitialized() const {
  return true;
}

void command_incr::Swap(command_incr* other) {
  if (other == this) return;
  InternalSwap(other);
}
void command_incr::InternalSwap(command_incr* other) {
  using std::swap;
  key_.Swap(&other->key_);
  swap(value_, other->value_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata command_incr::GetMetadata() const {
  protobuf_message_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_message_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

command_mincr_KvsEntry_DoNotUse::command_mincr_KvsEntry_DoNotUse() {}
command_mincr_KvsEntry_DoNotUse::command_mincr_KvsEntry_DoNotUse(::google::protobuf::Arena* arena) : SuperType(arena) {}
void command_mincr_KvsEntry_DoNotUse::MergeFrom(const command_mincr_KvsEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::google::protobuf::Metadata command_mincr_KvsEntry_DoNotUse::GetMetadata() const {
  ::protobuf_message_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_message_2eproto::file_level_metadata[28];
}
void command_mincr_KvsEntry_DoNotUse::MergeFrom(
    const ::google::protobuf::Message& other) {
  ::google::protobuf::Message::MergeFrom(other);
}


// ===================================================================

void command_mincr::InitAsDefaultInstance() {
}
void command_mincr::clear_kvs() {
  kvs_.Clear();
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int command_mincr::kKvsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

command_mincr::command_mincr()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_message_2eproto::InitDefaultscommand_mincr();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:client.command_mincr)
}
command_mincr::command_mincr(const command_mincr& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  kvs_.MergeFrom(from.kvs_);
  // @@protoc_insertion_point(copy_constructor:client.command_mincr)
}

void command_mincr::SharedCtor() {
  _cached_size_ = 0;
}

command_mincr::~command_mincr() {
  // @@protoc_insertion_point(destructor:client.command_mincr)
  SharedDtor();
}

void command_mincr::SharedDtor() {
}

void command_mincr::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* command_mincr::descriptor() {
  ::protobuf_message_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_message_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const command_mincr& command_mincr::default_instance() {
  ::protobuf_message_2eproto::InitDefaultscommand_mincr();
  return *internal_default_instance();
}

command_mincr* command_mincr::New(::google::protobuf::Arena* arena) const {
  command_mincr* n = new command_mincr;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void command_mincr::Clear() {
// @@protoc_insertion_point(message_clear_start:client.command_mincr)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  kvs_.Clear();
  _internal_metadata_.Clear();
}

bool command_mincr::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:client.command_mincr)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // map<string, .data.VALUE> kvs = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          command_mincr_KvsEntry_DoNotUse::Parser< ::google::protobuf::internal::MapField<
              command_mincr_KvsEntry_DoNotUse,
              ::std::string, ::data::VALUE,
              ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
              ::google::protobuf::internal::WireFormatLite::TYPE_MESSAGE,
              0 >,
            ::google::protobuf::Map< ::std::string, ::data::VALUE > > parser(&kvs_);
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
              input, &parser));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            parser.key().data(), static_cast<int>(parser.key().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "client.command_mincr.KvsEntry.key"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:client.command_mincr)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:client.command_mincr)
  return false;
#undef DO_
}

void command_mincr::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:client.command_mincr)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // map<string, .data.VALUE> kvs = 1;
  if (!this->kvs().empty()) {
    typedef ::google::protobuf::Map< ::std::string, ::data::VALUE >::const_pointer
        ConstPtr;
    typedef ConstPtr SortItem;
    typedef ::google::protobuf::internal::CompareByDerefFirst<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
          p->first.data(), static_cast<int>(p->first.length()),
          ::google::protobuf::internal::WireFormatLite::SERIALIZE,
          "client.command_mincr.KvsEntry.key");
      }
    };

    if (output->IsSerializationDeterministic() &&
        this->kvs().size() > 1) {
      ::google::protobuf::scoped_array<SortItem> items(
          new SortItem[this->kvs().size()]);
      typedef ::google::protobuf::Map< ::std::string, ::data::VALUE >::size_type size_type;
      size_type n = 0;
      for (::google::protobuf::Map< ::std::string, ::data::VALUE >::const_iterator
          it = this->kvs().begin();
          it != this->kvs().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      ::google::protobuf::scoped_ptr<command_mincr_KvsEntry_DoNotUse> entry;
      for (size_type i = 0; i < n; i++) {
        entry.reset(kvs_.NewEntryWrapper(
            items[static_cast<ptrdiff_t>(i)]->first, items[static_cast<ptrdiff_t>(i)]->second));
        ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
            1, *entry, output);
        Utf8Check::Check(items[static_cast<ptrdiff_t>(i)]);
      }
    } else {
      ::google::protobuf::scoped_ptr<command_mincr_KvsEntry_DoNotUse> entry;
      for (::google::protobuf::Map< ::std::string, ::data::VALUE >::const_iterator
          it = this->kvs().begin();
          it != this->kvs().end(); ++it) {
        entry.reset(kvs_.NewEntryWrapper(
            it->first, it->second));
        ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
            1, *entry, output);
        Utf8Check::Check(&*it);
      }
    }
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:client.command_mincr)
}

::google::protobuf::uint8* command_mincr::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:client.command_mincr)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // map<string, .data.VALUE> kvs = 1;
  if (!this->kvs().empty()) {
    typedef ::google::protobuf::Map< ::std::string, ::data::VALUE >::const_pointer
        ConstPtr;
    typedef ConstPtr SortItem;
    typedef ::google::protobuf::internal::CompareByDerefFirst<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
          p->first.data(), static_cast<int>(p->first.length()),
          ::google::protobuf::internal::WireFormatLite::SERIALIZE,
          "client.command_mincr.KvsEntry.key");
      }
    };

    if (deterministic &&
        this->kvs().size() > 1) {
      ::google::protobuf::scoped_array<SortItem> items(
          new SortItem[this->kvs().size()]);
      typedef ::google::protobuf::Map< ::std::string, ::data::VALUE >::size_type size_type;
      size_type n = 0;
      for (::google::protobuf::Map< ::std::string, ::data::VALUE >::const_iterator
          it = this->kvs().begin();
          it != this->kvs().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      ::google::protobuf::scoped_ptr<command_mincr_KvsEntry_DoNotUse> entry;
      for (size_type i = 0; i < n; i++) {
        entry.reset(kvs_.NewEntryWrapper(
            items[static_cast<ptrdiff_t>(i)]->first, items[static_cast<ptrdiff_t>(i)]->second));
        target = ::google::protobuf::internal::WireFormatLite::
                   InternalWriteMessageNoVirtualToArray(
                       1, *entry, deterministic, target);
;
        Utf8Check::Check(items[static_cast<ptrdiff_t>(i)]);
      }
    } else {
      ::google::protobuf::scoped_ptr<command_mincr_KvsEntry_DoNotUse> entry;
      for (::google::protobuf::Map< ::std::string, ::data::VALUE >::const_iterator
          it = this->kvs().begin();
          it != this->kvs().end(); ++it) {
        entry.reset(kvs_.NewEntryWrapper(
            it->first, it->second));
        target = ::google::protobuf::internal::WireFormatLite::
                   InternalWriteMessageNoVirtualToArray(
                       1, *entry, deterministic, target);
;
        Utf8Check::Check(&*it);
      }
    }
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:client.command_mincr)
  return target;
}

size_t command_mincr::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:client.command_mincr)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // map<string, .data.VALUE> kvs = 1;
  total_size += 1 *
      ::google::protobuf::internal::FromIntSize(this->kvs_size());
  {
    ::google::protobuf::scoped_ptr<command_mincr_KvsEntry_DoNotUse> entry;
    for (::google::protobuf::Map< ::std::string, ::data::VALUE >::const_iterator
        it = this->kvs().begin();
        it != this->kvs().end(); ++it) {
      entry.reset(kvs_.NewEntryWrapper(it->first, it->second));
      total_size += ::google::protobuf::internal::WireFormatLite::
          MessageSizeNoVirtual(*entry);
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void command_mincr::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:client.command_mincr)
  GOOGLE_DCHECK_NE(&from, this);
  const command_mincr* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const command_mincr>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:client.command_mincr)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:client.command_mincr)
    MergeFrom(*source);
  }
}

void command_mincr::MergeFrom(const command_mincr& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:client.command_mincr)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  kvs_.MergeFrom(from.kvs_);
}

void command_mincr::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:client.command_mincr)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void command_mincr::CopyFrom(const command_mincr& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:client.command_mincr)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool command_mincr::IsInitialized() const {
  return true;
}

void command_mincr::Swap(command_mincr* other) {
  if (other == this) return;
  InternalSwap(other);
}
void command_mincr::InternalSwap(command_mincr* other) {
  using std::swap;
  kvs_.Swap(&other->kvs_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata command_mincr::GetMetadata() const {
  protobuf_message_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_message_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void command_hincr::InitAsDefaultInstance() {
  ::client::_command_hincr_default_instance_._instance.get_mutable()->value_ = const_cast< ::data::VALUE*>(
      ::data::VALUE::internal_default_instance());
}
void command_hincr::clear_value() {
  if (GetArenaNoVirtual() == NULL && value_ != NULL) {
    delete value_;
  }
  value_ = NULL;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int command_hincr::kKeyFieldNumber;
const int command_hincr::kFieldFieldNumber;
const int command_hincr::kValueFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

command_hincr::command_hincr()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_message_2eproto::InitDefaultscommand_hincr();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:client.command_hincr)
}
command_hincr::command_hincr(const command_hincr& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  key_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.key().size() > 0) {
    key_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.key_);
  }
  field_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.field().size() > 0) {
    field_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.field_);
  }
  if (from.has_value()) {
    value_ = new ::data::VALUE(*from.value_);
  } else {
    value_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:client.command_hincr)
}

void command_hincr::SharedCtor() {
  key_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  field_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  value_ = NULL;
  _cached_size_ = 0;
}

command_hincr::~command_hincr() {
  // @@protoc_insertion_point(destructor:client.command_hincr)
  SharedDtor();
}

void command_hincr::SharedDtor() {
  key_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  field_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete value_;
}

void command_hincr::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* command_hincr::descriptor() {
  ::protobuf_message_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_message_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const command_hincr& command_hincr::default_instance() {
  ::protobuf_message_2eproto::InitDefaultscommand_hincr();
  return *internal_default_instance();
}

command_hincr* command_hincr::New(::google::protobuf::Arena* arena) const {
  command_hincr* n = new command_hincr;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void command_hincr::Clear() {
// @@protoc_insertion_point(message_clear_start:client.command_hincr)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  key_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  field_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == NULL && value_ != NULL) {
    delete value_;
  }
  value_ = NULL;
  _internal_metadata_.Clear();
}

bool command_hincr::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:client.command_hincr)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string key = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_key()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->key().data(), static_cast<int>(this->key().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "client.command_hincr.key"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string field = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_field()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->field().data(), static_cast<int>(this->field().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "client.command_hincr.field"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .data.VALUE value = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_value()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:client.command_hincr)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:client.command_hincr)
  return false;
#undef DO_
}

void command_hincr::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:client.command_hincr)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string key = 1;
  if (this->key().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->key().data(), static_cast<int>(this->key().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "client.command_hincr.key");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->key(), output);
  }

  // string field = 2;
  if (this->field().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->field().data(), static_cast<int>(this->field().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "client.command_hincr.field");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->field(), output);
  }

  // .data.VALUE value = 3;
  if (this->has_value()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, *this->value_, output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:client.command_hincr)
}

::google::protobuf::uint8* command_hincr::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:client.command_hincr)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string key = 1;
  if (this->key().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->key().data(), static_cast<int>(this->key().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "client.command_hincr.key");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->key(), target);
  }

  // string field = 2;
  if (this->field().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->field().data(), static_cast<int>(this->field().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "client.command_hincr.field");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->field(), target);
  }

  // .data.VALUE value = 3;
  if (this->has_value()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        3, *this->value_, deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:client.command_hincr)
  return target;
}

size_t command_hincr::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:client.command_hincr)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // string key = 1;
  if (this->key().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->key());
  }

  // string field = 2;
  if (this->field().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->field());
  }

  // .data.VALUE value = 3;
  if (this->has_value()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->value_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void command_hincr::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:client.command_hincr)
  GOOGLE_DCHECK_NE(&from, this);
  const command_hincr* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const command_hincr>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:client.command_hincr)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:client.command_hincr)
    MergeFrom(*source);
  }
}

void command_hincr::MergeFrom(const command_hincr& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:client.command_hincr)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.key().size() > 0) {

    key_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.key_);
  }
  if (from.field().size() > 0) {

    field_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.field_);
  }
  if (from.has_value()) {
    mutable_value()->::data::VALUE::MergeFrom(from.value());
  }
}

void command_hincr::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:client.command_hincr)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void command_hincr::CopyFrom(const command_hincr& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:client.command_hincr)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool command_hincr::IsInitialized() const {
  return true;
}

void command_hincr::Swap(command_hincr* other) {
  if (other == this) return;
  InternalSwap(other);
}
void command_hincr::InternalSwap(command_hincr* other) {
  using std::swap;
  key_.Swap(&other->key_);
  field_.Swap(&other->field_);
  swap(value_, other->value_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata command_hincr::GetMetadata() const {
  protobuf_message_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_message_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

command_hmincr_KvsEntry_DoNotUse::command_hmincr_KvsEntry_DoNotUse() {}
command_hmincr_KvsEntry_DoNotUse::command_hmincr_KvsEntry_DoNotUse(::google::protobuf::Arena* arena) : SuperType(arena) {}
void command_hmincr_KvsEntry_DoNotUse::MergeFrom(const command_hmincr_KvsEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::google::protobuf::Metadata command_hmincr_KvsEntry_DoNotUse::GetMetadata() const {
  ::protobuf_message_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_message_2eproto::file_level_metadata[31];
}
void command_hmincr_KvsEntry_DoNotUse::MergeFrom(
    const ::google::protobuf::Message& other) {
  ::google::protobuf::Message::MergeFrom(other);
}


// ===================================================================

void command_hmincr::InitAsDefaultInstance() {
}
void command_hmincr::clear_kvs() {
  kvs_.Clear();
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int command_hmincr::kKeyFieldNumber;
const int command_hmincr::kKvsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

command_hmincr::command_hmincr()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_message_2eproto::InitDefaultscommand_hmincr();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:client.command_hmincr)
}
command_hmincr::command_hmincr(const command_hmincr& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  kvs_.MergeFrom(from.kvs_);
  key_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.key().size() > 0) {
    key_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.key_);
  }
  // @@protoc_insertion_point(copy_constructor:client.command_hmincr)
}

void command_hmincr::SharedCtor() {
  key_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _cached_size_ = 0;
}

command_hmincr::~command_hmincr() {
  // @@protoc_insertion_point(destructor:client.command_hmincr)
  SharedDtor();
}

void command_hmincr::SharedDtor() {
  key_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void command_hmincr::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* command_hmincr::descriptor() {
  ::protobuf_message_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_message_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const command_hmincr& command_hmincr::default_instance() {
  ::protobuf_message_2eproto::InitDefaultscommand_hmincr();
  return *internal_default_instance();
}

command_hmincr* command_hmincr::New(::google::protobuf::Arena* arena) const {
  command_hmincr* n = new command_hmincr;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void command_hmincr::Clear() {
// @@protoc_insertion_point(message_clear_start:client.command_hmincr)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  kvs_.Clear();
  key_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _internal_metadata_.Clear();
}

bool command_hmincr::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:client.command_hmincr)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string key = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_key()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->key().data(), static_cast<int>(this->key().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "client.command_hmincr.key"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // map<string, .data.VALUE> kvs = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          command_hmincr_KvsEntry_DoNotUse::Parser< ::google::protobuf::internal::MapField<
              command_hmincr_KvsEntry_DoNotUse,
              ::std::string, ::data::VALUE,
              ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
              ::google::protobuf::internal::WireFormatLite::TYPE_MESSAGE,
              0 >,
            ::google::protobuf::Map< ::std::string, ::data::VALUE > > parser(&kvs_);
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
              input, &parser));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            parser.key().data(), static_cast<int>(parser.key().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "client.command_hmincr.KvsEntry.key"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:client.command_hmincr)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:client.command_hmincr)
  return false;
#undef DO_
}

void command_hmincr::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:client.command_hmincr)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string key = 1;
  if (this->key().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->key().data(), static_cast<int>(this->key().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "client.command_hmincr.key");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->key(), output);
  }

  // map<string, .data.VALUE> kvs = 2;
  if (!this->kvs().empty()) {
    typedef ::google::protobuf::Map< ::std::string, ::data::VALUE >::const_pointer
        ConstPtr;
    typedef ConstPtr SortItem;
    typedef ::google::protobuf::internal::CompareByDerefFirst<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
          p->first.data(), static_cast<int>(p->first.length()),
          ::google::protobuf::internal::WireFormatLite::SERIALIZE,
          "client.command_hmincr.KvsEntry.key");
      }
    };

    if (output->IsSerializationDeterministic() &&
        this->kvs().size() > 1) {
      ::google::protobuf::scoped_array<SortItem> items(
          new SortItem[this->kvs().size()]);
      typedef ::google::protobuf::Map< ::std::string, ::data::VALUE >::size_type size_type;
      size_type n = 0;
      for (::google::protobuf::Map< ::std::string, ::data::VALUE >::const_iterator
          it = this->kvs().begin();
          it != this->kvs().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      ::google::protobuf::scoped_ptr<command_hmincr_KvsEntry_DoNotUse> entry;
      for (size_type i = 0; i < n; i++) {
        entry.reset(kvs_.NewEntryWrapper(
            items[static_cast<ptrdiff_t>(i)]->first, items[static_cast<ptrdiff_t>(i)]->second));
        ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
            2, *entry, output);
        Utf8Check::Check(items[static_cast<ptrdiff_t>(i)]);
      }
    } else {
      ::google::protobuf::scoped_ptr<command_hmincr_KvsEntry_DoNotUse> entry;
      for (::google::protobuf::Map< ::std::string, ::data::VALUE >::const_iterator
          it = this->kvs().begin();
          it != this->kvs().end(); ++it) {
        entry.reset(kvs_.NewEntryWrapper(
            it->first, it->second));
        ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
            2, *entry, output);
        Utf8Check::Check(&*it);
      }
    }
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:client.command_hmincr)
}

::google::protobuf::uint8* command_hmincr::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:client.command_hmincr)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string key = 1;
  if (this->key().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->key().data(), static_cast<int>(this->key().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "client.command_hmincr.key");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->key(), target);
  }

  // map<string, .data.VALUE> kvs = 2;
  if (!this->kvs().empty()) {
    typedef ::google::protobuf::Map< ::std::string, ::data::VALUE >::const_pointer
        ConstPtr;
    typedef ConstPtr SortItem;
    typedef ::google::protobuf::internal::CompareByDerefFirst<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
          p->first.data(), static_cast<int>(p->first.length()),
          ::google::protobuf::internal::WireFormatLite::SERIALIZE,
          "client.command_hmincr.KvsEntry.key");
      }
    };

    if (deterministic &&
        this->kvs().size() > 1) {
      ::google::protobuf::scoped_array<SortItem> items(
          new SortItem[this->kvs().size()]);
      typedef ::google::protobuf::Map< ::std::string, ::data::VALUE >::size_type size_type;
      size_type n = 0;
      for (::google::protobuf::Map< ::std::string, ::data::VALUE >::const_iterator
          it = this->kvs().begin();
          it != this->kvs().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      ::google::protobuf::scoped_ptr<command_hmincr_KvsEntry_DoNotUse> entry;
      for (size_type i = 0; i < n; i++) {
        entry.reset(kvs_.NewEntryWrapper(
            items[static_cast<ptrdiff_t>(i)]->first, items[static_cast<ptrdiff_t>(i)]->second));
        target = ::google::protobuf::internal::WireFormatLite::
                   InternalWriteMessageNoVirtualToArray(
                       2, *entry, deterministic, target);
;
        Utf8Check::Check(items[static_cast<ptrdiff_t>(i)]);
      }
    } else {
      ::google::protobuf::scoped_ptr<command_hmincr_KvsEntry_DoNotUse> entry;
      for (::google::protobuf::Map< ::std::string, ::data::VALUE >::const_iterator
          it = this->kvs().begin();
          it != this->kvs().end(); ++it) {
        entry.reset(kvs_.NewEntryWrapper(
            it->first, it->second));
        target = ::google::protobuf::internal::WireFormatLite::
                   InternalWriteMessageNoVirtualToArray(
                       2, *entry, deterministic, target);
;
        Utf8Check::Check(&*it);
      }
    }
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:client.command_hmincr)
  return target;
}

size_t command_hmincr::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:client.command_hmincr)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // map<string, .data.VALUE> kvs = 2;
  total_size += 1 *
      ::google::protobuf::internal::FromIntSize(this->kvs_size());
  {
    ::google::protobuf::scoped_ptr<command_hmincr_KvsEntry_DoNotUse> entry;
    for (::google::protobuf::Map< ::std::string, ::data::VALUE >::const_iterator
        it = this->kvs().begin();
        it != this->kvs().end(); ++it) {
      entry.reset(kvs_.NewEntryWrapper(it->first, it->second));
      total_size += ::google::protobuf::internal::WireFormatLite::
          MessageSizeNoVirtual(*entry);
    }
  }

  // string key = 1;
  if (this->key().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->key());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void command_hmincr::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:client.command_hmincr)
  GOOGLE_DCHECK_NE(&from, this);
  const command_hmincr* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const command_hmincr>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:client.command_hmincr)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:client.command_hmincr)
    MergeFrom(*source);
  }
}

void command_hmincr::MergeFrom(const command_hmincr& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:client.command_hmincr)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  kvs_.MergeFrom(from.kvs_);
  if (from.key().size() > 0) {

    key_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.key_);
  }
}

void command_hmincr::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:client.command_hmincr)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void command_hmincr::CopyFrom(const command_hmincr& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:client.command_hmincr)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool command_hmincr::IsInitialized() const {
  return true;
}

void command_hmincr::Swap(command_hmincr* other) {
  if (other == this) return;
  InternalSwap(other);
}
void command_hmincr::InternalSwap(command_hmincr* other) {
  using std::swap;
  kvs_.Swap(&other->kvs_);
  key_.Swap(&other->key_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata command_hmincr::GetMetadata() const {
  protobuf_message_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_message_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

command_mhmincr_KvsEntry_DoNotUse::command_mhmincr_KvsEntry_DoNotUse() {}
command_mhmincr_KvsEntry_DoNotUse::command_mhmincr_KvsEntry_DoNotUse(::google::protobuf::Arena* arena) : SuperType(arena) {}
void command_mhmincr_KvsEntry_DoNotUse::MergeFrom(const command_mhmincr_KvsEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::google::protobuf::Metadata command_mhmincr_KvsEntry_DoNotUse::GetMetadata() const {
  ::protobuf_message_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_message_2eproto::file_level_metadata[33];
}
void command_mhmincr_KvsEntry_DoNotUse::MergeFrom(
    const ::google::protobuf::Message& other) {
  ::google::protobuf::Message::MergeFrom(other);
}


// ===================================================================

void command_mhmincr::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int command_mhmincr::kFieldsFieldNumber;
const int command_mhmincr::kKvsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

command_mhmincr::command_mhmincr()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_message_2eproto::InitDefaultscommand_mhmincr();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:client.command_mhmincr)
}
command_mhmincr::command_mhmincr(const command_mhmincr& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      fields_(from.fields_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  kvs_.MergeFrom(from.kvs_);
  // @@protoc_insertion_point(copy_constructor:client.command_mhmincr)
}

void command_mhmincr::SharedCtor() {
  _cached_size_ = 0;
}

command_mhmincr::~command_mhmincr() {
  // @@protoc_insertion_point(destructor:client.command_mhmincr)
  SharedDtor();
}

void command_mhmincr::SharedDtor() {
}

void command_mhmincr::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* command_mhmincr::descriptor() {
  ::protobuf_message_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_message_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const command_mhmincr& command_mhmincr::default_instance() {
  ::protobuf_message_2eproto::InitDefaultscommand_mhmincr();
  return *internal_default_instance();
}

command_mhmincr* command_mhmincr::New(::google::protobuf::Arena* arena) const {
  command_mhmincr* n = new command_mhmincr;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void command_mhmincr::Clear() {
// @@protoc_insertion_point(message_clear_start:client.command_mhmincr)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  fields_.Clear();
  kvs_.Clear();
  _internal_metadata_.Clear();
}

bool command_mhmincr::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:client.command_mhmincr)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated string fields = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_fields()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->fields(this->fields_size() - 1).data(),
            static_cast<int>(this->fields(this->fields_size() - 1).length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "client.command_mhmincr.fields"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // map<string, .client.values_type> kvs = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          command_mhmincr_KvsEntry_DoNotUse::Parser< ::google::protobuf::internal::MapField<
              command_mhmincr_KvsEntry_DoNotUse,
              ::std::string, ::client::values_type,
              ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
              ::google::protobuf::internal::WireFormatLite::TYPE_MESSAGE,
              0 >,
            ::google::protobuf::Map< ::std::string, ::client::values_type > > parser(&kvs_);
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
              input, &parser));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            parser.key().data(), static_cast<int>(parser.key().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "client.command_mhmincr.KvsEntry.key"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:client.command_mhmincr)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:client.command_mhmincr)
  return false;
#undef DO_
}

void command_mhmincr::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:client.command_mhmincr)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated string fields = 1;
  for (int i = 0, n = this->fields_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->fields(i).data(), static_cast<int>(this->fields(i).length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "client.command_mhmincr.fields");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->fields(i), output);
  }

  // map<string, .client.values_type> kvs = 2;
  if (!this->kvs().empty()) {
    typedef ::google::protobuf::Map< ::std::string, ::client::values_type >::const_pointer
        ConstPtr;
    typedef ConstPtr SortItem;
    typedef ::google::protobuf::internal::CompareByDerefFirst<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
          p->first.data(), static_cast<int>(p->first.length()),
          ::google::protobuf::internal::WireFormatLite::SERIALIZE,
          "client.command_mhmincr.KvsEntry.key");
      }
    };

    if (output->IsSerializationDeterministic() &&
        this->kvs().size() > 1) {
      ::google::protobuf::scoped_array<SortItem> items(
          new SortItem[this->kvs().size()]);
      typedef ::google::protobuf::Map< ::std::string, ::client::values_type >::size_type size_type;
      size_type n = 0;
      for (::google::protobuf::Map< ::std::string, ::client::values_type >::const_iterator
          it = this->kvs().begin();
          it != this->kvs().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      ::google::protobuf::scoped_ptr<command_mhmincr_KvsEntry_DoNotUse> entry;
      for (size_type i = 0; i < n; i++) {
        entry.reset(kvs_.NewEntryWrapper(
            items[static_cast<ptrdiff_t>(i)]->first, items[static_cast<ptrdiff_t>(i)]->second));
        ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
            2, *entry, output);
        Utf8Check::Check(items[static_cast<ptrdiff_t>(i)]);
      }
    } else {
      ::google::protobuf::scoped_ptr<command_mhmincr_KvsEntry_DoNotUse> entry;
      for (::google::protobuf::Map< ::std::string, ::client::values_type >::const_iterator
          it = this->kvs().begin();
          it != this->kvs().end(); ++it) {
        entry.reset(kvs_.NewEntryWrapper(
            it->first, it->second));
        ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
            2, *entry, output);
        Utf8Check::Check(&*it);
      }
    }
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:client.command_mhmincr)
}

::google::protobuf::uint8* command_mhmincr::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:client.command_mhmincr)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated string fields = 1;
  for (int i = 0, n = this->fields_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->fields(i).data(), static_cast<int>(this->fields(i).length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "client.command_mhmincr.fields");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(1, this->fields(i), target);
  }

  // map<string, .client.values_type> kvs = 2;
  if (!this->kvs().empty()) {
    typedef ::google::protobuf::Map< ::std::string, ::client::values_type >::const_pointer
        ConstPtr;
    typedef ConstPtr SortItem;
    typedef ::google::protobuf::internal::CompareByDerefFirst<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
          p->first.data(), static_cast<int>(p->first.length()),
          ::google::protobuf::internal::WireFormatLite::SERIALIZE,
          "client.command_mhmincr.KvsEntry.key");
      }
    };

    if (deterministic &&
        this->kvs().size() > 1) {
      ::google::protobuf::scoped_array<SortItem> items(
          new SortItem[this->kvs().size()]);
      typedef ::google::protobuf::Map< ::std::string, ::client::values_type >::size_type size_type;
      size_type n = 0;
      for (::google::protobuf::Map< ::std::string, ::client::values_type >::const_iterator
          it = this->kvs().begin();
          it != this->kvs().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      ::google::protobuf::scoped_ptr<command_mhmincr_KvsEntry_DoNotUse> entry;
      for (size_type i = 0; i < n; i++) {
        entry.reset(kvs_.NewEntryWrapper(
            items[static_cast<ptrdiff_t>(i)]->first, items[static_cast<ptrdiff_t>(i)]->second));
        target = ::google::protobuf::internal::WireFormatLite::
                   InternalWriteMessageNoVirtualToArray(
                       2, *entry, deterministic, target);
;
        Utf8Check::Check(items[static_cast<ptrdiff_t>(i)]);
      }
    } else {
      ::google::protobuf::scoped_ptr<command_mhmincr_KvsEntry_DoNotUse> entry;
      for (::google::protobuf::Map< ::std::string, ::client::values_type >::const_iterator
          it = this->kvs().begin();
          it != this->kvs().end(); ++it) {
        entry.reset(kvs_.NewEntryWrapper(
            it->first, it->second));
        target = ::google::protobuf::internal::WireFormatLite::
                   InternalWriteMessageNoVirtualToArray(
                       2, *entry, deterministic, target);
;
        Utf8Check::Check(&*it);
      }
    }
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:client.command_mhmincr)
  return target;
}

size_t command_mhmincr::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:client.command_mhmincr)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // repeated string fields = 1;
  total_size += 1 *
      ::google::protobuf::internal::FromIntSize(this->fields_size());
  for (int i = 0, n = this->fields_size(); i < n; i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->fields(i));
  }

  // map<string, .client.values_type> kvs = 2;
  total_size += 1 *
      ::google::protobuf::internal::FromIntSize(this->kvs_size());
  {
    ::google::protobuf::scoped_ptr<command_mhmincr_KvsEntry_DoNotUse> entry;
    for (::google::protobuf::Map< ::std::string, ::client::values_type >::const_iterator
        it = this->kvs().begin();
        it != this->kvs().end(); ++it) {
      entry.reset(kvs_.NewEntryWrapper(it->first, it->second));
      total_size += ::google::protobuf::internal::WireFormatLite::
          MessageSizeNoVirtual(*entry);
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void command_mhmincr::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:client.command_mhmincr)
  GOOGLE_DCHECK_NE(&from, this);
  const command_mhmincr* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const command_mhmincr>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:client.command_mhmincr)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:client.command_mhmincr)
    MergeFrom(*source);
  }
}

void command_mhmincr::MergeFrom(const command_mhmincr& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:client.command_mhmincr)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  fields_.MergeFrom(from.fields_);
  kvs_.MergeFrom(from.kvs_);
}

void command_mhmincr::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:client.command_mhmincr)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void command_mhmincr::CopyFrom(const command_mhmincr& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:client.command_mhmincr)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool command_mhmincr::IsInitialized() const {
  return true;
}

void command_mhmincr::Swap(command_mhmincr* other) {
  if (other == this) return;
  InternalSwap(other);
}
void command_mhmincr::InternalSwap(command_mhmincr* other) {
  using std::swap;
  fields_.InternalSwap(&other->fields_);
  kvs_.Swap(&other->kvs_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata command_mhmincr::GetMetadata() const {
  protobuf_message_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_message_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void command_lpush::InitAsDefaultInstance() {
  ::client::_command_lpush_default_instance_._instance.get_mutable()->value_ = const_cast< ::data::VALUE*>(
      ::data::VALUE::internal_default_instance());
}
void command_lpush::clear_value() {
  if (GetArenaNoVirtual() == NULL && value_ != NULL) {
    delete value_;
  }
  value_ = NULL;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int command_lpush::kKeyFieldNumber;
const int command_lpush::kValueFieldNumber;
const int command_lpush::kHeadFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

command_lpush::command_lpush()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_message_2eproto::InitDefaultscommand_lpush();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:client.command_lpush)
}
command_lpush::command_lpush(const command_lpush& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  key_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.key().size() > 0) {
    key_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.key_);
  }
  if (from.has_value()) {
    value_ = new ::data::VALUE(*from.value_);
  } else {
    value_ = NULL;
  }
  head_ = from.head_;
  // @@protoc_insertion_point(copy_constructor:client.command_lpush)
}

void command_lpush::SharedCtor() {
  key_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&value_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&head_) -
      reinterpret_cast<char*>(&value_)) + sizeof(head_));
  _cached_size_ = 0;
}

command_lpush::~command_lpush() {
  // @@protoc_insertion_point(destructor:client.command_lpush)
  SharedDtor();
}

void command_lpush::SharedDtor() {
  key_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete value_;
}

void command_lpush::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* command_lpush::descriptor() {
  ::protobuf_message_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_message_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const command_lpush& command_lpush::default_instance() {
  ::protobuf_message_2eproto::InitDefaultscommand_lpush();
  return *internal_default_instance();
}

command_lpush* command_lpush::New(::google::protobuf::Arena* arena) const {
  command_lpush* n = new command_lpush;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void command_lpush::Clear() {
// @@protoc_insertion_point(message_clear_start:client.command_lpush)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  key_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == NULL && value_ != NULL) {
    delete value_;
  }
  value_ = NULL;
  head_ = false;
  _internal_metadata_.Clear();
}

bool command_lpush::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:client.command_lpush)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string key = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_key()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->key().data(), static_cast<int>(this->key().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "client.command_lpush.key"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .data.VALUE value = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_value()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool head = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &head_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:client.command_lpush)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:client.command_lpush)
  return false;
#undef DO_
}

void command_lpush::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:client.command_lpush)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string key = 1;
  if (this->key().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->key().data(), static_cast<int>(this->key().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "client.command_lpush.key");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->key(), output);
  }

  // .data.VALUE value = 2;
  if (this->has_value()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->value_, output);
  }

  // bool head = 3;
  if (this->head() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->head(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:client.command_lpush)
}

::google::protobuf::uint8* command_lpush::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:client.command_lpush)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string key = 1;
  if (this->key().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->key().data(), static_cast<int>(this->key().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "client.command_lpush.key");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->key(), target);
  }

  // .data.VALUE value = 2;
  if (this->has_value()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, *this->value_, deterministic, target);
  }

  // bool head = 3;
  if (this->head() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(3, this->head(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:client.command_lpush)
  return target;
}

size_t command_lpush::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:client.command_lpush)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // string key = 1;
  if (this->key().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->key());
  }

  // .data.VALUE value = 2;
  if (this->has_value()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->value_);
  }

  // bool head = 3;
  if (this->head() != 0) {
    total_size += 1 + 1;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void command_lpush::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:client.command_lpush)
  GOOGLE_DCHECK_NE(&from, this);
  const command_lpush* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const command_lpush>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:client.command_lpush)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:client.command_lpush)
    MergeFrom(*source);
  }
}

void command_lpush::MergeFrom(const command_lpush& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:client.command_lpush)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.key().size() > 0) {

    key_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.key_);
  }
  if (from.has_value()) {
    mutable_value()->::data::VALUE::MergeFrom(from.value());
  }
  if (from.head() != 0) {
    set_head(from.head());
  }
}

void command_lpush::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:client.command_lpush)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void command_lpush::CopyFrom(const command_lpush& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:client.command_lpush)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool command_lpush::IsInitialized() const {
  return true;
}

void command_lpush::Swap(command_lpush* other) {
  if (other == this) return;
  InternalSwap(other);
}
void command_lpush::InternalSwap(command_lpush* other) {
  using std::swap;
  key_.Swap(&other->key_);
  swap(value_, other->value_);
  swap(head_, other->head_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata command_lpush::GetMetadata() const {
  protobuf_message_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_message_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

command_mlpush_KvsEntry_DoNotUse::command_mlpush_KvsEntry_DoNotUse() {}
command_mlpush_KvsEntry_DoNotUse::command_mlpush_KvsEntry_DoNotUse(::google::protobuf::Arena* arena) : SuperType(arena) {}
void command_mlpush_KvsEntry_DoNotUse::MergeFrom(const command_mlpush_KvsEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::google::protobuf::Metadata command_mlpush_KvsEntry_DoNotUse::GetMetadata() const {
  ::protobuf_message_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_message_2eproto::file_level_metadata[36];
}
void command_mlpush_KvsEntry_DoNotUse::MergeFrom(
    const ::google::protobuf::Message& other) {
  ::google::protobuf::Message::MergeFrom(other);
}


// ===================================================================

void command_mlpush::InitAsDefaultInstance() {
}
void command_mlpush::clear_kvs() {
  kvs_.Clear();
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int command_mlpush::kKvsFieldNumber;
const int command_mlpush::kHeadFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

command_mlpush::command_mlpush()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_message_2eproto::InitDefaultscommand_mlpush();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:client.command_mlpush)
}
command_mlpush::command_mlpush(const command_mlpush& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  kvs_.MergeFrom(from.kvs_);
  head_ = from.head_;
  // @@protoc_insertion_point(copy_constructor:client.command_mlpush)
}

void command_mlpush::SharedCtor() {
  head_ = false;
  _cached_size_ = 0;
}

command_mlpush::~command_mlpush() {
  // @@protoc_insertion_point(destructor:client.command_mlpush)
  SharedDtor();
}

void command_mlpush::SharedDtor() {
}

void command_mlpush::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* command_mlpush::descriptor() {
  ::protobuf_message_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_message_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const command_mlpush& command_mlpush::default_instance() {
  ::protobuf_message_2eproto::InitDefaultscommand_mlpush();
  return *internal_default_instance();
}

command_mlpush* command_mlpush::New(::google::protobuf::Arena* arena) const {
  command_mlpush* n = new command_mlpush;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void command_mlpush::Clear() {
// @@protoc_insertion_point(message_clear_start:client.command_mlpush)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  kvs_.Clear();
  head_ = false;
  _internal_metadata_.Clear();
}

bool command_mlpush::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:client.command_mlpush)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // map<string, .data.VALUE> kvs = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          command_mlpush_KvsEntry_DoNotUse::Parser< ::google::protobuf::internal::MapField<
              command_mlpush_KvsEntry_DoNotUse,
              ::std::string, ::data::VALUE,
              ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
              ::google::protobuf::internal::WireFormatLite::TYPE_MESSAGE,
              0 >,
            ::google::protobuf::Map< ::std::string, ::data::VALUE > > parser(&kvs_);
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
              input, &parser));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            parser.key().data(), static_cast<int>(parser.key().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "client.command_mlpush.KvsEntry.key"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool head = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &head_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:client.command_mlpush)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:client.command_mlpush)
  return false;
#undef DO_
}

void command_mlpush::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:client.command_mlpush)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // map<string, .data.VALUE> kvs = 1;
  if (!this->kvs().empty()) {
    typedef ::google::protobuf::Map< ::std::string, ::data::VALUE >::const_pointer
        ConstPtr;
    typedef ConstPtr SortItem;
    typedef ::google::protobuf::internal::CompareByDerefFirst<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
          p->first.data(), static_cast<int>(p->first.length()),
          ::google::protobuf::internal::WireFormatLite::SERIALIZE,
          "client.command_mlpush.KvsEntry.key");
      }
    };

    if (output->IsSerializationDeterministic() &&
        this->kvs().size() > 1) {
      ::google::protobuf::scoped_array<SortItem> items(
          new SortItem[this->kvs().size()]);
      typedef ::google::protobuf::Map< ::std::string, ::data::VALUE >::size_type size_type;
      size_type n = 0;
      for (::google::protobuf::Map< ::std::string, ::data::VALUE >::const_iterator
          it = this->kvs().begin();
          it != this->kvs().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      ::google::protobuf::scoped_ptr<command_mlpush_KvsEntry_DoNotUse> entry;
      for (size_type i = 0; i < n; i++) {
        entry.reset(kvs_.NewEntryWrapper(
            items[static_cast<ptrdiff_t>(i)]->first, items[static_cast<ptrdiff_t>(i)]->second));
        ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
            1, *entry, output);
        Utf8Check::Check(items[static_cast<ptrdiff_t>(i)]);
      }
    } else {
      ::google::protobuf::scoped_ptr<command_mlpush_KvsEntry_DoNotUse> entry;
      for (::google::protobuf::Map< ::std::string, ::data::VALUE >::const_iterator
          it = this->kvs().begin();
          it != this->kvs().end(); ++it) {
        entry.reset(kvs_.NewEntryWrapper(
            it->first, it->second));
        ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
            1, *entry, output);
        Utf8Check::Check(&*it);
      }
    }
  }

  // bool head = 2;
  if (this->head() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->head(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:client.command_mlpush)
}

::google::protobuf::uint8* command_mlpush::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:client.command_mlpush)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // map<string, .data.VALUE> kvs = 1;
  if (!this->kvs().empty()) {
    typedef ::google::protobuf::Map< ::std::string, ::data::VALUE >::const_pointer
        ConstPtr;
    typedef ConstPtr SortItem;
    typedef ::google::protobuf::internal::CompareByDerefFirst<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
          p->first.data(), static_cast<int>(p->first.length()),
          ::google::protobuf::internal::WireFormatLite::SERIALIZE,
          "client.command_mlpush.KvsEntry.key");
      }
    };

    if (deterministic &&
        this->kvs().size() > 1) {
      ::google::protobuf::scoped_array<SortItem> items(
          new SortItem[this->kvs().size()]);
      typedef ::google::protobuf::Map< ::std::string, ::data::VALUE >::size_type size_type;
      size_type n = 0;
      for (::google::protobuf::Map< ::std::string, ::data::VALUE >::const_iterator
          it = this->kvs().begin();
          it != this->kvs().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      ::google::protobuf::scoped_ptr<command_mlpush_KvsEntry_DoNotUse> entry;
      for (size_type i = 0; i < n; i++) {
        entry.reset(kvs_.NewEntryWrapper(
            items[static_cast<ptrdiff_t>(i)]->first, items[static_cast<ptrdiff_t>(i)]->second));
        target = ::google::protobuf::internal::WireFormatLite::
                   InternalWriteMessageNoVirtualToArray(
                       1, *entry, deterministic, target);
;
        Utf8Check::Check(items[static_cast<ptrdiff_t>(i)]);
      }
    } else {
      ::google::protobuf::scoped_ptr<command_mlpush_KvsEntry_DoNotUse> entry;
      for (::google::protobuf::Map< ::std::string, ::data::VALUE >::const_iterator
          it = this->kvs().begin();
          it != this->kvs().end(); ++it) {
        entry.reset(kvs_.NewEntryWrapper(
            it->first, it->second));
        target = ::google::protobuf::internal::WireFormatLite::
                   InternalWriteMessageNoVirtualToArray(
                       1, *entry, deterministic, target);
;
        Utf8Check::Check(&*it);
      }
    }
  }

  // bool head = 2;
  if (this->head() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->head(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:client.command_mlpush)
  return target;
}

size_t command_mlpush::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:client.command_mlpush)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // map<string, .data.VALUE> kvs = 1;
  total_size += 1 *
      ::google::protobuf::internal::FromIntSize(this->kvs_size());
  {
    ::google::protobuf::scoped_ptr<command_mlpush_KvsEntry_DoNotUse> entry;
    for (::google::protobuf::Map< ::std::string, ::data::VALUE >::const_iterator
        it = this->kvs().begin();
        it != this->kvs().end(); ++it) {
      entry.reset(kvs_.NewEntryWrapper(it->first, it->second));
      total_size += ::google::protobuf::internal::WireFormatLite::
          MessageSizeNoVirtual(*entry);
    }
  }

  // bool head = 2;
  if (this->head() != 0) {
    total_size += 1 + 1;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void command_mlpush::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:client.command_mlpush)
  GOOGLE_DCHECK_NE(&from, this);
  const command_mlpush* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const command_mlpush>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:client.command_mlpush)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:client.command_mlpush)
    MergeFrom(*source);
  }
}

void command_mlpush::MergeFrom(const command_mlpush& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:client.command_mlpush)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  kvs_.MergeFrom(from.kvs_);
  if (from.head() != 0) {
    set_head(from.head());
  }
}

void command_mlpush::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:client.command_mlpush)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void command_mlpush::CopyFrom(const command_mlpush& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:client.command_mlpush)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool command_mlpush::IsInitialized() const {
  return true;
}

void command_mlpush::Swap(command_mlpush* other) {
  if (other == this) return;
  InternalSwap(other);
}
void command_mlpush::InternalSwap(command_mlpush* other) {
  using std::swap;
  kvs_.Swap(&other->kvs_);
  swap(head_, other->head_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata command_mlpush::GetMetadata() const {
  protobuf_message_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_message_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void command_hlpush::InitAsDefaultInstance() {
  ::client::_command_hlpush_default_instance_._instance.get_mutable()->value_ = const_cast< ::data::VALUE*>(
      ::data::VALUE::internal_default_instance());
}
void command_hlpush::clear_value() {
  if (GetArenaNoVirtual() == NULL && value_ != NULL) {
    delete value_;
  }
  value_ = NULL;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int command_hlpush::kKeyFieldNumber;
const int command_hlpush::kFieldFieldNumber;
const int command_hlpush::kValueFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

command_hlpush::command_hlpush()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_message_2eproto::InitDefaultscommand_hlpush();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:client.command_hlpush)
}
command_hlpush::command_hlpush(const command_hlpush& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  key_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.key().size() > 0) {
    key_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.key_);
  }
  field_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.field().size() > 0) {
    field_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.field_);
  }
  if (from.has_value()) {
    value_ = new ::data::VALUE(*from.value_);
  } else {
    value_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:client.command_hlpush)
}

void command_hlpush::SharedCtor() {
  key_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  field_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  value_ = NULL;
  _cached_size_ = 0;
}

command_hlpush::~command_hlpush() {
  // @@protoc_insertion_point(destructor:client.command_hlpush)
  SharedDtor();
}

void command_hlpush::SharedDtor() {
  key_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  field_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete value_;
}

void command_hlpush::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* command_hlpush::descriptor() {
  ::protobuf_message_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_message_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const command_hlpush& command_hlpush::default_instance() {
  ::protobuf_message_2eproto::InitDefaultscommand_hlpush();
  return *internal_default_instance();
}

command_hlpush* command_hlpush::New(::google::protobuf::Arena* arena) const {
  command_hlpush* n = new command_hlpush;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void command_hlpush::Clear() {
// @@protoc_insertion_point(message_clear_start:client.command_hlpush)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  key_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  field_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == NULL && value_ != NULL) {
    delete value_;
  }
  value_ = NULL;
  _internal_metadata_.Clear();
}

bool command_hlpush::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:client.command_hlpush)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string key = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_key()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->key().data(), static_cast<int>(this->key().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "client.command_hlpush.key"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string field = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_field()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->field().data(), static_cast<int>(this->field().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "client.command_hlpush.field"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .data.VALUE value = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_value()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:client.command_hlpush)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:client.command_hlpush)
  return false;
#undef DO_
}

void command_hlpush::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:client.command_hlpush)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string key = 1;
  if (this->key().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->key().data(), static_cast<int>(this->key().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "client.command_hlpush.key");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->key(), output);
  }

  // string field = 2;
  if (this->field().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->field().data(), static_cast<int>(this->field().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "client.command_hlpush.field");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->field(), output);
  }

  // .data.VALUE value = 3;
  if (this->has_value()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, *this->value_, output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:client.command_hlpush)
}

::google::protobuf::uint8* command_hlpush::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:client.command_hlpush)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string key = 1;
  if (this->key().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->key().data(), static_cast<int>(this->key().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "client.command_hlpush.key");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->key(), target);
  }

  // string field = 2;
  if (this->field().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->field().data(), static_cast<int>(this->field().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "client.command_hlpush.field");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->field(), target);
  }

  // .data.VALUE value = 3;
  if (this->has_value()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        3, *this->value_, deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:client.command_hlpush)
  return target;
}

size_t command_hlpush::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:client.command_hlpush)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // string key = 1;
  if (this->key().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->key());
  }

  // string field = 2;
  if (this->field().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->field());
  }

  // .data.VALUE value = 3;
  if (this->has_value()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->value_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void command_hlpush::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:client.command_hlpush)
  GOOGLE_DCHECK_NE(&from, this);
  const command_hlpush* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const command_hlpush>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:client.command_hlpush)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:client.command_hlpush)
    MergeFrom(*source);
  }
}

void command_hlpush::MergeFrom(const command_hlpush& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:client.command_hlpush)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.key().size() > 0) {

    key_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.key_);
  }
  if (from.field().size() > 0) {

    field_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.field_);
  }
  if (from.has_value()) {
    mutable_value()->::data::VALUE::MergeFrom(from.value());
  }
}

void command_hlpush::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:client.command_hlpush)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void command_hlpush::CopyFrom(const command_hlpush& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:client.command_hlpush)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool command_hlpush::IsInitialized() const {
  return true;
}

void command_hlpush::Swap(command_hlpush* other) {
  if (other == this) return;
  InternalSwap(other);
}
void command_hlpush::InternalSwap(command_hlpush* other) {
  using std::swap;
  key_.Swap(&other->key_);
  field_.Swap(&other->field_);
  swap(value_, other->value_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata command_hlpush::GetMetadata() const {
  protobuf_message_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_message_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

command_hmlpush_KvsEntry_DoNotUse::command_hmlpush_KvsEntry_DoNotUse() {}
command_hmlpush_KvsEntry_DoNotUse::command_hmlpush_KvsEntry_DoNotUse(::google::protobuf::Arena* arena) : SuperType(arena) {}
void command_hmlpush_KvsEntry_DoNotUse::MergeFrom(const command_hmlpush_KvsEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::google::protobuf::Metadata command_hmlpush_KvsEntry_DoNotUse::GetMetadata() const {
  ::protobuf_message_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_message_2eproto::file_level_metadata[39];
}
void command_hmlpush_KvsEntry_DoNotUse::MergeFrom(
    const ::google::protobuf::Message& other) {
  ::google::protobuf::Message::MergeFrom(other);
}


// ===================================================================

void command_hmlpush::InitAsDefaultInstance() {
}
void command_hmlpush::clear_kvs() {
  kvs_.Clear();
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int command_hmlpush::kKeyFieldNumber;
const int command_hmlpush::kKvsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

command_hmlpush::command_hmlpush()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_message_2eproto::InitDefaultscommand_hmlpush();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:client.command_hmlpush)
}
command_hmlpush::command_hmlpush(const command_hmlpush& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  kvs_.MergeFrom(from.kvs_);
  key_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.key().size() > 0) {
    key_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.key_);
  }
  // @@protoc_insertion_point(copy_constructor:client.command_hmlpush)
}

void command_hmlpush::SharedCtor() {
  key_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _cached_size_ = 0;
}

command_hmlpush::~command_hmlpush() {
  // @@protoc_insertion_point(destructor:client.command_hmlpush)
  SharedDtor();
}

void command_hmlpush::SharedDtor() {
  key_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void command_hmlpush::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* command_hmlpush::descriptor() {
  ::protobuf_message_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_message_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const command_hmlpush& command_hmlpush::default_instance() {
  ::protobuf_message_2eproto::InitDefaultscommand_hmlpush();
  return *internal_default_instance();
}

command_hmlpush* command_hmlpush::New(::google::protobuf::Arena* arena) const {
  command_hmlpush* n = new command_hmlpush;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void command_hmlpush::Clear() {
// @@protoc_insertion_point(message_clear_start:client.command_hmlpush)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  kvs_.Clear();
  key_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _internal_metadata_.Clear();
}

bool command_hmlpush::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:client.command_hmlpush)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string key = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_key()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->key().data(), static_cast<int>(this->key().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "client.command_hmlpush.key"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // map<string, .data.VALUE> kvs = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          command_hmlpush_KvsEntry_DoNotUse::Parser< ::google::protobuf::internal::MapField<
              command_hmlpush_KvsEntry_DoNotUse,
              ::std::string, ::data::VALUE,
              ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
              ::google::protobuf::internal::WireFormatLite::TYPE_MESSAGE,
              0 >,
            ::google::protobuf::Map< ::std::string, ::data::VALUE > > parser(&kvs_);
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
              input, &parser));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            parser.key().data(), static_cast<int>(parser.key().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "client.command_hmlpush.KvsEntry.key"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:client.command_hmlpush)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:client.command_hmlpush)
  return false;
#undef DO_
}

void command_hmlpush::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:client.command_hmlpush)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string key = 1;
  if (this->key().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->key().data(), static_cast<int>(this->key().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "client.command_hmlpush.key");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->key(), output);
  }

  // map<string, .data.VALUE> kvs = 2;
  if (!this->kvs().empty()) {
    typedef ::google::protobuf::Map< ::std::string, ::data::VALUE >::const_pointer
        ConstPtr;
    typedef ConstPtr SortItem;
    typedef ::google::protobuf::internal::CompareByDerefFirst<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
          p->first.data(), static_cast<int>(p->first.length()),
          ::google::protobuf::internal::WireFormatLite::SERIALIZE,
          "client.command_hmlpush.KvsEntry.key");
      }
    };

    if (output->IsSerializationDeterministic() &&
        this->kvs().size() > 1) {
      ::google::protobuf::scoped_array<SortItem> items(
          new SortItem[this->kvs().size()]);
      typedef ::google::protobuf::Map< ::std::string, ::data::VALUE >::size_type size_type;
      size_type n = 0;
      for (::google::protobuf::Map< ::std::string, ::data::VALUE >::const_iterator
          it = this->kvs().begin();
          it != this->kvs().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      ::google::protobuf::scoped_ptr<command_hmlpush_KvsEntry_DoNotUse> entry;
      for (size_type i = 0; i < n; i++) {
        entry.reset(kvs_.NewEntryWrapper(
            items[static_cast<ptrdiff_t>(i)]->first, items[static_cast<ptrdiff_t>(i)]->second));
        ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
            2, *entry, output);
        Utf8Check::Check(items[static_cast<ptrdiff_t>(i)]);
      }
    } else {
      ::google::protobuf::scoped_ptr<command_hmlpush_KvsEntry_DoNotUse> entry;
      for (::google::protobuf::Map< ::std::string, ::data::VALUE >::const_iterator
          it = this->kvs().begin();
          it != this->kvs().end(); ++it) {
        entry.reset(kvs_.NewEntryWrapper(
            it->first, it->second));
        ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
            2, *entry, output);
        Utf8Check::Check(&*it);
      }
    }
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:client.command_hmlpush)
}

::google::protobuf::uint8* command_hmlpush::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:client.command_hmlpush)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string key = 1;
  if (this->key().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->key().data(), static_cast<int>(this->key().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "client.command_hmlpush.key");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->key(), target);
  }

  // map<string, .data.VALUE> kvs = 2;
  if (!this->kvs().empty()) {
    typedef ::google::protobuf::Map< ::std::string, ::data::VALUE >::const_pointer
        ConstPtr;
    typedef ConstPtr SortItem;
    typedef ::google::protobuf::internal::CompareByDerefFirst<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
          p->first.data(), static_cast<int>(p->first.length()),
          ::google::protobuf::internal::WireFormatLite::SERIALIZE,
          "client.command_hmlpush.KvsEntry.key");
      }
    };

    if (deterministic &&
        this->kvs().size() > 1) {
      ::google::protobuf::scoped_array<SortItem> items(
          new SortItem[this->kvs().size()]);
      typedef ::google::protobuf::Map< ::std::string, ::data::VALUE >::size_type size_type;
      size_type n = 0;
      for (::google::protobuf::Map< ::std::string, ::data::VALUE >::const_iterator
          it = this->kvs().begin();
          it != this->kvs().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      ::google::protobuf::scoped_ptr<command_hmlpush_KvsEntry_DoNotUse> entry;
      for (size_type i = 0; i < n; i++) {
        entry.reset(kvs_.NewEntryWrapper(
            items[static_cast<ptrdiff_t>(i)]->first, items[static_cast<ptrdiff_t>(i)]->second));
        target = ::google::protobuf::internal::WireFormatLite::
                   InternalWriteMessageNoVirtualToArray(
                       2, *entry, deterministic, target);
;
        Utf8Check::Check(items[static_cast<ptrdiff_t>(i)]);
      }
    } else {
      ::google::protobuf::scoped_ptr<command_hmlpush_KvsEntry_DoNotUse> entry;
      for (::google::protobuf::Map< ::std::string, ::data::VALUE >::const_iterator
          it = this->kvs().begin();
          it != this->kvs().end(); ++it) {
        entry.reset(kvs_.NewEntryWrapper(
            it->first, it->second));
        target = ::google::protobuf::internal::WireFormatLite::
                   InternalWriteMessageNoVirtualToArray(
                       2, *entry, deterministic, target);
;
        Utf8Check::Check(&*it);
      }
    }
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:client.command_hmlpush)
  return target;
}

size_t command_hmlpush::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:client.command_hmlpush)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // map<string, .data.VALUE> kvs = 2;
  total_size += 1 *
      ::google::protobuf::internal::FromIntSize(this->kvs_size());
  {
    ::google::protobuf::scoped_ptr<command_hmlpush_KvsEntry_DoNotUse> entry;
    for (::google::protobuf::Map< ::std::string, ::data::VALUE >::const_iterator
        it = this->kvs().begin();
        it != this->kvs().end(); ++it) {
      entry.reset(kvs_.NewEntryWrapper(it->first, it->second));
      total_size += ::google::protobuf::internal::WireFormatLite::
          MessageSizeNoVirtual(*entry);
    }
  }

  // string key = 1;
  if (this->key().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->key());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void command_hmlpush::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:client.command_hmlpush)
  GOOGLE_DCHECK_NE(&from, this);
  const command_hmlpush* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const command_hmlpush>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:client.command_hmlpush)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:client.command_hmlpush)
    MergeFrom(*source);
  }
}

void command_hmlpush::MergeFrom(const command_hmlpush& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:client.command_hmlpush)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  kvs_.MergeFrom(from.kvs_);
  if (from.key().size() > 0) {

    key_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.key_);
  }
}

void command_hmlpush::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:client.command_hmlpush)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void command_hmlpush::CopyFrom(const command_hmlpush& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:client.command_hmlpush)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool command_hmlpush::IsInitialized() const {
  return true;
}

void command_hmlpush::Swap(command_hmlpush* other) {
  if (other == this) return;
  InternalSwap(other);
}
void command_hmlpush::InternalSwap(command_hmlpush* other) {
  using std::swap;
  kvs_.Swap(&other->kvs_);
  key_.Swap(&other->key_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata command_hmlpush::GetMetadata() const {
  protobuf_message_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_message_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

command_mhmlpush_KvsEntry_DoNotUse::command_mhmlpush_KvsEntry_DoNotUse() {}
command_mhmlpush_KvsEntry_DoNotUse::command_mhmlpush_KvsEntry_DoNotUse(::google::protobuf::Arena* arena) : SuperType(arena) {}
void command_mhmlpush_KvsEntry_DoNotUse::MergeFrom(const command_mhmlpush_KvsEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::google::protobuf::Metadata command_mhmlpush_KvsEntry_DoNotUse::GetMetadata() const {
  ::protobuf_message_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_message_2eproto::file_level_metadata[41];
}
void command_mhmlpush_KvsEntry_DoNotUse::MergeFrom(
    const ::google::protobuf::Message& other) {
  ::google::protobuf::Message::MergeFrom(other);
}


// ===================================================================

void command_mhmlpush::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int command_mhmlpush::kFieldsFieldNumber;
const int command_mhmlpush::kKvsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

command_mhmlpush::command_mhmlpush()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_message_2eproto::InitDefaultscommand_mhmlpush();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:client.command_mhmlpush)
}
command_mhmlpush::command_mhmlpush(const command_mhmlpush& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      fields_(from.fields_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  kvs_.MergeFrom(from.kvs_);
  // @@protoc_insertion_point(copy_constructor:client.command_mhmlpush)
}

void command_mhmlpush::SharedCtor() {
  _cached_size_ = 0;
}

command_mhmlpush::~command_mhmlpush() {
  // @@protoc_insertion_point(destructor:client.command_mhmlpush)
  SharedDtor();
}

void command_mhmlpush::SharedDtor() {
}

void command_mhmlpush::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* command_mhmlpush::descriptor() {
  ::protobuf_message_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_message_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const command_mhmlpush& command_mhmlpush::default_instance() {
  ::protobuf_message_2eproto::InitDefaultscommand_mhmlpush();
  return *internal_default_instance();
}

command_mhmlpush* command_mhmlpush::New(::google::protobuf::Arena* arena) const {
  command_mhmlpush* n = new command_mhmlpush;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void command_mhmlpush::Clear() {
// @@protoc_insertion_point(message_clear_start:client.command_mhmlpush)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  fields_.Clear();
  kvs_.Clear();
  _internal_metadata_.Clear();
}

bool command_mhmlpush::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:client.command_mhmlpush)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated string fields = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_fields()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->fields(this->fields_size() - 1).data(),
            static_cast<int>(this->fields(this->fields_size() - 1).length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "client.command_mhmlpush.fields"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // map<string, .client.values_type> kvs = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          command_mhmlpush_KvsEntry_DoNotUse::Parser< ::google::protobuf::internal::MapField<
              command_mhmlpush_KvsEntry_DoNotUse,
              ::std::string, ::client::values_type,
              ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
              ::google::protobuf::internal::WireFormatLite::TYPE_MESSAGE,
              0 >,
            ::google::protobuf::Map< ::std::string, ::client::values_type > > parser(&kvs_);
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
              input, &parser));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            parser.key().data(), static_cast<int>(parser.key().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "client.command_mhmlpush.KvsEntry.key"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:client.command_mhmlpush)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:client.command_mhmlpush)
  return false;
#undef DO_
}

void command_mhmlpush::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:client.command_mhmlpush)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated string fields = 1;
  for (int i = 0, n = this->fields_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->fields(i).data(), static_cast<int>(this->fields(i).length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "client.command_mhmlpush.fields");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->fields(i), output);
  }

  // map<string, .client.values_type> kvs = 2;
  if (!this->kvs().empty()) {
    typedef ::google::protobuf::Map< ::std::string, ::client::values_type >::const_pointer
        ConstPtr;
    typedef ConstPtr SortItem;
    typedef ::google::protobuf::internal::CompareByDerefFirst<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
          p->first.data(), static_cast<int>(p->first.length()),
          ::google::protobuf::internal::WireFormatLite::SERIALIZE,
          "client.command_mhmlpush.KvsEntry.key");
      }
    };

    if (output->IsSerializationDeterministic() &&
        this->kvs().size() > 1) {
      ::google::protobuf::scoped_array<SortItem> items(
          new SortItem[this->kvs().size()]);
      typedef ::google::protobuf::Map< ::std::string, ::client::values_type >::size_type size_type;
      size_type n = 0;
      for (::google::protobuf::Map< ::std::string, ::client::values_type >::const_iterator
          it = this->kvs().begin();
          it != this->kvs().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      ::google::protobuf::scoped_ptr<command_mhmlpush_KvsEntry_DoNotUse> entry;
      for (size_type i = 0; i < n; i++) {
        entry.reset(kvs_.NewEntryWrapper(
            items[static_cast<ptrdiff_t>(i)]->first, items[static_cast<ptrdiff_t>(i)]->second));
        ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
            2, *entry, output);
        Utf8Check::Check(items[static_cast<ptrdiff_t>(i)]);
      }
    } else {
      ::google::protobuf::scoped_ptr<command_mhmlpush_KvsEntry_DoNotUse> entry;
      for (::google::protobuf::Map< ::std::string, ::client::values_type >::const_iterator
          it = this->kvs().begin();
          it != this->kvs().end(); ++it) {
        entry.reset(kvs_.NewEntryWrapper(
            it->first, it->second));
        ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
            2, *entry, output);
        Utf8Check::Check(&*it);
      }
    }
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:client.command_mhmlpush)
}

::google::protobuf::uint8* command_mhmlpush::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:client.command_mhmlpush)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated string fields = 1;
  for (int i = 0, n = this->fields_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->fields(i).data(), static_cast<int>(this->fields(i).length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "client.command_mhmlpush.fields");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(1, this->fields(i), target);
  }

  // map<string, .client.values_type> kvs = 2;
  if (!this->kvs().empty()) {
    typedef ::google::protobuf::Map< ::std::string, ::client::values_type >::const_pointer
        ConstPtr;
    typedef ConstPtr SortItem;
    typedef ::google::protobuf::internal::CompareByDerefFirst<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
          p->first.data(), static_cast<int>(p->first.length()),
          ::google::protobuf::internal::WireFormatLite::SERIALIZE,
          "client.command_mhmlpush.KvsEntry.key");
      }
    };

    if (deterministic &&
        this->kvs().size() > 1) {
      ::google::protobuf::scoped_array<SortItem> items(
          new SortItem[this->kvs().size()]);
      typedef ::google::protobuf::Map< ::std::string, ::client::values_type >::size_type size_type;
      size_type n = 0;
      for (::google::protobuf::Map< ::std::string, ::client::values_type >::const_iterator
          it = this->kvs().begin();
          it != this->kvs().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      ::google::protobuf::scoped_ptr<command_mhmlpush_KvsEntry_DoNotUse> entry;
      for (size_type i = 0; i < n; i++) {
        entry.reset(kvs_.NewEntryWrapper(
            items[static_cast<ptrdiff_t>(i)]->first, items[static_cast<ptrdiff_t>(i)]->second));
        target = ::google::protobuf::internal::WireFormatLite::
                   InternalWriteMessageNoVirtualToArray(
                       2, *entry, deterministic, target);
;
        Utf8Check::Check(items[static_cast<ptrdiff_t>(i)]);
      }
    } else {
      ::google::protobuf::scoped_ptr<command_mhmlpush_KvsEntry_DoNotUse> entry;
      for (::google::protobuf::Map< ::std::string, ::client::values_type >::const_iterator
          it = this->kvs().begin();
          it != this->kvs().end(); ++it) {
        entry.reset(kvs_.NewEntryWrapper(
            it->first, it->second));
        target = ::google::protobuf::internal::WireFormatLite::
                   InternalWriteMessageNoVirtualToArray(
                       2, *entry, deterministic, target);
;
        Utf8Check::Check(&*it);
      }
    }
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:client.command_mhmlpush)
  return target;
}

size_t command_mhmlpush::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:client.command_mhmlpush)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // repeated string fields = 1;
  total_size += 1 *
      ::google::protobuf::internal::FromIntSize(this->fields_size());
  for (int i = 0, n = this->fields_size(); i < n; i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->fields(i));
  }

  // map<string, .client.values_type> kvs = 2;
  total_size += 1 *
      ::google::protobuf::internal::FromIntSize(this->kvs_size());
  {
    ::google::protobuf::scoped_ptr<command_mhmlpush_KvsEntry_DoNotUse> entry;
    for (::google::protobuf::Map< ::std::string, ::client::values_type >::const_iterator
        it = this->kvs().begin();
        it != this->kvs().end(); ++it) {
      entry.reset(kvs_.NewEntryWrapper(it->first, it->second));
      total_size += ::google::protobuf::internal::WireFormatLite::
          MessageSizeNoVirtual(*entry);
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void command_mhmlpush::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:client.command_mhmlpush)
  GOOGLE_DCHECK_NE(&from, this);
  const command_mhmlpush* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const command_mhmlpush>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:client.command_mhmlpush)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:client.command_mhmlpush)
    MergeFrom(*source);
  }
}

void command_mhmlpush::MergeFrom(const command_mhmlpush& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:client.command_mhmlpush)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  fields_.MergeFrom(from.fields_);
  kvs_.MergeFrom(from.kvs_);
}

void command_mhmlpush::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:client.command_mhmlpush)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void command_mhmlpush::CopyFrom(const command_mhmlpush& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:client.command_mhmlpush)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool command_mhmlpush::IsInitialized() const {
  return true;
}

void command_mhmlpush::Swap(command_mhmlpush* other) {
  if (other == this) return;
  InternalSwap(other);
}
void command_mhmlpush::InternalSwap(command_mhmlpush* other) {
  using std::swap;
  fields_.InternalSwap(&other->fields_);
  kvs_.Swap(&other->kvs_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata command_mhmlpush::GetMetadata() const {
  protobuf_message_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_message_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void command_lrange::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int command_lrange::kKeyFieldNumber;
const int command_lrange::kStartFieldNumber;
const int command_lrange::kStopFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

command_lrange::command_lrange()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_message_2eproto::InitDefaultscommand_lrange();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:client.command_lrange)
}
command_lrange::command_lrange(const command_lrange& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  key_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.key().size() > 0) {
    key_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.key_);
  }
  ::memcpy(&start_, &from.start_,
    static_cast<size_t>(reinterpret_cast<char*>(&stop_) -
    reinterpret_cast<char*>(&start_)) + sizeof(stop_));
  // @@protoc_insertion_point(copy_constructor:client.command_lrange)
}

void command_lrange::SharedCtor() {
  key_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&start_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&stop_) -
      reinterpret_cast<char*>(&start_)) + sizeof(stop_));
  _cached_size_ = 0;
}

command_lrange::~command_lrange() {
  // @@protoc_insertion_point(destructor:client.command_lrange)
  SharedDtor();
}

void command_lrange::SharedDtor() {
  key_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void command_lrange::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* command_lrange::descriptor() {
  ::protobuf_message_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_message_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const command_lrange& command_lrange::default_instance() {
  ::protobuf_message_2eproto::InitDefaultscommand_lrange();
  return *internal_default_instance();
}

command_lrange* command_lrange::New(::google::protobuf::Arena* arena) const {
  command_lrange* n = new command_lrange;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void command_lrange::Clear() {
// @@protoc_insertion_point(message_clear_start:client.command_lrange)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  key_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&start_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&stop_) -
      reinterpret_cast<char*>(&start_)) + sizeof(stop_));
  _internal_metadata_.Clear();
}

bool command_lrange::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:client.command_lrange)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string key = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_key()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->key().data(), static_cast<int>(this->key().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "client.command_lrange.key"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 start = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &start_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 stop = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &stop_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:client.command_lrange)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:client.command_lrange)
  return false;
#undef DO_
}

void command_lrange::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:client.command_lrange)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string key = 1;
  if (this->key().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->key().data(), static_cast<int>(this->key().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "client.command_lrange.key");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->key(), output);
  }

  // int32 start = 2;
  if (this->start() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->start(), output);
  }

  // int32 stop = 3;
  if (this->stop() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->stop(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:client.command_lrange)
}

::google::protobuf::uint8* command_lrange::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:client.command_lrange)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string key = 1;
  if (this->key().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->key().data(), static_cast<int>(this->key().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "client.command_lrange.key");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->key(), target);
  }

  // int32 start = 2;
  if (this->start() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->start(), target);
  }

  // int32 stop = 3;
  if (this->stop() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->stop(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:client.command_lrange)
  return target;
}

size_t command_lrange::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:client.command_lrange)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // string key = 1;
  if (this->key().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->key());
  }

  // int32 start = 2;
  if (this->start() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->start());
  }

  // int32 stop = 3;
  if (this->stop() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->stop());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void command_lrange::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:client.command_lrange)
  GOOGLE_DCHECK_NE(&from, this);
  const command_lrange* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const command_lrange>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:client.command_lrange)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:client.command_lrange)
    MergeFrom(*source);
  }
}

void command_lrange::MergeFrom(const command_lrange& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:client.command_lrange)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.key().size() > 0) {

    key_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.key_);
  }
  if (from.start() != 0) {
    set_start(from.start());
  }
  if (from.stop() != 0) {
    set_stop(from.stop());
  }
}

void command_lrange::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:client.command_lrange)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void command_lrange::CopyFrom(const command_lrange& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:client.command_lrange)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool command_lrange::IsInitialized() const {
  return true;
}

void command_lrange::Swap(command_lrange* other) {
  if (other == this) return;
  InternalSwap(other);
}
void command_lrange::InternalSwap(command_lrange* other) {
  using std::swap;
  key_.Swap(&other->key_);
  swap(start_, other->start_);
  swap(stop_, other->stop_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata command_lrange::GetMetadata() const {
  protobuf_message_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_message_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void command_lrange_reply::InitAsDefaultInstance() {
  ::client::_command_lrange_reply_default_instance_._instance.get_mutable()->state_ = const_cast< ::client::command_reply*>(
      ::client::command_reply::internal_default_instance());
  ::client::_command_lrange_reply_default_instance_._instance.get_mutable()->data_ = const_cast< ::data::VALUE*>(
      ::data::VALUE::internal_default_instance());
}
void command_lrange_reply::clear_data() {
  if (GetArenaNoVirtual() == NULL && data_ != NULL) {
    delete data_;
  }
  data_ = NULL;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int command_lrange_reply::kStateFieldNumber;
const int command_lrange_reply::kDataFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

command_lrange_reply::command_lrange_reply()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_message_2eproto::InitDefaultscommand_lrange_reply();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:client.command_lrange_reply)
}
command_lrange_reply::command_lrange_reply(const command_lrange_reply& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_state()) {
    state_ = new ::client::command_reply(*from.state_);
  } else {
    state_ = NULL;
  }
  if (from.has_data()) {
    data_ = new ::data::VALUE(*from.data_);
  } else {
    data_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:client.command_lrange_reply)
}

void command_lrange_reply::SharedCtor() {
  ::memset(&state_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&data_) -
      reinterpret_cast<char*>(&state_)) + sizeof(data_));
  _cached_size_ = 0;
}

command_lrange_reply::~command_lrange_reply() {
  // @@protoc_insertion_point(destructor:client.command_lrange_reply)
  SharedDtor();
}

void command_lrange_reply::SharedDtor() {
  if (this != internal_default_instance()) delete state_;
  if (this != internal_default_instance()) delete data_;
}

void command_lrange_reply::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* command_lrange_reply::descriptor() {
  ::protobuf_message_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_message_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const command_lrange_reply& command_lrange_reply::default_instance() {
  ::protobuf_message_2eproto::InitDefaultscommand_lrange_reply();
  return *internal_default_instance();
}

command_lrange_reply* command_lrange_reply::New(::google::protobuf::Arena* arena) const {
  command_lrange_reply* n = new command_lrange_reply;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void command_lrange_reply::Clear() {
// @@protoc_insertion_point(message_clear_start:client.command_lrange_reply)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == NULL && state_ != NULL) {
    delete state_;
  }
  state_ = NULL;
  if (GetArenaNoVirtual() == NULL && data_ != NULL) {
    delete data_;
  }
  data_ = NULL;
  _internal_metadata_.Clear();
}

bool command_lrange_reply::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:client.command_lrange_reply)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .client.command_reply state = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_state()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .data.VALUE data = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_data()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:client.command_lrange_reply)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:client.command_lrange_reply)
  return false;
#undef DO_
}

void command_lrange_reply::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:client.command_lrange_reply)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .client.command_reply state = 1;
  if (this->has_state()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->state_, output);
  }

  // .data.VALUE data = 2;
  if (this->has_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->data_, output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:client.command_lrange_reply)
}

::google::protobuf::uint8* command_lrange_reply::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:client.command_lrange_reply)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .client.command_reply state = 1;
  if (this->has_state()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, *this->state_, deterministic, target);
  }

  // .data.VALUE data = 2;
  if (this->has_data()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, *this->data_, deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:client.command_lrange_reply)
  return target;
}

size_t command_lrange_reply::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:client.command_lrange_reply)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // .client.command_reply state = 1;
  if (this->has_state()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->state_);
  }

  // .data.VALUE data = 2;
  if (this->has_data()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->data_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void command_lrange_reply::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:client.command_lrange_reply)
  GOOGLE_DCHECK_NE(&from, this);
  const command_lrange_reply* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const command_lrange_reply>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:client.command_lrange_reply)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:client.command_lrange_reply)
    MergeFrom(*source);
  }
}

void command_lrange_reply::MergeFrom(const command_lrange_reply& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:client.command_lrange_reply)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_state()) {
    mutable_state()->::client::command_reply::MergeFrom(from.state());
  }
  if (from.has_data()) {
    mutable_data()->::data::VALUE::MergeFrom(from.data());
  }
}

void command_lrange_reply::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:client.command_lrange_reply)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void command_lrange_reply::CopyFrom(const command_lrange_reply& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:client.command_lrange_reply)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool command_lrange_reply::IsInitialized() const {
  return true;
}

void command_lrange_reply::Swap(command_lrange_reply* other) {
  if (other == this) return;
  InternalSwap(other);
}
void command_lrange_reply::InternalSwap(command_lrange_reply* other) {
  using std::swap;
  swap(state_, other->state_);
  swap(data_, other->data_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata command_lrange_reply::GetMetadata() const {
  protobuf_message_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_message_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void command_mlrange::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int command_mlrange::kKeysFieldNumber;
const int command_mlrange::kStartFieldNumber;
const int command_mlrange::kStopFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

command_mlrange::command_mlrange()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_message_2eproto::InitDefaultscommand_mlrange();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:client.command_mlrange)
}
command_mlrange::command_mlrange(const command_mlrange& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      keys_(from.keys_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&start_, &from.start_,
    static_cast<size_t>(reinterpret_cast<char*>(&stop_) -
    reinterpret_cast<char*>(&start_)) + sizeof(stop_));
  // @@protoc_insertion_point(copy_constructor:client.command_mlrange)
}

void command_mlrange::SharedCtor() {
  ::memset(&start_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&stop_) -
      reinterpret_cast<char*>(&start_)) + sizeof(stop_));
  _cached_size_ = 0;
}

command_mlrange::~command_mlrange() {
  // @@protoc_insertion_point(destructor:client.command_mlrange)
  SharedDtor();
}

void command_mlrange::SharedDtor() {
}

void command_mlrange::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* command_mlrange::descriptor() {
  ::protobuf_message_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_message_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const command_mlrange& command_mlrange::default_instance() {
  ::protobuf_message_2eproto::InitDefaultscommand_mlrange();
  return *internal_default_instance();
}

command_mlrange* command_mlrange::New(::google::protobuf::Arena* arena) const {
  command_mlrange* n = new command_mlrange;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void command_mlrange::Clear() {
// @@protoc_insertion_point(message_clear_start:client.command_mlrange)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  keys_.Clear();
  ::memset(&start_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&stop_) -
      reinterpret_cast<char*>(&start_)) + sizeof(stop_));
  _internal_metadata_.Clear();
}

bool command_mlrange::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:client.command_mlrange)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated string keys = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_keys()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->keys(this->keys_size() - 1).data(),
            static_cast<int>(this->keys(this->keys_size() - 1).length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "client.command_mlrange.keys"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 start = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &start_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 stop = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &stop_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:client.command_mlrange)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:client.command_mlrange)
  return false;
#undef DO_
}

void command_mlrange::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:client.command_mlrange)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated string keys = 1;
  for (int i = 0, n = this->keys_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->keys(i).data(), static_cast<int>(this->keys(i).length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "client.command_mlrange.keys");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->keys(i), output);
  }

  // int32 start = 2;
  if (this->start() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->start(), output);
  }

  // int32 stop = 3;
  if (this->stop() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->stop(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:client.command_mlrange)
}

::google::protobuf::uint8* command_mlrange::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:client.command_mlrange)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated string keys = 1;
  for (int i = 0, n = this->keys_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->keys(i).data(), static_cast<int>(this->keys(i).length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "client.command_mlrange.keys");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(1, this->keys(i), target);
  }

  // int32 start = 2;
  if (this->start() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->start(), target);
  }

  // int32 stop = 3;
  if (this->stop() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->stop(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:client.command_mlrange)
  return target;
}

size_t command_mlrange::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:client.command_mlrange)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // repeated string keys = 1;
  total_size += 1 *
      ::google::protobuf::internal::FromIntSize(this->keys_size());
  for (int i = 0, n = this->keys_size(); i < n; i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->keys(i));
  }

  // int32 start = 2;
  if (this->start() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->start());
  }

  // int32 stop = 3;
  if (this->stop() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->stop());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void command_mlrange::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:client.command_mlrange)
  GOOGLE_DCHECK_NE(&from, this);
  const command_mlrange* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const command_mlrange>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:client.command_mlrange)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:client.command_mlrange)
    MergeFrom(*source);
  }
}

void command_mlrange::MergeFrom(const command_mlrange& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:client.command_mlrange)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  keys_.MergeFrom(from.keys_);
  if (from.start() != 0) {
    set_start(from.start());
  }
  if (from.stop() != 0) {
    set_stop(from.stop());
  }
}

void command_mlrange::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:client.command_mlrange)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void command_mlrange::CopyFrom(const command_mlrange& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:client.command_mlrange)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool command_mlrange::IsInitialized() const {
  return true;
}

void command_mlrange::Swap(command_mlrange* other) {
  if (other == this) return;
  InternalSwap(other);
}
void command_mlrange::InternalSwap(command_mlrange* other) {
  using std::swap;
  keys_.InternalSwap(&other->keys_);
  swap(start_, other->start_);
  swap(stop_, other->stop_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata command_mlrange::GetMetadata() const {
  protobuf_message_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_message_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void command_mlrange_reply::InitAsDefaultInstance() {
  ::client::_command_mlrange_reply_default_instance_._instance.get_mutable()->state_ = const_cast< ::client::command_reply*>(
      ::client::command_reply::internal_default_instance());
}
void command_mlrange_reply::clear_data() {
  data_.Clear();
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int command_mlrange_reply::kStateFieldNumber;
const int command_mlrange_reply::kDataFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

command_mlrange_reply::command_mlrange_reply()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_message_2eproto::InitDefaultscommand_mlrange_reply();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:client.command_mlrange_reply)
}
command_mlrange_reply::command_mlrange_reply(const command_mlrange_reply& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      data_(from.data_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_state()) {
    state_ = new ::client::command_reply(*from.state_);
  } else {
    state_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:client.command_mlrange_reply)
}

void command_mlrange_reply::SharedCtor() {
  state_ = NULL;
  _cached_size_ = 0;
}

command_mlrange_reply::~command_mlrange_reply() {
  // @@protoc_insertion_point(destructor:client.command_mlrange_reply)
  SharedDtor();
}

void command_mlrange_reply::SharedDtor() {
  if (this != internal_default_instance()) delete state_;
}

void command_mlrange_reply::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* command_mlrange_reply::descriptor() {
  ::protobuf_message_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_message_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const command_mlrange_reply& command_mlrange_reply::default_instance() {
  ::protobuf_message_2eproto::InitDefaultscommand_mlrange_reply();
  return *internal_default_instance();
}

command_mlrange_reply* command_mlrange_reply::New(::google::protobuf::Arena* arena) const {
  command_mlrange_reply* n = new command_mlrange_reply;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void command_mlrange_reply::Clear() {
// @@protoc_insertion_point(message_clear_start:client.command_mlrange_reply)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  data_.Clear();
  if (GetArenaNoVirtual() == NULL && state_ != NULL) {
    delete state_;
  }
  state_ = NULL;
  _internal_metadata_.Clear();
}

bool command_mlrange_reply::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:client.command_mlrange_reply)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .client.command_reply state = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_state()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .data.VALUE data = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(input, add_data()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:client.command_mlrange_reply)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:client.command_mlrange_reply)
  return false;
#undef DO_
}

void command_mlrange_reply::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:client.command_mlrange_reply)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .client.command_reply state = 1;
  if (this->has_state()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->state_, output);
  }

  // repeated .data.VALUE data = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->data_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->data(static_cast<int>(i)), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:client.command_mlrange_reply)
}

::google::protobuf::uint8* command_mlrange_reply::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:client.command_mlrange_reply)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .client.command_reply state = 1;
  if (this->has_state()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, *this->state_, deterministic, target);
  }

  // repeated .data.VALUE data = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->data_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, this->data(static_cast<int>(i)), deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:client.command_mlrange_reply)
  return target;
}

size_t command_mlrange_reply::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:client.command_mlrange_reply)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // repeated .data.VALUE data = 2;
  {
    unsigned int count = static_cast<unsigned int>(this->data_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->data(static_cast<int>(i)));
    }
  }

  // .client.command_reply state = 1;
  if (this->has_state()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->state_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void command_mlrange_reply::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:client.command_mlrange_reply)
  GOOGLE_DCHECK_NE(&from, this);
  const command_mlrange_reply* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const command_mlrange_reply>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:client.command_mlrange_reply)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:client.command_mlrange_reply)
    MergeFrom(*source);
  }
}

void command_mlrange_reply::MergeFrom(const command_mlrange_reply& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:client.command_mlrange_reply)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  data_.MergeFrom(from.data_);
  if (from.has_state()) {
    mutable_state()->::client::command_reply::MergeFrom(from.state());
  }
}

void command_mlrange_reply::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:client.command_mlrange_reply)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void command_mlrange_reply::CopyFrom(const command_mlrange_reply& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:client.command_mlrange_reply)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool command_mlrange_reply::IsInitialized() const {
  return true;
}

void command_mlrange_reply::Swap(command_mlrange_reply* other) {
  if (other == this) return;
  InternalSwap(other);
}
void command_mlrange_reply::InternalSwap(command_mlrange_reply* other) {
  using std::swap;
  data_.InternalSwap(&other->data_);
  swap(state_, other->state_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata command_mlrange_reply::GetMetadata() const {
  protobuf_message_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_message_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void command_hlrange::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int command_hlrange::kKeyFieldNumber;
const int command_hlrange::kFieldFieldNumber;
const int command_hlrange::kStartFieldNumber;
const int command_hlrange::kStopFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

command_hlrange::command_hlrange()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_message_2eproto::InitDefaultscommand_hlrange();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:client.command_hlrange)
}
command_hlrange::command_hlrange(const command_hlrange& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  key_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.key().size() > 0) {
    key_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.key_);
  }
  field_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.field().size() > 0) {
    field_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.field_);
  }
  ::memcpy(&start_, &from.start_,
    static_cast<size_t>(reinterpret_cast<char*>(&stop_) -
    reinterpret_cast<char*>(&start_)) + sizeof(stop_));
  // @@protoc_insertion_point(copy_constructor:client.command_hlrange)
}

void command_hlrange::SharedCtor() {
  key_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  field_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&start_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&stop_) -
      reinterpret_cast<char*>(&start_)) + sizeof(stop_));
  _cached_size_ = 0;
}

command_hlrange::~command_hlrange() {
  // @@protoc_insertion_point(destructor:client.command_hlrange)
  SharedDtor();
}

void command_hlrange::SharedDtor() {
  key_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  field_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void command_hlrange::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* command_hlrange::descriptor() {
  ::protobuf_message_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_message_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const command_hlrange& command_hlrange::default_instance() {
  ::protobuf_message_2eproto::InitDefaultscommand_hlrange();
  return *internal_default_instance();
}

command_hlrange* command_hlrange::New(::google::protobuf::Arena* arena) const {
  command_hlrange* n = new command_hlrange;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void command_hlrange::Clear() {
// @@protoc_insertion_point(message_clear_start:client.command_hlrange)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  key_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  field_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&start_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&stop_) -
      reinterpret_cast<char*>(&start_)) + sizeof(stop_));
  _internal_metadata_.Clear();
}

bool command_hlrange::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:client.command_hlrange)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string key = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_key()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->key().data(), static_cast<int>(this->key().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "client.command_hlrange.key"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string field = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_field()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->field().data(), static_cast<int>(this->field().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "client.command_hlrange.field"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 start = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &start_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 stop = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &stop_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:client.command_hlrange)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:client.command_hlrange)
  return false;
#undef DO_
}

void command_hlrange::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:client.command_hlrange)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string key = 1;
  if (this->key().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->key().data(), static_cast<int>(this->key().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "client.command_hlrange.key");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->key(), output);
  }

  // string field = 2;
  if (this->field().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->field().data(), static_cast<int>(this->field().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "client.command_hlrange.field");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->field(), output);
  }

  // int32 start = 3;
  if (this->start() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->start(), output);
  }

  // int32 stop = 4;
  if (this->stop() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->stop(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:client.command_hlrange)
}

::google::protobuf::uint8* command_hlrange::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:client.command_hlrange)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string key = 1;
  if (this->key().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->key().data(), static_cast<int>(this->key().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "client.command_hlrange.key");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->key(), target);
  }

  // string field = 2;
  if (this->field().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->field().data(), static_cast<int>(this->field().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "client.command_hlrange.field");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->field(), target);
  }

  // int32 start = 3;
  if (this->start() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->start(), target);
  }

  // int32 stop = 4;
  if (this->stop() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->stop(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:client.command_hlrange)
  return target;
}

size_t command_hlrange::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:client.command_hlrange)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // string key = 1;
  if (this->key().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->key());
  }

  // string field = 2;
  if (this->field().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->field());
  }

  // int32 start = 3;
  if (this->start() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->start());
  }

  // int32 stop = 4;
  if (this->stop() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->stop());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void command_hlrange::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:client.command_hlrange)
  GOOGLE_DCHECK_NE(&from, this);
  const command_hlrange* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const command_hlrange>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:client.command_hlrange)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:client.command_hlrange)
    MergeFrom(*source);
  }
}

void command_hlrange::MergeFrom(const command_hlrange& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:client.command_hlrange)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.key().size() > 0) {

    key_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.key_);
  }
  if (from.field().size() > 0) {

    field_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.field_);
  }
  if (from.start() != 0) {
    set_start(from.start());
  }
  if (from.stop() != 0) {
    set_stop(from.stop());
  }
}

void command_hlrange::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:client.command_hlrange)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void command_hlrange::CopyFrom(const command_hlrange& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:client.command_hlrange)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool command_hlrange::IsInitialized() const {
  return true;
}

void command_hlrange::Swap(command_hlrange* other) {
  if (other == this) return;
  InternalSwap(other);
}
void command_hlrange::InternalSwap(command_hlrange* other) {
  using std::swap;
  key_.Swap(&other->key_);
  field_.Swap(&other->field_);
  swap(start_, other->start_);
  swap(stop_, other->stop_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata command_hlrange::GetMetadata() const {
  protobuf_message_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_message_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void command_hlrange_reply::InitAsDefaultInstance() {
  ::client::_command_hlrange_reply_default_instance_._instance.get_mutable()->state_ = const_cast< ::client::command_reply*>(
      ::client::command_reply::internal_default_instance());
  ::client::_command_hlrange_reply_default_instance_._instance.get_mutable()->value_ = const_cast< ::data::VALUE*>(
      ::data::VALUE::internal_default_instance());
}
void command_hlrange_reply::clear_value() {
  if (GetArenaNoVirtual() == NULL && value_ != NULL) {
    delete value_;
  }
  value_ = NULL;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int command_hlrange_reply::kStateFieldNumber;
const int command_hlrange_reply::kValueFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

command_hlrange_reply::command_hlrange_reply()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_message_2eproto::InitDefaultscommand_hlrange_reply();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:client.command_hlrange_reply)
}
command_hlrange_reply::command_hlrange_reply(const command_hlrange_reply& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_state()) {
    state_ = new ::client::command_reply(*from.state_);
  } else {
    state_ = NULL;
  }
  if (from.has_value()) {
    value_ = new ::data::VALUE(*from.value_);
  } else {
    value_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:client.command_hlrange_reply)
}

void command_hlrange_reply::SharedCtor() {
  ::memset(&state_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&value_) -
      reinterpret_cast<char*>(&state_)) + sizeof(value_));
  _cached_size_ = 0;
}

command_hlrange_reply::~command_hlrange_reply() {
  // @@protoc_insertion_point(destructor:client.command_hlrange_reply)
  SharedDtor();
}

void command_hlrange_reply::SharedDtor() {
  if (this != internal_default_instance()) delete state_;
  if (this != internal_default_instance()) delete value_;
}

void command_hlrange_reply::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* command_hlrange_reply::descriptor() {
  ::protobuf_message_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_message_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const command_hlrange_reply& command_hlrange_reply::default_instance() {
  ::protobuf_message_2eproto::InitDefaultscommand_hlrange_reply();
  return *internal_default_instance();
}

command_hlrange_reply* command_hlrange_reply::New(::google::protobuf::Arena* arena) const {
  command_hlrange_reply* n = new command_hlrange_reply;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void command_hlrange_reply::Clear() {
// @@protoc_insertion_point(message_clear_start:client.command_hlrange_reply)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == NULL && state_ != NULL) {
    delete state_;
  }
  state_ = NULL;
  if (GetArenaNoVirtual() == NULL && value_ != NULL) {
    delete value_;
  }
  value_ = NULL;
  _internal_metadata_.Clear();
}

bool command_hlrange_reply::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:client.command_hlrange_reply)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .client.command_reply state = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_state()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .data.VALUE value = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_value()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:client.command_hlrange_reply)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:client.command_hlrange_reply)
  return false;
#undef DO_
}

void command_hlrange_reply::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:client.command_hlrange_reply)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .client.command_reply state = 1;
  if (this->has_state()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->state_, output);
  }

  // .data.VALUE value = 2;
  if (this->has_value()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->value_, output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:client.command_hlrange_reply)
}

::google::protobuf::uint8* command_hlrange_reply::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:client.command_hlrange_reply)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .client.command_reply state = 1;
  if (this->has_state()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, *this->state_, deterministic, target);
  }

  // .data.VALUE value = 2;
  if (this->has_value()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, *this->value_, deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:client.command_hlrange_reply)
  return target;
}

size_t command_hlrange_reply::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:client.command_hlrange_reply)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // .client.command_reply state = 1;
  if (this->has_state()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->state_);
  }

  // .data.VALUE value = 2;
  if (this->has_value()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->value_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void command_hlrange_reply::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:client.command_hlrange_reply)
  GOOGLE_DCHECK_NE(&from, this);
  const command_hlrange_reply* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const command_hlrange_reply>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:client.command_hlrange_reply)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:client.command_hlrange_reply)
    MergeFrom(*source);
  }
}

void command_hlrange_reply::MergeFrom(const command_hlrange_reply& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:client.command_hlrange_reply)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_state()) {
    mutable_state()->::client::command_reply::MergeFrom(from.state());
  }
  if (from.has_value()) {
    mutable_value()->::data::VALUE::MergeFrom(from.value());
  }
}

void command_hlrange_reply::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:client.command_hlrange_reply)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void command_hlrange_reply::CopyFrom(const command_hlrange_reply& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:client.command_hlrange_reply)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool command_hlrange_reply::IsInitialized() const {
  return true;
}

void command_hlrange_reply::Swap(command_hlrange_reply* other) {
  if (other == this) return;
  InternalSwap(other);
}
void command_hlrange_reply::InternalSwap(command_hlrange_reply* other) {
  using std::swap;
  swap(state_, other->state_);
  swap(value_, other->value_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata command_hlrange_reply::GetMetadata() const {
  protobuf_message_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_message_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void command_hmlrange::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int command_hmlrange::kKeyFieldNumber;
const int command_hmlrange::kFieldsFieldNumber;
const int command_hmlrange::kStartFieldNumber;
const int command_hmlrange::kStopFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

command_hmlrange::command_hmlrange()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_message_2eproto::InitDefaultscommand_hmlrange();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:client.command_hmlrange)
}
command_hmlrange::command_hmlrange(const command_hmlrange& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      fields_(from.fields_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  key_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.key().size() > 0) {
    key_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.key_);
  }
  ::memcpy(&start_, &from.start_,
    static_cast<size_t>(reinterpret_cast<char*>(&stop_) -
    reinterpret_cast<char*>(&start_)) + sizeof(stop_));
  // @@protoc_insertion_point(copy_constructor:client.command_hmlrange)
}

void command_hmlrange::SharedCtor() {
  key_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&start_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&stop_) -
      reinterpret_cast<char*>(&start_)) + sizeof(stop_));
  _cached_size_ = 0;
}

command_hmlrange::~command_hmlrange() {
  // @@protoc_insertion_point(destructor:client.command_hmlrange)
  SharedDtor();
}

void command_hmlrange::SharedDtor() {
  key_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void command_hmlrange::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* command_hmlrange::descriptor() {
  ::protobuf_message_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_message_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const command_hmlrange& command_hmlrange::default_instance() {
  ::protobuf_message_2eproto::InitDefaultscommand_hmlrange();
  return *internal_default_instance();
}

command_hmlrange* command_hmlrange::New(::google::protobuf::Arena* arena) const {
  command_hmlrange* n = new command_hmlrange;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void command_hmlrange::Clear() {
// @@protoc_insertion_point(message_clear_start:client.command_hmlrange)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  fields_.Clear();
  key_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&start_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&stop_) -
      reinterpret_cast<char*>(&start_)) + sizeof(stop_));
  _internal_metadata_.Clear();
}

bool command_hmlrange::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:client.command_hmlrange)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string key = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_key()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->key().data(), static_cast<int>(this->key().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "client.command_hmlrange.key"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated string fields = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_fields()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->fields(this->fields_size() - 1).data(),
            static_cast<int>(this->fields(this->fields_size() - 1).length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "client.command_hmlrange.fields"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 start = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &start_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 stop = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &stop_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:client.command_hmlrange)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:client.command_hmlrange)
  return false;
#undef DO_
}

void command_hmlrange::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:client.command_hmlrange)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string key = 1;
  if (this->key().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->key().data(), static_cast<int>(this->key().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "client.command_hmlrange.key");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->key(), output);
  }

  // repeated string fields = 2;
  for (int i = 0, n = this->fields_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->fields(i).data(), static_cast<int>(this->fields(i).length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "client.command_hmlrange.fields");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->fields(i), output);
  }

  // int32 start = 3;
  if (this->start() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->start(), output);
  }

  // int32 stop = 4;
  if (this->stop() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->stop(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:client.command_hmlrange)
}

::google::protobuf::uint8* command_hmlrange::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:client.command_hmlrange)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string key = 1;
  if (this->key().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->key().data(), static_cast<int>(this->key().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "client.command_hmlrange.key");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->key(), target);
  }

  // repeated string fields = 2;
  for (int i = 0, n = this->fields_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->fields(i).data(), static_cast<int>(this->fields(i).length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "client.command_hmlrange.fields");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(2, this->fields(i), target);
  }

  // int32 start = 3;
  if (this->start() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->start(), target);
  }

  // int32 stop = 4;
  if (this->stop() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->stop(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:client.command_hmlrange)
  return target;
}

size_t command_hmlrange::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:client.command_hmlrange)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // repeated string fields = 2;
  total_size += 1 *
      ::google::protobuf::internal::FromIntSize(this->fields_size());
  for (int i = 0, n = this->fields_size(); i < n; i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->fields(i));
  }

  // string key = 1;
  if (this->key().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->key());
  }

  // int32 start = 3;
  if (this->start() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->start());
  }

  // int32 stop = 4;
  if (this->stop() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->stop());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void command_hmlrange::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:client.command_hmlrange)
  GOOGLE_DCHECK_NE(&from, this);
  const command_hmlrange* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const command_hmlrange>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:client.command_hmlrange)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:client.command_hmlrange)
    MergeFrom(*source);
  }
}

void command_hmlrange::MergeFrom(const command_hmlrange& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:client.command_hmlrange)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  fields_.MergeFrom(from.fields_);
  if (from.key().size() > 0) {

    key_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.key_);
  }
  if (from.start() != 0) {
    set_start(from.start());
  }
  if (from.stop() != 0) {
    set_stop(from.stop());
  }
}

void command_hmlrange::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:client.command_hmlrange)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void command_hmlrange::CopyFrom(const command_hmlrange& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:client.command_hmlrange)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool command_hmlrange::IsInitialized() const {
  return true;
}

void command_hmlrange::Swap(command_hmlrange* other) {
  if (other == this) return;
  InternalSwap(other);
}
void command_hmlrange::InternalSwap(command_hmlrange* other) {
  using std::swap;
  fields_.InternalSwap(&other->fields_);
  key_.Swap(&other->key_);
  swap(start_, other->start_);
  swap(stop_, other->stop_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata command_hmlrange::GetMetadata() const {
  protobuf_message_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_message_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void command_hmlrange_reply::InitAsDefaultInstance() {
  ::client::_command_hmlrange_reply_default_instance_._instance.get_mutable()->state_ = const_cast< ::client::command_reply*>(
      ::client::command_reply::internal_default_instance());
}
void command_hmlrange_reply::clear_data() {
  data_.Clear();
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int command_hmlrange_reply::kStateFieldNumber;
const int command_hmlrange_reply::kDataFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

command_hmlrange_reply::command_hmlrange_reply()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_message_2eproto::InitDefaultscommand_hmlrange_reply();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:client.command_hmlrange_reply)
}
command_hmlrange_reply::command_hmlrange_reply(const command_hmlrange_reply& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      data_(from.data_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_state()) {
    state_ = new ::client::command_reply(*from.state_);
  } else {
    state_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:client.command_hmlrange_reply)
}

void command_hmlrange_reply::SharedCtor() {
  state_ = NULL;
  _cached_size_ = 0;
}

command_hmlrange_reply::~command_hmlrange_reply() {
  // @@protoc_insertion_point(destructor:client.command_hmlrange_reply)
  SharedDtor();
}

void command_hmlrange_reply::SharedDtor() {
  if (this != internal_default_instance()) delete state_;
}

void command_hmlrange_reply::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* command_hmlrange_reply::descriptor() {
  ::protobuf_message_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_message_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const command_hmlrange_reply& command_hmlrange_reply::default_instance() {
  ::protobuf_message_2eproto::InitDefaultscommand_hmlrange_reply();
  return *internal_default_instance();
}

command_hmlrange_reply* command_hmlrange_reply::New(::google::protobuf::Arena* arena) const {
  command_hmlrange_reply* n = new command_hmlrange_reply;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void command_hmlrange_reply::Clear() {
// @@protoc_insertion_point(message_clear_start:client.command_hmlrange_reply)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  data_.Clear();
  if (GetArenaNoVirtual() == NULL && state_ != NULL) {
    delete state_;
  }
  state_ = NULL;
  _internal_metadata_.Clear();
}

bool command_hmlrange_reply::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:client.command_hmlrange_reply)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .client.command_reply state = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_state()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .data.VALUE data = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(input, add_data()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:client.command_hmlrange_reply)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:client.command_hmlrange_reply)
  return false;
#undef DO_
}

void command_hmlrange_reply::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:client.command_hmlrange_reply)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .client.command_reply state = 1;
  if (this->has_state()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->state_, output);
  }

  // repeated .data.VALUE data = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->data_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->data(static_cast<int>(i)), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:client.command_hmlrange_reply)
}

::google::protobuf::uint8* command_hmlrange_reply::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:client.command_hmlrange_reply)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .client.command_reply state = 1;
  if (this->has_state()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, *this->state_, deterministic, target);
  }

  // repeated .data.VALUE data = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->data_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, this->data(static_cast<int>(i)), deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:client.command_hmlrange_reply)
  return target;
}

size_t command_hmlrange_reply::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:client.command_hmlrange_reply)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // repeated .data.VALUE data = 2;
  {
    unsigned int count = static_cast<unsigned int>(this->data_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->data(static_cast<int>(i)));
    }
  }

  // .client.command_reply state = 1;
  if (this->has_state()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->state_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void command_hmlrange_reply::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:client.command_hmlrange_reply)
  GOOGLE_DCHECK_NE(&from, this);
  const command_hmlrange_reply* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const command_hmlrange_reply>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:client.command_hmlrange_reply)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:client.command_hmlrange_reply)
    MergeFrom(*source);
  }
}

void command_hmlrange_reply::MergeFrom(const command_hmlrange_reply& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:client.command_hmlrange_reply)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  data_.MergeFrom(from.data_);
  if (from.has_state()) {
    mutable_state()->::client::command_reply::MergeFrom(from.state());
  }
}

void command_hmlrange_reply::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:client.command_hmlrange_reply)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void command_hmlrange_reply::CopyFrom(const command_hmlrange_reply& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:client.command_hmlrange_reply)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool command_hmlrange_reply::IsInitialized() const {
  return true;
}

void command_hmlrange_reply::Swap(command_hmlrange_reply* other) {
  if (other == this) return;
  InternalSwap(other);
}
void command_hmlrange_reply::InternalSwap(command_hmlrange_reply* other) {
  using std::swap;
  data_.InternalSwap(&other->data_);
  swap(state_, other->state_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata command_hmlrange_reply::GetMetadata() const {
  protobuf_message_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_message_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void command_mhmlrange::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int command_mhmlrange::kKeysFieldNumber;
const int command_mhmlrange::kFieldsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

command_mhmlrange::command_mhmlrange()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_message_2eproto::InitDefaultscommand_mhmlrange();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:client.command_mhmlrange)
}
command_mhmlrange::command_mhmlrange(const command_mhmlrange& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      keys_(from.keys_),
      fields_(from.fields_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:client.command_mhmlrange)
}

void command_mhmlrange::SharedCtor() {
  _cached_size_ = 0;
}

command_mhmlrange::~command_mhmlrange() {
  // @@protoc_insertion_point(destructor:client.command_mhmlrange)
  SharedDtor();
}

void command_mhmlrange::SharedDtor() {
}

void command_mhmlrange::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* command_mhmlrange::descriptor() {
  ::protobuf_message_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_message_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const command_mhmlrange& command_mhmlrange::default_instance() {
  ::protobuf_message_2eproto::InitDefaultscommand_mhmlrange();
  return *internal_default_instance();
}

command_mhmlrange* command_mhmlrange::New(::google::protobuf::Arena* arena) const {
  command_mhmlrange* n = new command_mhmlrange;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void command_mhmlrange::Clear() {
// @@protoc_insertion_point(message_clear_start:client.command_mhmlrange)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  keys_.Clear();
  fields_.Clear();
  _internal_metadata_.Clear();
}

bool command_mhmlrange::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:client.command_mhmlrange)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated string keys = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_keys()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->keys(this->keys_size() - 1).data(),
            static_cast<int>(this->keys(this->keys_size() - 1).length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "client.command_mhmlrange.keys"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated string fields = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_fields()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->fields(this->fields_size() - 1).data(),
            static_cast<int>(this->fields(this->fields_size() - 1).length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "client.command_mhmlrange.fields"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:client.command_mhmlrange)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:client.command_mhmlrange)
  return false;
#undef DO_
}

void command_mhmlrange::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:client.command_mhmlrange)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated string keys = 1;
  for (int i = 0, n = this->keys_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->keys(i).data(), static_cast<int>(this->keys(i).length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "client.command_mhmlrange.keys");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->keys(i), output);
  }

  // repeated string fields = 2;
  for (int i = 0, n = this->fields_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->fields(i).data(), static_cast<int>(this->fields(i).length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "client.command_mhmlrange.fields");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->fields(i), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:client.command_mhmlrange)
}

::google::protobuf::uint8* command_mhmlrange::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:client.command_mhmlrange)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated string keys = 1;
  for (int i = 0, n = this->keys_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->keys(i).data(), static_cast<int>(this->keys(i).length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "client.command_mhmlrange.keys");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(1, this->keys(i), target);
  }

  // repeated string fields = 2;
  for (int i = 0, n = this->fields_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->fields(i).data(), static_cast<int>(this->fields(i).length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "client.command_mhmlrange.fields");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(2, this->fields(i), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:client.command_mhmlrange)
  return target;
}

size_t command_mhmlrange::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:client.command_mhmlrange)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // repeated string keys = 1;
  total_size += 1 *
      ::google::protobuf::internal::FromIntSize(this->keys_size());
  for (int i = 0, n = this->keys_size(); i < n; i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->keys(i));
  }

  // repeated string fields = 2;
  total_size += 1 *
      ::google::protobuf::internal::FromIntSize(this->fields_size());
  for (int i = 0, n = this->fields_size(); i < n; i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->fields(i));
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void command_mhmlrange::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:client.command_mhmlrange)
  GOOGLE_DCHECK_NE(&from, this);
  const command_mhmlrange* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const command_mhmlrange>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:client.command_mhmlrange)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:client.command_mhmlrange)
    MergeFrom(*source);
  }
}

void command_mhmlrange::MergeFrom(const command_mhmlrange& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:client.command_mhmlrange)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  keys_.MergeFrom(from.keys_);
  fields_.MergeFrom(from.fields_);
}

void command_mhmlrange::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:client.command_mhmlrange)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void command_mhmlrange::CopyFrom(const command_mhmlrange& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:client.command_mhmlrange)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool command_mhmlrange::IsInitialized() const {
  return true;
}

void command_mhmlrange::Swap(command_mhmlrange* other) {
  if (other == this) return;
  InternalSwap(other);
}
void command_mhmlrange::InternalSwap(command_mhmlrange* other) {
  using std::swap;
  keys_.InternalSwap(&other->keys_);
  fields_.InternalSwap(&other->fields_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata command_mhmlrange::GetMetadata() const {
  protobuf_message_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_message_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void command_mhmlrange_reply::InitAsDefaultInstance() {
  ::client::_command_mhmlrange_reply_default_instance_._instance.get_mutable()->state_ = const_cast< ::client::command_reply*>(
      ::client::command_reply::internal_default_instance());
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int command_mhmlrange_reply::kStateFieldNumber;
const int command_mhmlrange_reply::kDataFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

command_mhmlrange_reply::command_mhmlrange_reply()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_message_2eproto::InitDefaultscommand_mhmlrange_reply();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:client.command_mhmlrange_reply)
}
command_mhmlrange_reply::command_mhmlrange_reply(const command_mhmlrange_reply& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      data_(from.data_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_state()) {
    state_ = new ::client::command_reply(*from.state_);
  } else {
    state_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:client.command_mhmlrange_reply)
}

void command_mhmlrange_reply::SharedCtor() {
  state_ = NULL;
  _cached_size_ = 0;
}

command_mhmlrange_reply::~command_mhmlrange_reply() {
  // @@protoc_insertion_point(destructor:client.command_mhmlrange_reply)
  SharedDtor();
}

void command_mhmlrange_reply::SharedDtor() {
  if (this != internal_default_instance()) delete state_;
}

void command_mhmlrange_reply::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* command_mhmlrange_reply::descriptor() {
  ::protobuf_message_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_message_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const command_mhmlrange_reply& command_mhmlrange_reply::default_instance() {
  ::protobuf_message_2eproto::InitDefaultscommand_mhmlrange_reply();
  return *internal_default_instance();
}

command_mhmlrange_reply* command_mhmlrange_reply::New(::google::protobuf::Arena* arena) const {
  command_mhmlrange_reply* n = new command_mhmlrange_reply;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void command_mhmlrange_reply::Clear() {
// @@protoc_insertion_point(message_clear_start:client.command_mhmlrange_reply)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  data_.Clear();
  if (GetArenaNoVirtual() == NULL && state_ != NULL) {
    delete state_;
  }
  state_ = NULL;
  _internal_metadata_.Clear();
}

bool command_mhmlrange_reply::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:client.command_mhmlrange_reply)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .client.command_reply state = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_state()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .client.values_type data = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(input, add_data()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:client.command_mhmlrange_reply)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:client.command_mhmlrange_reply)
  return false;
#undef DO_
}

void command_mhmlrange_reply::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:client.command_mhmlrange_reply)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .client.command_reply state = 1;
  if (this->has_state()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->state_, output);
  }

  // repeated .client.values_type data = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->data_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->data(static_cast<int>(i)), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:client.command_mhmlrange_reply)
}

::google::protobuf::uint8* command_mhmlrange_reply::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:client.command_mhmlrange_reply)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .client.command_reply state = 1;
  if (this->has_state()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, *this->state_, deterministic, target);
  }

  // repeated .client.values_type data = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->data_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, this->data(static_cast<int>(i)), deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:client.command_mhmlrange_reply)
  return target;
}

size_t command_mhmlrange_reply::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:client.command_mhmlrange_reply)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // repeated .client.values_type data = 2;
  {
    unsigned int count = static_cast<unsigned int>(this->data_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->data(static_cast<int>(i)));
    }
  }

  // .client.command_reply state = 1;
  if (this->has_state()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->state_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void command_mhmlrange_reply::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:client.command_mhmlrange_reply)
  GOOGLE_DCHECK_NE(&from, this);
  const command_mhmlrange_reply* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const command_mhmlrange_reply>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:client.command_mhmlrange_reply)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:client.command_mhmlrange_reply)
    MergeFrom(*source);
  }
}

void command_mhmlrange_reply::MergeFrom(const command_mhmlrange_reply& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:client.command_mhmlrange_reply)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  data_.MergeFrom(from.data_);
  if (from.has_state()) {
    mutable_state()->::client::command_reply::MergeFrom(from.state());
  }
}

void command_mhmlrange_reply::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:client.command_mhmlrange_reply)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void command_mhmlrange_reply::CopyFrom(const command_mhmlrange_reply& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:client.command_mhmlrange_reply)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool command_mhmlrange_reply::IsInitialized() const {
  return true;
}

void command_mhmlrange_reply::Swap(command_mhmlrange_reply* other) {
  if (other == this) return;
  InternalSwap(other);
}
void command_mhmlrange_reply::InternalSwap(command_mhmlrange_reply* other) {
  using std::swap;
  data_.InternalSwap(&other->data_);
  swap(state_, other->state_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata command_mhmlrange_reply::GetMetadata() const {
  protobuf_message_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_message_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void command_lpop::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int command_lpop::kKeyFieldNumber;
const int command_lpop::kHeadFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

command_lpop::command_lpop()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_message_2eproto::InitDefaultscommand_lpop();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:client.command_lpop)
}
command_lpop::command_lpop(const command_lpop& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  key_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.key().size() > 0) {
    key_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.key_);
  }
  head_ = from.head_;
  // @@protoc_insertion_point(copy_constructor:client.command_lpop)
}

void command_lpop::SharedCtor() {
  key_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  head_ = false;
  _cached_size_ = 0;
}

command_lpop::~command_lpop() {
  // @@protoc_insertion_point(destructor:client.command_lpop)
  SharedDtor();
}

void command_lpop::SharedDtor() {
  key_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void command_lpop::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* command_lpop::descriptor() {
  ::protobuf_message_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_message_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const command_lpop& command_lpop::default_instance() {
  ::protobuf_message_2eproto::InitDefaultscommand_lpop();
  return *internal_default_instance();
}

command_lpop* command_lpop::New(::google::protobuf::Arena* arena) const {
  command_lpop* n = new command_lpop;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void command_lpop::Clear() {
// @@protoc_insertion_point(message_clear_start:client.command_lpop)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  key_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  head_ = false;
  _internal_metadata_.Clear();
}

bool command_lpop::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:client.command_lpop)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string key = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_key()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->key().data(), static_cast<int>(this->key().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "client.command_lpop.key"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool head = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &head_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:client.command_lpop)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:client.command_lpop)
  return false;
#undef DO_
}

void command_lpop::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:client.command_lpop)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string key = 1;
  if (this->key().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->key().data(), static_cast<int>(this->key().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "client.command_lpop.key");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->key(), output);
  }

  // bool head = 2;
  if (this->head() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->head(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:client.command_lpop)
}

::google::protobuf::uint8* command_lpop::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:client.command_lpop)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string key = 1;
  if (this->key().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->key().data(), static_cast<int>(this->key().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "client.command_lpop.key");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->key(), target);
  }

  // bool head = 2;
  if (this->head() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->head(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:client.command_lpop)
  return target;
}

size_t command_lpop::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:client.command_lpop)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // string key = 1;
  if (this->key().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->key());
  }

  // bool head = 2;
  if (this->head() != 0) {
    total_size += 1 + 1;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void command_lpop::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:client.command_lpop)
  GOOGLE_DCHECK_NE(&from, this);
  const command_lpop* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const command_lpop>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:client.command_lpop)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:client.command_lpop)
    MergeFrom(*source);
  }
}

void command_lpop::MergeFrom(const command_lpop& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:client.command_lpop)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.key().size() > 0) {

    key_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.key_);
  }
  if (from.head() != 0) {
    set_head(from.head());
  }
}

void command_lpop::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:client.command_lpop)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void command_lpop::CopyFrom(const command_lpop& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:client.command_lpop)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool command_lpop::IsInitialized() const {
  return true;
}

void command_lpop::Swap(command_lpop* other) {
  if (other == this) return;
  InternalSwap(other);
}
void command_lpop::InternalSwap(command_lpop* other) {
  using std::swap;
  key_.Swap(&other->key_);
  swap(head_, other->head_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata command_lpop::GetMetadata() const {
  protobuf_message_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_message_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void command_lpop_reply::InitAsDefaultInstance() {
  ::client::_command_lpop_reply_default_instance_._instance.get_mutable()->state_ = const_cast< ::client::command_reply*>(
      ::client::command_reply::internal_default_instance());
  ::client::_command_lpop_reply_default_instance_._instance.get_mutable()->data_ = const_cast< ::data::VALUE*>(
      ::data::VALUE::internal_default_instance());
}
void command_lpop_reply::clear_data() {
  if (GetArenaNoVirtual() == NULL && data_ != NULL) {
    delete data_;
  }
  data_ = NULL;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int command_lpop_reply::kStateFieldNumber;
const int command_lpop_reply::kDataFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

command_lpop_reply::command_lpop_reply()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_message_2eproto::InitDefaultscommand_lpop_reply();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:client.command_lpop_reply)
}
command_lpop_reply::command_lpop_reply(const command_lpop_reply& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_state()) {
    state_ = new ::client::command_reply(*from.state_);
  } else {
    state_ = NULL;
  }
  if (from.has_data()) {
    data_ = new ::data::VALUE(*from.data_);
  } else {
    data_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:client.command_lpop_reply)
}

void command_lpop_reply::SharedCtor() {
  ::memset(&state_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&data_) -
      reinterpret_cast<char*>(&state_)) + sizeof(data_));
  _cached_size_ = 0;
}

command_lpop_reply::~command_lpop_reply() {
  // @@protoc_insertion_point(destructor:client.command_lpop_reply)
  SharedDtor();
}

void command_lpop_reply::SharedDtor() {
  if (this != internal_default_instance()) delete state_;
  if (this != internal_default_instance()) delete data_;
}

void command_lpop_reply::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* command_lpop_reply::descriptor() {
  ::protobuf_message_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_message_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const command_lpop_reply& command_lpop_reply::default_instance() {
  ::protobuf_message_2eproto::InitDefaultscommand_lpop_reply();
  return *internal_default_instance();
}

command_lpop_reply* command_lpop_reply::New(::google::protobuf::Arena* arena) const {
  command_lpop_reply* n = new command_lpop_reply;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void command_lpop_reply::Clear() {
// @@protoc_insertion_point(message_clear_start:client.command_lpop_reply)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == NULL && state_ != NULL) {
    delete state_;
  }
  state_ = NULL;
  if (GetArenaNoVirtual() == NULL && data_ != NULL) {
    delete data_;
  }
  data_ = NULL;
  _internal_metadata_.Clear();
}

bool command_lpop_reply::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:client.command_lpop_reply)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .client.command_reply state = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_state()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .data.VALUE data = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_data()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:client.command_lpop_reply)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:client.command_lpop_reply)
  return false;
#undef DO_
}

void command_lpop_reply::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:client.command_lpop_reply)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .client.command_reply state = 1;
  if (this->has_state()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->state_, output);
  }

  // .data.VALUE data = 2;
  if (this->has_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->data_, output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:client.command_lpop_reply)
}

::google::protobuf::uint8* command_lpop_reply::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:client.command_lpop_reply)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .client.command_reply state = 1;
  if (this->has_state()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, *this->state_, deterministic, target);
  }

  // .data.VALUE data = 2;
  if (this->has_data()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, *this->data_, deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:client.command_lpop_reply)
  return target;
}

size_t command_lpop_reply::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:client.command_lpop_reply)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // .client.command_reply state = 1;
  if (this->has_state()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->state_);
  }

  // .data.VALUE data = 2;
  if (this->has_data()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->data_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void command_lpop_reply::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:client.command_lpop_reply)
  GOOGLE_DCHECK_NE(&from, this);
  const command_lpop_reply* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const command_lpop_reply>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:client.command_lpop_reply)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:client.command_lpop_reply)
    MergeFrom(*source);
  }
}

void command_lpop_reply::MergeFrom(const command_lpop_reply& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:client.command_lpop_reply)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_state()) {
    mutable_state()->::client::command_reply::MergeFrom(from.state());
  }
  if (from.has_data()) {
    mutable_data()->::data::VALUE::MergeFrom(from.data());
  }
}

void command_lpop_reply::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:client.command_lpop_reply)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void command_lpop_reply::CopyFrom(const command_lpop_reply& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:client.command_lpop_reply)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool command_lpop_reply::IsInitialized() const {
  return true;
}

void command_lpop_reply::Swap(command_lpop_reply* other) {
  if (other == this) return;
  InternalSwap(other);
}
void command_lpop_reply::InternalSwap(command_lpop_reply* other) {
  using std::swap;
  swap(state_, other->state_);
  swap(data_, other->data_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata command_lpop_reply::GetMetadata() const {
  protobuf_message_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_message_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void command_mlpop::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int command_mlpop::kKeysFieldNumber;
const int command_mlpop::kHeadFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

command_mlpop::command_mlpop()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_message_2eproto::InitDefaultscommand_mlpop();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:client.command_mlpop)
}
command_mlpop::command_mlpop(const command_mlpop& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      keys_(from.keys_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  head_ = from.head_;
  // @@protoc_insertion_point(copy_constructor:client.command_mlpop)
}

void command_mlpop::SharedCtor() {
  head_ = false;
  _cached_size_ = 0;
}

command_mlpop::~command_mlpop() {
  // @@protoc_insertion_point(destructor:client.command_mlpop)
  SharedDtor();
}

void command_mlpop::SharedDtor() {
}

void command_mlpop::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* command_mlpop::descriptor() {
  ::protobuf_message_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_message_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const command_mlpop& command_mlpop::default_instance() {
  ::protobuf_message_2eproto::InitDefaultscommand_mlpop();
  return *internal_default_instance();
}

command_mlpop* command_mlpop::New(::google::protobuf::Arena* arena) const {
  command_mlpop* n = new command_mlpop;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void command_mlpop::Clear() {
// @@protoc_insertion_point(message_clear_start:client.command_mlpop)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  keys_.Clear();
  head_ = false;
  _internal_metadata_.Clear();
}

bool command_mlpop::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:client.command_mlpop)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated string keys = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_keys()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->keys(this->keys_size() - 1).data(),
            static_cast<int>(this->keys(this->keys_size() - 1).length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "client.command_mlpop.keys"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool head = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &head_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:client.command_mlpop)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:client.command_mlpop)
  return false;
#undef DO_
}

void command_mlpop::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:client.command_mlpop)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated string keys = 1;
  for (int i = 0, n = this->keys_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->keys(i).data(), static_cast<int>(this->keys(i).length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "client.command_mlpop.keys");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->keys(i), output);
  }

  // bool head = 2;
  if (this->head() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->head(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:client.command_mlpop)
}

::google::protobuf::uint8* command_mlpop::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:client.command_mlpop)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated string keys = 1;
  for (int i = 0, n = this->keys_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->keys(i).data(), static_cast<int>(this->keys(i).length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "client.command_mlpop.keys");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(1, this->keys(i), target);
  }

  // bool head = 2;
  if (this->head() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->head(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:client.command_mlpop)
  return target;
}

size_t command_mlpop::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:client.command_mlpop)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // repeated string keys = 1;
  total_size += 1 *
      ::google::protobuf::internal::FromIntSize(this->keys_size());
  for (int i = 0, n = this->keys_size(); i < n; i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->keys(i));
  }

  // bool head = 2;
  if (this->head() != 0) {
    total_size += 1 + 1;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void command_mlpop::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:client.command_mlpop)
  GOOGLE_DCHECK_NE(&from, this);
  const command_mlpop* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const command_mlpop>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:client.command_mlpop)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:client.command_mlpop)
    MergeFrom(*source);
  }
}

void command_mlpop::MergeFrom(const command_mlpop& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:client.command_mlpop)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  keys_.MergeFrom(from.keys_);
  if (from.head() != 0) {
    set_head(from.head());
  }
}

void command_mlpop::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:client.command_mlpop)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void command_mlpop::CopyFrom(const command_mlpop& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:client.command_mlpop)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool command_mlpop::IsInitialized() const {
  return true;
}

void command_mlpop::Swap(command_mlpop* other) {
  if (other == this) return;
  InternalSwap(other);
}
void command_mlpop::InternalSwap(command_mlpop* other) {
  using std::swap;
  keys_.InternalSwap(&other->keys_);
  swap(head_, other->head_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata command_mlpop::GetMetadata() const {
  protobuf_message_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_message_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void command_mlpop_repy::InitAsDefaultInstance() {
  ::client::_command_mlpop_repy_default_instance_._instance.get_mutable()->state_ = const_cast< ::client::command_reply*>(
      ::client::command_reply::internal_default_instance());
}
void command_mlpop_repy::clear_data() {
  data_.Clear();
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int command_mlpop_repy::kStateFieldNumber;
const int command_mlpop_repy::kDataFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

command_mlpop_repy::command_mlpop_repy()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_message_2eproto::InitDefaultscommand_mlpop_repy();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:client.command_mlpop_repy)
}
command_mlpop_repy::command_mlpop_repy(const command_mlpop_repy& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      data_(from.data_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_state()) {
    state_ = new ::client::command_reply(*from.state_);
  } else {
    state_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:client.command_mlpop_repy)
}

void command_mlpop_repy::SharedCtor() {
  state_ = NULL;
  _cached_size_ = 0;
}

command_mlpop_repy::~command_mlpop_repy() {
  // @@protoc_insertion_point(destructor:client.command_mlpop_repy)
  SharedDtor();
}

void command_mlpop_repy::SharedDtor() {
  if (this != internal_default_instance()) delete state_;
}

void command_mlpop_repy::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* command_mlpop_repy::descriptor() {
  ::protobuf_message_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_message_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const command_mlpop_repy& command_mlpop_repy::default_instance() {
  ::protobuf_message_2eproto::InitDefaultscommand_mlpop_repy();
  return *internal_default_instance();
}

command_mlpop_repy* command_mlpop_repy::New(::google::protobuf::Arena* arena) const {
  command_mlpop_repy* n = new command_mlpop_repy;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void command_mlpop_repy::Clear() {
// @@protoc_insertion_point(message_clear_start:client.command_mlpop_repy)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  data_.Clear();
  if (GetArenaNoVirtual() == NULL && state_ != NULL) {
    delete state_;
  }
  state_ = NULL;
  _internal_metadata_.Clear();
}

bool command_mlpop_repy::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:client.command_mlpop_repy)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .client.command_reply state = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_state()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .data.VALUE data = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(input, add_data()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:client.command_mlpop_repy)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:client.command_mlpop_repy)
  return false;
#undef DO_
}

void command_mlpop_repy::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:client.command_mlpop_repy)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .client.command_reply state = 1;
  if (this->has_state()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->state_, output);
  }

  // repeated .data.VALUE data = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->data_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->data(static_cast<int>(i)), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:client.command_mlpop_repy)
}

::google::protobuf::uint8* command_mlpop_repy::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:client.command_mlpop_repy)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .client.command_reply state = 1;
  if (this->has_state()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, *this->state_, deterministic, target);
  }

  // repeated .data.VALUE data = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->data_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, this->data(static_cast<int>(i)), deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:client.command_mlpop_repy)
  return target;
}

size_t command_mlpop_repy::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:client.command_mlpop_repy)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // repeated .data.VALUE data = 2;
  {
    unsigned int count = static_cast<unsigned int>(this->data_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->data(static_cast<int>(i)));
    }
  }

  // .client.command_reply state = 1;
  if (this->has_state()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->state_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void command_mlpop_repy::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:client.command_mlpop_repy)
  GOOGLE_DCHECK_NE(&from, this);
  const command_mlpop_repy* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const command_mlpop_repy>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:client.command_mlpop_repy)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:client.command_mlpop_repy)
    MergeFrom(*source);
  }
}

void command_mlpop_repy::MergeFrom(const command_mlpop_repy& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:client.command_mlpop_repy)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  data_.MergeFrom(from.data_);
  if (from.has_state()) {
    mutable_state()->::client::command_reply::MergeFrom(from.state());
  }
}

void command_mlpop_repy::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:client.command_mlpop_repy)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void command_mlpop_repy::CopyFrom(const command_mlpop_repy& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:client.command_mlpop_repy)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool command_mlpop_repy::IsInitialized() const {
  return true;
}

void command_mlpop_repy::Swap(command_mlpop_repy* other) {
  if (other == this) return;
  InternalSwap(other);
}
void command_mlpop_repy::InternalSwap(command_mlpop_repy* other) {
  using std::swap;
  data_.InternalSwap(&other->data_);
  swap(state_, other->state_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata command_mlpop_repy::GetMetadata() const {
  protobuf_message_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_message_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void command_hlpop::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int command_hlpop::kKeyFieldNumber;
const int command_hlpop::kFieldFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

command_hlpop::command_hlpop()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_message_2eproto::InitDefaultscommand_hlpop();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:client.command_hlpop)
}
command_hlpop::command_hlpop(const command_hlpop& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  key_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.key().size() > 0) {
    key_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.key_);
  }
  field_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.field().size() > 0) {
    field_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.field_);
  }
  // @@protoc_insertion_point(copy_constructor:client.command_hlpop)
}

void command_hlpop::SharedCtor() {
  key_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  field_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _cached_size_ = 0;
}

command_hlpop::~command_hlpop() {
  // @@protoc_insertion_point(destructor:client.command_hlpop)
  SharedDtor();
}

void command_hlpop::SharedDtor() {
  key_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  field_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void command_hlpop::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* command_hlpop::descriptor() {
  ::protobuf_message_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_message_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const command_hlpop& command_hlpop::default_instance() {
  ::protobuf_message_2eproto::InitDefaultscommand_hlpop();
  return *internal_default_instance();
}

command_hlpop* command_hlpop::New(::google::protobuf::Arena* arena) const {
  command_hlpop* n = new command_hlpop;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void command_hlpop::Clear() {
// @@protoc_insertion_point(message_clear_start:client.command_hlpop)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  key_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  field_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _internal_metadata_.Clear();
}

bool command_hlpop::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:client.command_hlpop)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string key = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_key()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->key().data(), static_cast<int>(this->key().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "client.command_hlpop.key"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string field = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_field()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->field().data(), static_cast<int>(this->field().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "client.command_hlpop.field"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:client.command_hlpop)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:client.command_hlpop)
  return false;
#undef DO_
}

void command_hlpop::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:client.command_hlpop)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string key = 1;
  if (this->key().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->key().data(), static_cast<int>(this->key().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "client.command_hlpop.key");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->key(), output);
  }

  // string field = 2;
  if (this->field().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->field().data(), static_cast<int>(this->field().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "client.command_hlpop.field");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->field(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:client.command_hlpop)
}

::google::protobuf::uint8* command_hlpop::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:client.command_hlpop)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string key = 1;
  if (this->key().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->key().data(), static_cast<int>(this->key().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "client.command_hlpop.key");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->key(), target);
  }

  // string field = 2;
  if (this->field().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->field().data(), static_cast<int>(this->field().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "client.command_hlpop.field");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->field(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:client.command_hlpop)
  return target;
}

size_t command_hlpop::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:client.command_hlpop)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // string key = 1;
  if (this->key().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->key());
  }

  // string field = 2;
  if (this->field().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->field());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void command_hlpop::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:client.command_hlpop)
  GOOGLE_DCHECK_NE(&from, this);
  const command_hlpop* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const command_hlpop>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:client.command_hlpop)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:client.command_hlpop)
    MergeFrom(*source);
  }
}

void command_hlpop::MergeFrom(const command_hlpop& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:client.command_hlpop)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.key().size() > 0) {

    key_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.key_);
  }
  if (from.field().size() > 0) {

    field_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.field_);
  }
}

void command_hlpop::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:client.command_hlpop)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void command_hlpop::CopyFrom(const command_hlpop& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:client.command_hlpop)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool command_hlpop::IsInitialized() const {
  return true;
}

void command_hlpop::Swap(command_hlpop* other) {
  if (other == this) return;
  InternalSwap(other);
}
void command_hlpop::InternalSwap(command_hlpop* other) {
  using std::swap;
  key_.Swap(&other->key_);
  field_.Swap(&other->field_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata command_hlpop::GetMetadata() const {
  protobuf_message_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_message_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void command_hlpop_reply::InitAsDefaultInstance() {
  ::client::_command_hlpop_reply_default_instance_._instance.get_mutable()->state_ = const_cast< ::client::command_reply*>(
      ::client::command_reply::internal_default_instance());
  ::client::_command_hlpop_reply_default_instance_._instance.get_mutable()->data_ = const_cast< ::data::VALUE*>(
      ::data::VALUE::internal_default_instance());
}
void command_hlpop_reply::clear_data() {
  if (GetArenaNoVirtual() == NULL && data_ != NULL) {
    delete data_;
  }
  data_ = NULL;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int command_hlpop_reply::kStateFieldNumber;
const int command_hlpop_reply::kDataFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

command_hlpop_reply::command_hlpop_reply()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_message_2eproto::InitDefaultscommand_hlpop_reply();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:client.command_hlpop_reply)
}
command_hlpop_reply::command_hlpop_reply(const command_hlpop_reply& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_state()) {
    state_ = new ::client::command_reply(*from.state_);
  } else {
    state_ = NULL;
  }
  if (from.has_data()) {
    data_ = new ::data::VALUE(*from.data_);
  } else {
    data_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:client.command_hlpop_reply)
}

void command_hlpop_reply::SharedCtor() {
  ::memset(&state_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&data_) -
      reinterpret_cast<char*>(&state_)) + sizeof(data_));
  _cached_size_ = 0;
}

command_hlpop_reply::~command_hlpop_reply() {
  // @@protoc_insertion_point(destructor:client.command_hlpop_reply)
  SharedDtor();
}

void command_hlpop_reply::SharedDtor() {
  if (this != internal_default_instance()) delete state_;
  if (this != internal_default_instance()) delete data_;
}

void command_hlpop_reply::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* command_hlpop_reply::descriptor() {
  ::protobuf_message_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_message_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const command_hlpop_reply& command_hlpop_reply::default_instance() {
  ::protobuf_message_2eproto::InitDefaultscommand_hlpop_reply();
  return *internal_default_instance();
}

command_hlpop_reply* command_hlpop_reply::New(::google::protobuf::Arena* arena) const {
  command_hlpop_reply* n = new command_hlpop_reply;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void command_hlpop_reply::Clear() {
// @@protoc_insertion_point(message_clear_start:client.command_hlpop_reply)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == NULL && state_ != NULL) {
    delete state_;
  }
  state_ = NULL;
  if (GetArenaNoVirtual() == NULL && data_ != NULL) {
    delete data_;
  }
  data_ = NULL;
  _internal_metadata_.Clear();
}

bool command_hlpop_reply::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:client.command_hlpop_reply)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .client.command_reply state = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_state()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .data.VALUE data = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_data()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:client.command_hlpop_reply)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:client.command_hlpop_reply)
  return false;
#undef DO_
}

void command_hlpop_reply::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:client.command_hlpop_reply)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .client.command_reply state = 1;
  if (this->has_state()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->state_, output);
  }

  // .data.VALUE data = 2;
  if (this->has_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->data_, output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:client.command_hlpop_reply)
}

::google::protobuf::uint8* command_hlpop_reply::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:client.command_hlpop_reply)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .client.command_reply state = 1;
  if (this->has_state()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, *this->state_, deterministic, target);
  }

  // .data.VALUE data = 2;
  if (this->has_data()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, *this->data_, deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:client.command_hlpop_reply)
  return target;
}

size_t command_hlpop_reply::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:client.command_hlpop_reply)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // .client.command_reply state = 1;
  if (this->has_state()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->state_);
  }

  // .data.VALUE data = 2;
  if (this->has_data()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->data_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void command_hlpop_reply::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:client.command_hlpop_reply)
  GOOGLE_DCHECK_NE(&from, this);
  const command_hlpop_reply* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const command_hlpop_reply>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:client.command_hlpop_reply)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:client.command_hlpop_reply)
    MergeFrom(*source);
  }
}

void command_hlpop_reply::MergeFrom(const command_hlpop_reply& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:client.command_hlpop_reply)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_state()) {
    mutable_state()->::client::command_reply::MergeFrom(from.state());
  }
  if (from.has_data()) {
    mutable_data()->::data::VALUE::MergeFrom(from.data());
  }
}

void command_hlpop_reply::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:client.command_hlpop_reply)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void command_hlpop_reply::CopyFrom(const command_hlpop_reply& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:client.command_hlpop_reply)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool command_hlpop_reply::IsInitialized() const {
  return true;
}

void command_hlpop_reply::Swap(command_hlpop_reply* other) {
  if (other == this) return;
  InternalSwap(other);
}
void command_hlpop_reply::InternalSwap(command_hlpop_reply* other) {
  using std::swap;
  swap(state_, other->state_);
  swap(data_, other->data_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata command_hlpop_reply::GetMetadata() const {
  protobuf_message_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_message_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void command_hmlpop::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int command_hmlpop::kKeyFieldNumber;
const int command_hmlpop::kFieldsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

command_hmlpop::command_hmlpop()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_message_2eproto::InitDefaultscommand_hmlpop();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:client.command_hmlpop)
}
command_hmlpop::command_hmlpop(const command_hmlpop& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      fields_(from.fields_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  key_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.key().size() > 0) {
    key_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.key_);
  }
  // @@protoc_insertion_point(copy_constructor:client.command_hmlpop)
}

void command_hmlpop::SharedCtor() {
  key_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _cached_size_ = 0;
}

command_hmlpop::~command_hmlpop() {
  // @@protoc_insertion_point(destructor:client.command_hmlpop)
  SharedDtor();
}

void command_hmlpop::SharedDtor() {
  key_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void command_hmlpop::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* command_hmlpop::descriptor() {
  ::protobuf_message_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_message_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const command_hmlpop& command_hmlpop::default_instance() {
  ::protobuf_message_2eproto::InitDefaultscommand_hmlpop();
  return *internal_default_instance();
}

command_hmlpop* command_hmlpop::New(::google::protobuf::Arena* arena) const {
  command_hmlpop* n = new command_hmlpop;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void command_hmlpop::Clear() {
// @@protoc_insertion_point(message_clear_start:client.command_hmlpop)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  fields_.Clear();
  key_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _internal_metadata_.Clear();
}

bool command_hmlpop::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:client.command_hmlpop)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string key = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_key()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->key().data(), static_cast<int>(this->key().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "client.command_hmlpop.key"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated string fields = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_fields()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->fields(this->fields_size() - 1).data(),
            static_cast<int>(this->fields(this->fields_size() - 1).length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "client.command_hmlpop.fields"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:client.command_hmlpop)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:client.command_hmlpop)
  return false;
#undef DO_
}

void command_hmlpop::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:client.command_hmlpop)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string key = 1;
  if (this->key().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->key().data(), static_cast<int>(this->key().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "client.command_hmlpop.key");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->key(), output);
  }

  // repeated string fields = 2;
  for (int i = 0, n = this->fields_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->fields(i).data(), static_cast<int>(this->fields(i).length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "client.command_hmlpop.fields");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->fields(i), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:client.command_hmlpop)
}

::google::protobuf::uint8* command_hmlpop::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:client.command_hmlpop)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string key = 1;
  if (this->key().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->key().data(), static_cast<int>(this->key().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "client.command_hmlpop.key");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->key(), target);
  }

  // repeated string fields = 2;
  for (int i = 0, n = this->fields_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->fields(i).data(), static_cast<int>(this->fields(i).length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "client.command_hmlpop.fields");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(2, this->fields(i), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:client.command_hmlpop)
  return target;
}

size_t command_hmlpop::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:client.command_hmlpop)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // repeated string fields = 2;
  total_size += 1 *
      ::google::protobuf::internal::FromIntSize(this->fields_size());
  for (int i = 0, n = this->fields_size(); i < n; i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->fields(i));
  }

  // string key = 1;
  if (this->key().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->key());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void command_hmlpop::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:client.command_hmlpop)
  GOOGLE_DCHECK_NE(&from, this);
  const command_hmlpop* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const command_hmlpop>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:client.command_hmlpop)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:client.command_hmlpop)
    MergeFrom(*source);
  }
}

void command_hmlpop::MergeFrom(const command_hmlpop& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:client.command_hmlpop)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  fields_.MergeFrom(from.fields_);
  if (from.key().size() > 0) {

    key_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.key_);
  }
}

void command_hmlpop::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:client.command_hmlpop)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void command_hmlpop::CopyFrom(const command_hmlpop& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:client.command_hmlpop)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool command_hmlpop::IsInitialized() const {
  return true;
}

void command_hmlpop::Swap(command_hmlpop* other) {
  if (other == this) return;
  InternalSwap(other);
}
void command_hmlpop::InternalSwap(command_hmlpop* other) {
  using std::swap;
  fields_.InternalSwap(&other->fields_);
  key_.Swap(&other->key_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata command_hmlpop::GetMetadata() const {
  protobuf_message_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_message_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void command_hmlpop_reply::InitAsDefaultInstance() {
  ::client::_command_hmlpop_reply_default_instance_._instance.get_mutable()->state_ = const_cast< ::client::command_reply*>(
      ::client::command_reply::internal_default_instance());
}
void command_hmlpop_reply::clear_data() {
  data_.Clear();
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int command_hmlpop_reply::kStateFieldNumber;
const int command_hmlpop_reply::kDataFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

command_hmlpop_reply::command_hmlpop_reply()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_message_2eproto::InitDefaultscommand_hmlpop_reply();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:client.command_hmlpop_reply)
}
command_hmlpop_reply::command_hmlpop_reply(const command_hmlpop_reply& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      data_(from.data_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_state()) {
    state_ = new ::client::command_reply(*from.state_);
  } else {
    state_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:client.command_hmlpop_reply)
}

void command_hmlpop_reply::SharedCtor() {
  state_ = NULL;
  _cached_size_ = 0;
}

command_hmlpop_reply::~command_hmlpop_reply() {
  // @@protoc_insertion_point(destructor:client.command_hmlpop_reply)
  SharedDtor();
}

void command_hmlpop_reply::SharedDtor() {
  if (this != internal_default_instance()) delete state_;
}

void command_hmlpop_reply::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* command_hmlpop_reply::descriptor() {
  ::protobuf_message_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_message_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const command_hmlpop_reply& command_hmlpop_reply::default_instance() {
  ::protobuf_message_2eproto::InitDefaultscommand_hmlpop_reply();
  return *internal_default_instance();
}

command_hmlpop_reply* command_hmlpop_reply::New(::google::protobuf::Arena* arena) const {
  command_hmlpop_reply* n = new command_hmlpop_reply;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void command_hmlpop_reply::Clear() {
// @@protoc_insertion_point(message_clear_start:client.command_hmlpop_reply)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  data_.Clear();
  if (GetArenaNoVirtual() == NULL && state_ != NULL) {
    delete state_;
  }
  state_ = NULL;
  _internal_metadata_.Clear();
}

bool command_hmlpop_reply::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:client.command_hmlpop_reply)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .client.command_reply state = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_state()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .data.VALUE data = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(input, add_data()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:client.command_hmlpop_reply)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:client.command_hmlpop_reply)
  return false;
#undef DO_
}

void command_hmlpop_reply::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:client.command_hmlpop_reply)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .client.command_reply state = 1;
  if (this->has_state()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->state_, output);
  }

  // repeated .data.VALUE data = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->data_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->data(static_cast<int>(i)), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:client.command_hmlpop_reply)
}

::google::protobuf::uint8* command_hmlpop_reply::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:client.command_hmlpop_reply)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .client.command_reply state = 1;
  if (this->has_state()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, *this->state_, deterministic, target);
  }

  // repeated .data.VALUE data = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->data_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, this->data(static_cast<int>(i)), deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:client.command_hmlpop_reply)
  return target;
}

size_t command_hmlpop_reply::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:client.command_hmlpop_reply)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // repeated .data.VALUE data = 2;
  {
    unsigned int count = static_cast<unsigned int>(this->data_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->data(static_cast<int>(i)));
    }
  }

  // .client.command_reply state = 1;
  if (this->has_state()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->state_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void command_hmlpop_reply::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:client.command_hmlpop_reply)
  GOOGLE_DCHECK_NE(&from, this);
  const command_hmlpop_reply* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const command_hmlpop_reply>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:client.command_hmlpop_reply)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:client.command_hmlpop_reply)
    MergeFrom(*source);
  }
}

void command_hmlpop_reply::MergeFrom(const command_hmlpop_reply& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:client.command_hmlpop_reply)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  data_.MergeFrom(from.data_);
  if (from.has_state()) {
    mutable_state()->::client::command_reply::MergeFrom(from.state());
  }
}

void command_hmlpop_reply::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:client.command_hmlpop_reply)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void command_hmlpop_reply::CopyFrom(const command_hmlpop_reply& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:client.command_hmlpop_reply)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool command_hmlpop_reply::IsInitialized() const {
  return true;
}

void command_hmlpop_reply::Swap(command_hmlpop_reply* other) {
  if (other == this) return;
  InternalSwap(other);
}
void command_hmlpop_reply::InternalSwap(command_hmlpop_reply* other) {
  using std::swap;
  data_.InternalSwap(&other->data_);
  swap(state_, other->state_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata command_hmlpop_reply::GetMetadata() const {
  protobuf_message_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_message_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void command_mhmlpop::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int command_mhmlpop::kKeysFieldNumber;
const int command_mhmlpop::kFieldsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

command_mhmlpop::command_mhmlpop()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_message_2eproto::InitDefaultscommand_mhmlpop();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:client.command_mhmlpop)
}
command_mhmlpop::command_mhmlpop(const command_mhmlpop& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      keys_(from.keys_),
      fields_(from.fields_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:client.command_mhmlpop)
}

void command_mhmlpop::SharedCtor() {
  _cached_size_ = 0;
}

command_mhmlpop::~command_mhmlpop() {
  // @@protoc_insertion_point(destructor:client.command_mhmlpop)
  SharedDtor();
}

void command_mhmlpop::SharedDtor() {
}

void command_mhmlpop::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* command_mhmlpop::descriptor() {
  ::protobuf_message_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_message_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const command_mhmlpop& command_mhmlpop::default_instance() {
  ::protobuf_message_2eproto::InitDefaultscommand_mhmlpop();
  return *internal_default_instance();
}

command_mhmlpop* command_mhmlpop::New(::google::protobuf::Arena* arena) const {
  command_mhmlpop* n = new command_mhmlpop;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void command_mhmlpop::Clear() {
// @@protoc_insertion_point(message_clear_start:client.command_mhmlpop)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  keys_.Clear();
  fields_.Clear();
  _internal_metadata_.Clear();
}

bool command_mhmlpop::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:client.command_mhmlpop)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated string keys = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_keys()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->keys(this->keys_size() - 1).data(),
            static_cast<int>(this->keys(this->keys_size() - 1).length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "client.command_mhmlpop.keys"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated string fields = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_fields()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->fields(this->fields_size() - 1).data(),
            static_cast<int>(this->fields(this->fields_size() - 1).length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "client.command_mhmlpop.fields"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:client.command_mhmlpop)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:client.command_mhmlpop)
  return false;
#undef DO_
}

void command_mhmlpop::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:client.command_mhmlpop)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated string keys = 1;
  for (int i = 0, n = this->keys_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->keys(i).data(), static_cast<int>(this->keys(i).length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "client.command_mhmlpop.keys");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->keys(i), output);
  }

  // repeated string fields = 2;
  for (int i = 0, n = this->fields_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->fields(i).data(), static_cast<int>(this->fields(i).length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "client.command_mhmlpop.fields");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->fields(i), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:client.command_mhmlpop)
}

::google::protobuf::uint8* command_mhmlpop::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:client.command_mhmlpop)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated string keys = 1;
  for (int i = 0, n = this->keys_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->keys(i).data(), static_cast<int>(this->keys(i).length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "client.command_mhmlpop.keys");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(1, this->keys(i), target);
  }

  // repeated string fields = 2;
  for (int i = 0, n = this->fields_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->fields(i).data(), static_cast<int>(this->fields(i).length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "client.command_mhmlpop.fields");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(2, this->fields(i), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:client.command_mhmlpop)
  return target;
}

size_t command_mhmlpop::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:client.command_mhmlpop)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // repeated string keys = 1;
  total_size += 1 *
      ::google::protobuf::internal::FromIntSize(this->keys_size());
  for (int i = 0, n = this->keys_size(); i < n; i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->keys(i));
  }

  // repeated string fields = 2;
  total_size += 1 *
      ::google::protobuf::internal::FromIntSize(this->fields_size());
  for (int i = 0, n = this->fields_size(); i < n; i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->fields(i));
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void command_mhmlpop::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:client.command_mhmlpop)
  GOOGLE_DCHECK_NE(&from, this);
  const command_mhmlpop* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const command_mhmlpop>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:client.command_mhmlpop)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:client.command_mhmlpop)
    MergeFrom(*source);
  }
}

void command_mhmlpop::MergeFrom(const command_mhmlpop& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:client.command_mhmlpop)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  keys_.MergeFrom(from.keys_);
  fields_.MergeFrom(from.fields_);
}

void command_mhmlpop::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:client.command_mhmlpop)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void command_mhmlpop::CopyFrom(const command_mhmlpop& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:client.command_mhmlpop)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool command_mhmlpop::IsInitialized() const {
  return true;
}

void command_mhmlpop::Swap(command_mhmlpop* other) {
  if (other == this) return;
  InternalSwap(other);
}
void command_mhmlpop::InternalSwap(command_mhmlpop* other) {
  using std::swap;
  keys_.InternalSwap(&other->keys_);
  fields_.InternalSwap(&other->fields_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata command_mhmlpop::GetMetadata() const {
  protobuf_message_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_message_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void command_mhmlpop_reply::InitAsDefaultInstance() {
  ::client::_command_mhmlpop_reply_default_instance_._instance.get_mutable()->state_ = const_cast< ::client::command_reply*>(
      ::client::command_reply::internal_default_instance());
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int command_mhmlpop_reply::kStateFieldNumber;
const int command_mhmlpop_reply::kDataFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

command_mhmlpop_reply::command_mhmlpop_reply()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_message_2eproto::InitDefaultscommand_mhmlpop_reply();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:client.command_mhmlpop_reply)
}
command_mhmlpop_reply::command_mhmlpop_reply(const command_mhmlpop_reply& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      data_(from.data_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_state()) {
    state_ = new ::client::command_reply(*from.state_);
  } else {
    state_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:client.command_mhmlpop_reply)
}

void command_mhmlpop_reply::SharedCtor() {
  state_ = NULL;
  _cached_size_ = 0;
}

command_mhmlpop_reply::~command_mhmlpop_reply() {
  // @@protoc_insertion_point(destructor:client.command_mhmlpop_reply)
  SharedDtor();
}

void command_mhmlpop_reply::SharedDtor() {
  if (this != internal_default_instance()) delete state_;
}

void command_mhmlpop_reply::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* command_mhmlpop_reply::descriptor() {
  ::protobuf_message_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_message_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const command_mhmlpop_reply& command_mhmlpop_reply::default_instance() {
  ::protobuf_message_2eproto::InitDefaultscommand_mhmlpop_reply();
  return *internal_default_instance();
}

command_mhmlpop_reply* command_mhmlpop_reply::New(::google::protobuf::Arena* arena) const {
  command_mhmlpop_reply* n = new command_mhmlpop_reply;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void command_mhmlpop_reply::Clear() {
// @@protoc_insertion_point(message_clear_start:client.command_mhmlpop_reply)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  data_.Clear();
  if (GetArenaNoVirtual() == NULL && state_ != NULL) {
    delete state_;
  }
  state_ = NULL;
  _internal_metadata_.Clear();
}

bool command_mhmlpop_reply::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:client.command_mhmlpop_reply)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .client.command_reply state = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_state()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .client.values_type data = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(input, add_data()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:client.command_mhmlpop_reply)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:client.command_mhmlpop_reply)
  return false;
#undef DO_
}

void command_mhmlpop_reply::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:client.command_mhmlpop_reply)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .client.command_reply state = 1;
  if (this->has_state()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->state_, output);
  }

  // repeated .client.values_type data = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->data_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->data(static_cast<int>(i)), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:client.command_mhmlpop_reply)
}

::google::protobuf::uint8* command_mhmlpop_reply::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:client.command_mhmlpop_reply)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .client.command_reply state = 1;
  if (this->has_state()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, *this->state_, deterministic, target);
  }

  // repeated .client.values_type data = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->data_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, this->data(static_cast<int>(i)), deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:client.command_mhmlpop_reply)
  return target;
}

size_t command_mhmlpop_reply::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:client.command_mhmlpop_reply)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // repeated .client.values_type data = 2;
  {
    unsigned int count = static_cast<unsigned int>(this->data_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->data(static_cast<int>(i)));
    }
  }

  // .client.command_reply state = 1;
  if (this->has_state()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->state_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void command_mhmlpop_reply::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:client.command_mhmlpop_reply)
  GOOGLE_DCHECK_NE(&from, this);
  const command_mhmlpop_reply* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const command_mhmlpop_reply>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:client.command_mhmlpop_reply)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:client.command_mhmlpop_reply)
    MergeFrom(*source);
  }
}

void command_mhmlpop_reply::MergeFrom(const command_mhmlpop_reply& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:client.command_mhmlpop_reply)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  data_.MergeFrom(from.data_);
  if (from.has_state()) {
    mutable_state()->::client::command_reply::MergeFrom(from.state());
  }
}

void command_mhmlpop_reply::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:client.command_mhmlpop_reply)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void command_mhmlpop_reply::CopyFrom(const command_mhmlpop_reply& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:client.command_mhmlpop_reply)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool command_mhmlpop_reply::IsInitialized() const {
  return true;
}

void command_mhmlpop_reply::Swap(command_mhmlpop_reply* other) {
  if (other == this) return;
  InternalSwap(other);
}
void command_mhmlpop_reply::InternalSwap(command_mhmlpop_reply* other) {
  using std::swap;
  data_.InternalSwap(&other->data_);
  swap(state_, other->state_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata command_mhmlpop_reply::GetMetadata() const {
  protobuf_message_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_message_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void command_ltrim::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int command_ltrim::kKeyFieldNumber;
const int command_ltrim::kStartFieldNumber;
const int command_ltrim::kStopFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

command_ltrim::command_ltrim()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_message_2eproto::InitDefaultscommand_ltrim();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:client.command_ltrim)
}
command_ltrim::command_ltrim(const command_ltrim& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  key_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.key().size() > 0) {
    key_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.key_);
  }
  ::memcpy(&start_, &from.start_,
    static_cast<size_t>(reinterpret_cast<char*>(&stop_) -
    reinterpret_cast<char*>(&start_)) + sizeof(stop_));
  // @@protoc_insertion_point(copy_constructor:client.command_ltrim)
}

void command_ltrim::SharedCtor() {
  key_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&start_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&stop_) -
      reinterpret_cast<char*>(&start_)) + sizeof(stop_));
  _cached_size_ = 0;
}

command_ltrim::~command_ltrim() {
  // @@protoc_insertion_point(destructor:client.command_ltrim)
  SharedDtor();
}

void command_ltrim::SharedDtor() {
  key_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void command_ltrim::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* command_ltrim::descriptor() {
  ::protobuf_message_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_message_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const command_ltrim& command_ltrim::default_instance() {
  ::protobuf_message_2eproto::InitDefaultscommand_ltrim();
  return *internal_default_instance();
}

command_ltrim* command_ltrim::New(::google::protobuf::Arena* arena) const {
  command_ltrim* n = new command_ltrim;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void command_ltrim::Clear() {
// @@protoc_insertion_point(message_clear_start:client.command_ltrim)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  key_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&start_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&stop_) -
      reinterpret_cast<char*>(&start_)) + sizeof(stop_));
  _internal_metadata_.Clear();
}

bool command_ltrim::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:client.command_ltrim)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string key = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_key()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->key().data(), static_cast<int>(this->key().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "client.command_ltrim.key"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 start = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &start_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 stop = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &stop_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:client.command_ltrim)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:client.command_ltrim)
  return false;
#undef DO_
}

void command_ltrim::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:client.command_ltrim)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string key = 1;
  if (this->key().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->key().data(), static_cast<int>(this->key().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "client.command_ltrim.key");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->key(), output);
  }

  // int32 start = 2;
  if (this->start() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->start(), output);
  }

  // int32 stop = 3;
  if (this->stop() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->stop(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:client.command_ltrim)
}

::google::protobuf::uint8* command_ltrim::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:client.command_ltrim)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string key = 1;
  if (this->key().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->key().data(), static_cast<int>(this->key().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "client.command_ltrim.key");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->key(), target);
  }

  // int32 start = 2;
  if (this->start() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->start(), target);
  }

  // int32 stop = 3;
  if (this->stop() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->stop(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:client.command_ltrim)
  return target;
}

size_t command_ltrim::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:client.command_ltrim)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // string key = 1;
  if (this->key().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->key());
  }

  // int32 start = 2;
  if (this->start() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->start());
  }

  // int32 stop = 3;
  if (this->stop() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->stop());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void command_ltrim::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:client.command_ltrim)
  GOOGLE_DCHECK_NE(&from, this);
  const command_ltrim* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const command_ltrim>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:client.command_ltrim)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:client.command_ltrim)
    MergeFrom(*source);
  }
}

void command_ltrim::MergeFrom(const command_ltrim& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:client.command_ltrim)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.key().size() > 0) {

    key_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.key_);
  }
  if (from.start() != 0) {
    set_start(from.start());
  }
  if (from.stop() != 0) {
    set_stop(from.stop());
  }
}

void command_ltrim::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:client.command_ltrim)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void command_ltrim::CopyFrom(const command_ltrim& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:client.command_ltrim)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool command_ltrim::IsInitialized() const {
  return true;
}

void command_ltrim::Swap(command_ltrim* other) {
  if (other == this) return;
  InternalSwap(other);
}
void command_ltrim::InternalSwap(command_ltrim* other) {
  using std::swap;
  key_.Swap(&other->key_);
  swap(start_, other->start_);
  swap(stop_, other->stop_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata command_ltrim::GetMetadata() const {
  protobuf_message_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_message_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void command_mltrim::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int command_mltrim::kKeysFieldNumber;
const int command_mltrim::kStartFieldNumber;
const int command_mltrim::kStopFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

command_mltrim::command_mltrim()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_message_2eproto::InitDefaultscommand_mltrim();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:client.command_mltrim)
}
command_mltrim::command_mltrim(const command_mltrim& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      keys_(from.keys_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&start_, &from.start_,
    static_cast<size_t>(reinterpret_cast<char*>(&stop_) -
    reinterpret_cast<char*>(&start_)) + sizeof(stop_));
  // @@protoc_insertion_point(copy_constructor:client.command_mltrim)
}

void command_mltrim::SharedCtor() {
  ::memset(&start_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&stop_) -
      reinterpret_cast<char*>(&start_)) + sizeof(stop_));
  _cached_size_ = 0;
}

command_mltrim::~command_mltrim() {
  // @@protoc_insertion_point(destructor:client.command_mltrim)
  SharedDtor();
}

void command_mltrim::SharedDtor() {
}

void command_mltrim::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* command_mltrim::descriptor() {
  ::protobuf_message_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_message_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const command_mltrim& command_mltrim::default_instance() {
  ::protobuf_message_2eproto::InitDefaultscommand_mltrim();
  return *internal_default_instance();
}

command_mltrim* command_mltrim::New(::google::protobuf::Arena* arena) const {
  command_mltrim* n = new command_mltrim;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void command_mltrim::Clear() {
// @@protoc_insertion_point(message_clear_start:client.command_mltrim)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  keys_.Clear();
  ::memset(&start_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&stop_) -
      reinterpret_cast<char*>(&start_)) + sizeof(stop_));
  _internal_metadata_.Clear();
}

bool command_mltrim::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:client.command_mltrim)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated string keys = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_keys()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->keys(this->keys_size() - 1).data(),
            static_cast<int>(this->keys(this->keys_size() - 1).length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "client.command_mltrim.keys"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 start = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &start_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 stop = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &stop_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:client.command_mltrim)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:client.command_mltrim)
  return false;
#undef DO_
}

void command_mltrim::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:client.command_mltrim)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated string keys = 1;
  for (int i = 0, n = this->keys_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->keys(i).data(), static_cast<int>(this->keys(i).length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "client.command_mltrim.keys");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->keys(i), output);
  }

  // int32 start = 2;
  if (this->start() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->start(), output);
  }

  // int32 stop = 3;
  if (this->stop() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->stop(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:client.command_mltrim)
}

::google::protobuf::uint8* command_mltrim::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:client.command_mltrim)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated string keys = 1;
  for (int i = 0, n = this->keys_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->keys(i).data(), static_cast<int>(this->keys(i).length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "client.command_mltrim.keys");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(1, this->keys(i), target);
  }

  // int32 start = 2;
  if (this->start() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->start(), target);
  }

  // int32 stop = 3;
  if (this->stop() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->stop(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:client.command_mltrim)
  return target;
}

size_t command_mltrim::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:client.command_mltrim)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // repeated string keys = 1;
  total_size += 1 *
      ::google::protobuf::internal::FromIntSize(this->keys_size());
  for (int i = 0, n = this->keys_size(); i < n; i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->keys(i));
  }

  // int32 start = 2;
  if (this->start() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->start());
  }

  // int32 stop = 3;
  if (this->stop() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->stop());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void command_mltrim::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:client.command_mltrim)
  GOOGLE_DCHECK_NE(&from, this);
  const command_mltrim* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const command_mltrim>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:client.command_mltrim)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:client.command_mltrim)
    MergeFrom(*source);
  }
}

void command_mltrim::MergeFrom(const command_mltrim& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:client.command_mltrim)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  keys_.MergeFrom(from.keys_);
  if (from.start() != 0) {
    set_start(from.start());
  }
  if (from.stop() != 0) {
    set_stop(from.stop());
  }
}

void command_mltrim::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:client.command_mltrim)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void command_mltrim::CopyFrom(const command_mltrim& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:client.command_mltrim)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool command_mltrim::IsInitialized() const {
  return true;
}

void command_mltrim::Swap(command_mltrim* other) {
  if (other == this) return;
  InternalSwap(other);
}
void command_mltrim::InternalSwap(command_mltrim* other) {
  using std::swap;
  keys_.InternalSwap(&other->keys_);
  swap(start_, other->start_);
  swap(stop_, other->stop_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata command_mltrim::GetMetadata() const {
  protobuf_message_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_message_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void command_hltrim::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int command_hltrim::kKeyFieldNumber;
const int command_hltrim::kFiledFieldNumber;
const int command_hltrim::kStartFieldNumber;
const int command_hltrim::kStopFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

command_hltrim::command_hltrim()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_message_2eproto::InitDefaultscommand_hltrim();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:client.command_hltrim)
}
command_hltrim::command_hltrim(const command_hltrim& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  key_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.key().size() > 0) {
    key_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.key_);
  }
  filed_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.filed().size() > 0) {
    filed_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.filed_);
  }
  ::memcpy(&start_, &from.start_,
    static_cast<size_t>(reinterpret_cast<char*>(&stop_) -
    reinterpret_cast<char*>(&start_)) + sizeof(stop_));
  // @@protoc_insertion_point(copy_constructor:client.command_hltrim)
}

void command_hltrim::SharedCtor() {
  key_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  filed_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&start_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&stop_) -
      reinterpret_cast<char*>(&start_)) + sizeof(stop_));
  _cached_size_ = 0;
}

command_hltrim::~command_hltrim() {
  // @@protoc_insertion_point(destructor:client.command_hltrim)
  SharedDtor();
}

void command_hltrim::SharedDtor() {
  key_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  filed_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void command_hltrim::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* command_hltrim::descriptor() {
  ::protobuf_message_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_message_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const command_hltrim& command_hltrim::default_instance() {
  ::protobuf_message_2eproto::InitDefaultscommand_hltrim();
  return *internal_default_instance();
}

command_hltrim* command_hltrim::New(::google::protobuf::Arena* arena) const {
  command_hltrim* n = new command_hltrim;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void command_hltrim::Clear() {
// @@protoc_insertion_point(message_clear_start:client.command_hltrim)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  key_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  filed_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&start_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&stop_) -
      reinterpret_cast<char*>(&start_)) + sizeof(stop_));
  _internal_metadata_.Clear();
}

bool command_hltrim::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:client.command_hltrim)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string key = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_key()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->key().data(), static_cast<int>(this->key().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "client.command_hltrim.key"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string filed = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_filed()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->filed().data(), static_cast<int>(this->filed().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "client.command_hltrim.filed"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 start = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &start_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 stop = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &stop_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:client.command_hltrim)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:client.command_hltrim)
  return false;
#undef DO_
}

void command_hltrim::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:client.command_hltrim)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string key = 1;
  if (this->key().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->key().data(), static_cast<int>(this->key().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "client.command_hltrim.key");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->key(), output);
  }

  // string filed = 2;
  if (this->filed().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->filed().data(), static_cast<int>(this->filed().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "client.command_hltrim.filed");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->filed(), output);
  }

  // int32 start = 3;
  if (this->start() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->start(), output);
  }

  // int32 stop = 4;
  if (this->stop() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->stop(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:client.command_hltrim)
}

::google::protobuf::uint8* command_hltrim::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:client.command_hltrim)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string key = 1;
  if (this->key().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->key().data(), static_cast<int>(this->key().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "client.command_hltrim.key");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->key(), target);
  }

  // string filed = 2;
  if (this->filed().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->filed().data(), static_cast<int>(this->filed().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "client.command_hltrim.filed");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->filed(), target);
  }

  // int32 start = 3;
  if (this->start() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->start(), target);
  }

  // int32 stop = 4;
  if (this->stop() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->stop(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:client.command_hltrim)
  return target;
}

size_t command_hltrim::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:client.command_hltrim)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // string key = 1;
  if (this->key().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->key());
  }

  // string filed = 2;
  if (this->filed().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->filed());
  }

  // int32 start = 3;
  if (this->start() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->start());
  }

  // int32 stop = 4;
  if (this->stop() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->stop());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void command_hltrim::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:client.command_hltrim)
  GOOGLE_DCHECK_NE(&from, this);
  const command_hltrim* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const command_hltrim>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:client.command_hltrim)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:client.command_hltrim)
    MergeFrom(*source);
  }
}

void command_hltrim::MergeFrom(const command_hltrim& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:client.command_hltrim)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.key().size() > 0) {

    key_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.key_);
  }
  if (from.filed().size() > 0) {

    filed_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.filed_);
  }
  if (from.start() != 0) {
    set_start(from.start());
  }
  if (from.stop() != 0) {
    set_stop(from.stop());
  }
}

void command_hltrim::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:client.command_hltrim)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void command_hltrim::CopyFrom(const command_hltrim& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:client.command_hltrim)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool command_hltrim::IsInitialized() const {
  return true;
}

void command_hltrim::Swap(command_hltrim* other) {
  if (other == this) return;
  InternalSwap(other);
}
void command_hltrim::InternalSwap(command_hltrim* other) {
  using std::swap;
  key_.Swap(&other->key_);
  filed_.Swap(&other->filed_);
  swap(start_, other->start_);
  swap(stop_, other->stop_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata command_hltrim::GetMetadata() const {
  protobuf_message_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_message_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void command_hmltrim::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int command_hmltrim::kKeyFieldNumber;
const int command_hmltrim::kFiledsFieldNumber;
const int command_hmltrim::kStartFieldNumber;
const int command_hmltrim::kStopFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

command_hmltrim::command_hmltrim()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_message_2eproto::InitDefaultscommand_hmltrim();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:client.command_hmltrim)
}
command_hmltrim::command_hmltrim(const command_hmltrim& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      fileds_(from.fileds_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  key_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.key().size() > 0) {
    key_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.key_);
  }
  ::memcpy(&start_, &from.start_,
    static_cast<size_t>(reinterpret_cast<char*>(&stop_) -
    reinterpret_cast<char*>(&start_)) + sizeof(stop_));
  // @@protoc_insertion_point(copy_constructor:client.command_hmltrim)
}

void command_hmltrim::SharedCtor() {
  key_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&start_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&stop_) -
      reinterpret_cast<char*>(&start_)) + sizeof(stop_));
  _cached_size_ = 0;
}

command_hmltrim::~command_hmltrim() {
  // @@protoc_insertion_point(destructor:client.command_hmltrim)
  SharedDtor();
}

void command_hmltrim::SharedDtor() {
  key_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void command_hmltrim::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* command_hmltrim::descriptor() {
  ::protobuf_message_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_message_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const command_hmltrim& command_hmltrim::default_instance() {
  ::protobuf_message_2eproto::InitDefaultscommand_hmltrim();
  return *internal_default_instance();
}

command_hmltrim* command_hmltrim::New(::google::protobuf::Arena* arena) const {
  command_hmltrim* n = new command_hmltrim;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void command_hmltrim::Clear() {
// @@protoc_insertion_point(message_clear_start:client.command_hmltrim)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  fileds_.Clear();
  key_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&start_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&stop_) -
      reinterpret_cast<char*>(&start_)) + sizeof(stop_));
  _internal_metadata_.Clear();
}

bool command_hmltrim::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:client.command_hmltrim)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string key = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_key()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->key().data(), static_cast<int>(this->key().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "client.command_hmltrim.key"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated string fileds = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_fileds()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->fileds(this->fileds_size() - 1).data(),
            static_cast<int>(this->fileds(this->fileds_size() - 1).length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "client.command_hmltrim.fileds"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 start = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &start_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 stop = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &stop_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:client.command_hmltrim)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:client.command_hmltrim)
  return false;
#undef DO_
}

void command_hmltrim::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:client.command_hmltrim)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string key = 1;
  if (this->key().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->key().data(), static_cast<int>(this->key().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "client.command_hmltrim.key");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->key(), output);
  }

  // repeated string fileds = 2;
  for (int i = 0, n = this->fileds_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->fileds(i).data(), static_cast<int>(this->fileds(i).length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "client.command_hmltrim.fileds");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->fileds(i), output);
  }

  // int32 start = 3;
  if (this->start() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->start(), output);
  }

  // int32 stop = 4;
  if (this->stop() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->stop(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:client.command_hmltrim)
}

::google::protobuf::uint8* command_hmltrim::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:client.command_hmltrim)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string key = 1;
  if (this->key().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->key().data(), static_cast<int>(this->key().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "client.command_hmltrim.key");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->key(), target);
  }

  // repeated string fileds = 2;
  for (int i = 0, n = this->fileds_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->fileds(i).data(), static_cast<int>(this->fileds(i).length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "client.command_hmltrim.fileds");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(2, this->fileds(i), target);
  }

  // int32 start = 3;
  if (this->start() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->start(), target);
  }

  // int32 stop = 4;
  if (this->stop() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->stop(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:client.command_hmltrim)
  return target;
}

size_t command_hmltrim::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:client.command_hmltrim)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // repeated string fileds = 2;
  total_size += 1 *
      ::google::protobuf::internal::FromIntSize(this->fileds_size());
  for (int i = 0, n = this->fileds_size(); i < n; i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->fileds(i));
  }

  // string key = 1;
  if (this->key().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->key());
  }

  // int32 start = 3;
  if (this->start() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->start());
  }

  // int32 stop = 4;
  if (this->stop() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->stop());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void command_hmltrim::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:client.command_hmltrim)
  GOOGLE_DCHECK_NE(&from, this);
  const command_hmltrim* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const command_hmltrim>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:client.command_hmltrim)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:client.command_hmltrim)
    MergeFrom(*source);
  }
}

void command_hmltrim::MergeFrom(const command_hmltrim& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:client.command_hmltrim)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  fileds_.MergeFrom(from.fileds_);
  if (from.key().size() > 0) {

    key_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.key_);
  }
  if (from.start() != 0) {
    set_start(from.start());
  }
  if (from.stop() != 0) {
    set_stop(from.stop());
  }
}

void command_hmltrim::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:client.command_hmltrim)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void command_hmltrim::CopyFrom(const command_hmltrim& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:client.command_hmltrim)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool command_hmltrim::IsInitialized() const {
  return true;
}

void command_hmltrim::Swap(command_hmltrim* other) {
  if (other == this) return;
  InternalSwap(other);
}
void command_hmltrim::InternalSwap(command_hmltrim* other) {
  using std::swap;
  fileds_.InternalSwap(&other->fileds_);
  key_.Swap(&other->key_);
  swap(start_, other->start_);
  swap(stop_, other->stop_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata command_hmltrim::GetMetadata() const {
  protobuf_message_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_message_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void command_mhmltrim::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int command_mhmltrim::kKeysFieldNumber;
const int command_mhmltrim::kFiledsFieldNumber;
const int command_mhmltrim::kStartFieldNumber;
const int command_mhmltrim::kStopFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

command_mhmltrim::command_mhmltrim()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_message_2eproto::InitDefaultscommand_mhmltrim();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:client.command_mhmltrim)
}
command_mhmltrim::command_mhmltrim(const command_mhmltrim& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      keys_(from.keys_),
      fileds_(from.fileds_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&start_, &from.start_,
    static_cast<size_t>(reinterpret_cast<char*>(&stop_) -
    reinterpret_cast<char*>(&start_)) + sizeof(stop_));
  // @@protoc_insertion_point(copy_constructor:client.command_mhmltrim)
}

void command_mhmltrim::SharedCtor() {
  ::memset(&start_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&stop_) -
      reinterpret_cast<char*>(&start_)) + sizeof(stop_));
  _cached_size_ = 0;
}

command_mhmltrim::~command_mhmltrim() {
  // @@protoc_insertion_point(destructor:client.command_mhmltrim)
  SharedDtor();
}

void command_mhmltrim::SharedDtor() {
}

void command_mhmltrim::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* command_mhmltrim::descriptor() {
  ::protobuf_message_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_message_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const command_mhmltrim& command_mhmltrim::default_instance() {
  ::protobuf_message_2eproto::InitDefaultscommand_mhmltrim();
  return *internal_default_instance();
}

command_mhmltrim* command_mhmltrim::New(::google::protobuf::Arena* arena) const {
  command_mhmltrim* n = new command_mhmltrim;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void command_mhmltrim::Clear() {
// @@protoc_insertion_point(message_clear_start:client.command_mhmltrim)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  keys_.Clear();
  fileds_.Clear();
  ::memset(&start_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&stop_) -
      reinterpret_cast<char*>(&start_)) + sizeof(stop_));
  _internal_metadata_.Clear();
}

bool command_mhmltrim::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:client.command_mhmltrim)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated string keys = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_keys()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->keys(this->keys_size() - 1).data(),
            static_cast<int>(this->keys(this->keys_size() - 1).length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "client.command_mhmltrim.keys"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated string fileds = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_fileds()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->fileds(this->fileds_size() - 1).data(),
            static_cast<int>(this->fileds(this->fileds_size() - 1).length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "client.command_mhmltrim.fileds"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 start = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &start_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 stop = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &stop_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:client.command_mhmltrim)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:client.command_mhmltrim)
  return false;
#undef DO_
}

void command_mhmltrim::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:client.command_mhmltrim)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated string keys = 1;
  for (int i = 0, n = this->keys_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->keys(i).data(), static_cast<int>(this->keys(i).length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "client.command_mhmltrim.keys");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->keys(i), output);
  }

  // repeated string fileds = 2;
  for (int i = 0, n = this->fileds_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->fileds(i).data(), static_cast<int>(this->fileds(i).length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "client.command_mhmltrim.fileds");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->fileds(i), output);
  }

  // int32 start = 3;
  if (this->start() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->start(), output);
  }

  // int32 stop = 4;
  if (this->stop() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->stop(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:client.command_mhmltrim)
}

::google::protobuf::uint8* command_mhmltrim::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:client.command_mhmltrim)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated string keys = 1;
  for (int i = 0, n = this->keys_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->keys(i).data(), static_cast<int>(this->keys(i).length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "client.command_mhmltrim.keys");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(1, this->keys(i), target);
  }

  // repeated string fileds = 2;
  for (int i = 0, n = this->fileds_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->fileds(i).data(), static_cast<int>(this->fileds(i).length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "client.command_mhmltrim.fileds");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(2, this->fileds(i), target);
  }

  // int32 start = 3;
  if (this->start() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->start(), target);
  }

  // int32 stop = 4;
  if (this->stop() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->stop(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:client.command_mhmltrim)
  return target;
}

size_t command_mhmltrim::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:client.command_mhmltrim)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // repeated string keys = 1;
  total_size += 1 *
      ::google::protobuf::internal::FromIntSize(this->keys_size());
  for (int i = 0, n = this->keys_size(); i < n; i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->keys(i));
  }

  // repeated string fileds = 2;
  total_size += 1 *
      ::google::protobuf::internal::FromIntSize(this->fileds_size());
  for (int i = 0, n = this->fileds_size(); i < n; i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->fileds(i));
  }

  // int32 start = 3;
  if (this->start() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->start());
  }

  // int32 stop = 4;
  if (this->stop() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->stop());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void command_mhmltrim::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:client.command_mhmltrim)
  GOOGLE_DCHECK_NE(&from, this);
  const command_mhmltrim* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const command_mhmltrim>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:client.command_mhmltrim)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:client.command_mhmltrim)
    MergeFrom(*source);
  }
}

void command_mhmltrim::MergeFrom(const command_mhmltrim& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:client.command_mhmltrim)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  keys_.MergeFrom(from.keys_);
  fileds_.MergeFrom(from.fileds_);
  if (from.start() != 0) {
    set_start(from.start());
  }
  if (from.stop() != 0) {
    set_stop(from.stop());
  }
}

void command_mhmltrim::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:client.command_mhmltrim)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void command_mhmltrim::CopyFrom(const command_mhmltrim& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:client.command_mhmltrim)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool command_mhmltrim::IsInitialized() const {
  return true;
}

void command_mhmltrim::Swap(command_mhmltrim* other) {
  if (other == this) return;
  InternalSwap(other);
}
void command_mhmltrim::InternalSwap(command_mhmltrim* other) {
  using std::swap;
  keys_.InternalSwap(&other->keys_);
  fileds_.InternalSwap(&other->fileds_);
  swap(start_, other->start_);
  swap(stop_, other->stop_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata command_mhmltrim::GetMetadata() const {
  protobuf_message_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_message_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void command_llen::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int command_llen::kKeyFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

command_llen::command_llen()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_message_2eproto::InitDefaultscommand_llen();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:client.command_llen)
}
command_llen::command_llen(const command_llen& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  key_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.key().size() > 0) {
    key_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.key_);
  }
  // @@protoc_insertion_point(copy_constructor:client.command_llen)
}

void command_llen::SharedCtor() {
  key_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _cached_size_ = 0;
}

command_llen::~command_llen() {
  // @@protoc_insertion_point(destructor:client.command_llen)
  SharedDtor();
}

void command_llen::SharedDtor() {
  key_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void command_llen::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* command_llen::descriptor() {
  ::protobuf_message_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_message_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const command_llen& command_llen::default_instance() {
  ::protobuf_message_2eproto::InitDefaultscommand_llen();
  return *internal_default_instance();
}

command_llen* command_llen::New(::google::protobuf::Arena* arena) const {
  command_llen* n = new command_llen;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void command_llen::Clear() {
// @@protoc_insertion_point(message_clear_start:client.command_llen)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  key_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _internal_metadata_.Clear();
}

bool command_llen::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:client.command_llen)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string key = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_key()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->key().data(), static_cast<int>(this->key().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "client.command_llen.key"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:client.command_llen)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:client.command_llen)
  return false;
#undef DO_
}

void command_llen::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:client.command_llen)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string key = 1;
  if (this->key().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->key().data(), static_cast<int>(this->key().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "client.command_llen.key");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->key(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:client.command_llen)
}

::google::protobuf::uint8* command_llen::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:client.command_llen)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string key = 1;
  if (this->key().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->key().data(), static_cast<int>(this->key().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "client.command_llen.key");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->key(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:client.command_llen)
  return target;
}

size_t command_llen::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:client.command_llen)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // string key = 1;
  if (this->key().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->key());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void command_llen::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:client.command_llen)
  GOOGLE_DCHECK_NE(&from, this);
  const command_llen* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const command_llen>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:client.command_llen)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:client.command_llen)
    MergeFrom(*source);
  }
}

void command_llen::MergeFrom(const command_llen& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:client.command_llen)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.key().size() > 0) {

    key_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.key_);
  }
}

void command_llen::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:client.command_llen)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void command_llen::CopyFrom(const command_llen& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:client.command_llen)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool command_llen::IsInitialized() const {
  return true;
}

void command_llen::Swap(command_llen* other) {
  if (other == this) return;
  InternalSwap(other);
}
void command_llen::InternalSwap(command_llen* other) {
  using std::swap;
  key_.Swap(&other->key_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata command_llen::GetMetadata() const {
  protobuf_message_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_message_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void command_llen_reply::InitAsDefaultInstance() {
  ::client::_command_llen_reply_default_instance_._instance.get_mutable()->state_ = const_cast< ::client::command_reply*>(
      ::client::command_reply::internal_default_instance());
  ::client::_command_llen_reply_default_instance_._instance.get_mutable()->data_ = const_cast< ::data::VALUE*>(
      ::data::VALUE::internal_default_instance());
}
void command_llen_reply::clear_data() {
  if (GetArenaNoVirtual() == NULL && data_ != NULL) {
    delete data_;
  }
  data_ = NULL;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int command_llen_reply::kStateFieldNumber;
const int command_llen_reply::kDataFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

command_llen_reply::command_llen_reply()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_message_2eproto::InitDefaultscommand_llen_reply();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:client.command_llen_reply)
}
command_llen_reply::command_llen_reply(const command_llen_reply& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_state()) {
    state_ = new ::client::command_reply(*from.state_);
  } else {
    state_ = NULL;
  }
  if (from.has_data()) {
    data_ = new ::data::VALUE(*from.data_);
  } else {
    data_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:client.command_llen_reply)
}

void command_llen_reply::SharedCtor() {
  ::memset(&state_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&data_) -
      reinterpret_cast<char*>(&state_)) + sizeof(data_));
  _cached_size_ = 0;
}

command_llen_reply::~command_llen_reply() {
  // @@protoc_insertion_point(destructor:client.command_llen_reply)
  SharedDtor();
}

void command_llen_reply::SharedDtor() {
  if (this != internal_default_instance()) delete state_;
  if (this != internal_default_instance()) delete data_;
}

void command_llen_reply::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* command_llen_reply::descriptor() {
  ::protobuf_message_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_message_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const command_llen_reply& command_llen_reply::default_instance() {
  ::protobuf_message_2eproto::InitDefaultscommand_llen_reply();
  return *internal_default_instance();
}

command_llen_reply* command_llen_reply::New(::google::protobuf::Arena* arena) const {
  command_llen_reply* n = new command_llen_reply;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void command_llen_reply::Clear() {
// @@protoc_insertion_point(message_clear_start:client.command_llen_reply)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == NULL && state_ != NULL) {
    delete state_;
  }
  state_ = NULL;
  if (GetArenaNoVirtual() == NULL && data_ != NULL) {
    delete data_;
  }
  data_ = NULL;
  _internal_metadata_.Clear();
}

bool command_llen_reply::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:client.command_llen_reply)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .client.command_reply state = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_state()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .data.VALUE data = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_data()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:client.command_llen_reply)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:client.command_llen_reply)
  return false;
#undef DO_
}

void command_llen_reply::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:client.command_llen_reply)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .client.command_reply state = 1;
  if (this->has_state()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->state_, output);
  }

  // .data.VALUE data = 2;
  if (this->has_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->data_, output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:client.command_llen_reply)
}

::google::protobuf::uint8* command_llen_reply::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:client.command_llen_reply)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .client.command_reply state = 1;
  if (this->has_state()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, *this->state_, deterministic, target);
  }

  // .data.VALUE data = 2;
  if (this->has_data()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, *this->data_, deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:client.command_llen_reply)
  return target;
}

size_t command_llen_reply::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:client.command_llen_reply)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // .client.command_reply state = 1;
  if (this->has_state()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->state_);
  }

  // .data.VALUE data = 2;
  if (this->has_data()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->data_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void command_llen_reply::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:client.command_llen_reply)
  GOOGLE_DCHECK_NE(&from, this);
  const command_llen_reply* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const command_llen_reply>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:client.command_llen_reply)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:client.command_llen_reply)
    MergeFrom(*source);
  }
}

void command_llen_reply::MergeFrom(const command_llen_reply& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:client.command_llen_reply)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_state()) {
    mutable_state()->::client::command_reply::MergeFrom(from.state());
  }
  if (from.has_data()) {
    mutable_data()->::data::VALUE::MergeFrom(from.data());
  }
}

void command_llen_reply::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:client.command_llen_reply)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void command_llen_reply::CopyFrom(const command_llen_reply& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:client.command_llen_reply)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool command_llen_reply::IsInitialized() const {
  return true;
}

void command_llen_reply::Swap(command_llen_reply* other) {
  if (other == this) return;
  InternalSwap(other);
}
void command_llen_reply::InternalSwap(command_llen_reply* other) {
  using std::swap;
  swap(state_, other->state_);
  swap(data_, other->data_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata command_llen_reply::GetMetadata() const {
  protobuf_message_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_message_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void command_mllen::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int command_mllen::kKeysFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

command_mllen::command_mllen()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_message_2eproto::InitDefaultscommand_mllen();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:client.command_mllen)
}
command_mllen::command_mllen(const command_mllen& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      keys_(from.keys_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:client.command_mllen)
}

void command_mllen::SharedCtor() {
  _cached_size_ = 0;
}

command_mllen::~command_mllen() {
  // @@protoc_insertion_point(destructor:client.command_mllen)
  SharedDtor();
}

void command_mllen::SharedDtor() {
}

void command_mllen::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* command_mllen::descriptor() {
  ::protobuf_message_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_message_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const command_mllen& command_mllen::default_instance() {
  ::protobuf_message_2eproto::InitDefaultscommand_mllen();
  return *internal_default_instance();
}

command_mllen* command_mllen::New(::google::protobuf::Arena* arena) const {
  command_mllen* n = new command_mllen;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void command_mllen::Clear() {
// @@protoc_insertion_point(message_clear_start:client.command_mllen)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  keys_.Clear();
  _internal_metadata_.Clear();
}

bool command_mllen::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:client.command_mllen)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated string keys = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_keys()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->keys(this->keys_size() - 1).data(),
            static_cast<int>(this->keys(this->keys_size() - 1).length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "client.command_mllen.keys"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:client.command_mllen)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:client.command_mllen)
  return false;
#undef DO_
}

void command_mllen::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:client.command_mllen)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated string keys = 1;
  for (int i = 0, n = this->keys_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->keys(i).data(), static_cast<int>(this->keys(i).length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "client.command_mllen.keys");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->keys(i), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:client.command_mllen)
}

::google::protobuf::uint8* command_mllen::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:client.command_mllen)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated string keys = 1;
  for (int i = 0, n = this->keys_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->keys(i).data(), static_cast<int>(this->keys(i).length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "client.command_mllen.keys");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(1, this->keys(i), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:client.command_mllen)
  return target;
}

size_t command_mllen::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:client.command_mllen)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // repeated string keys = 1;
  total_size += 1 *
      ::google::protobuf::internal::FromIntSize(this->keys_size());
  for (int i = 0, n = this->keys_size(); i < n; i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->keys(i));
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void command_mllen::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:client.command_mllen)
  GOOGLE_DCHECK_NE(&from, this);
  const command_mllen* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const command_mllen>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:client.command_mllen)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:client.command_mllen)
    MergeFrom(*source);
  }
}

void command_mllen::MergeFrom(const command_mllen& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:client.command_mllen)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  keys_.MergeFrom(from.keys_);
}

void command_mllen::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:client.command_mllen)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void command_mllen::CopyFrom(const command_mllen& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:client.command_mllen)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool command_mllen::IsInitialized() const {
  return true;
}

void command_mllen::Swap(command_mllen* other) {
  if (other == this) return;
  InternalSwap(other);
}
void command_mllen::InternalSwap(command_mllen* other) {
  using std::swap;
  keys_.InternalSwap(&other->keys_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata command_mllen::GetMetadata() const {
  protobuf_message_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_message_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void command_mllen_reply::InitAsDefaultInstance() {
  ::client::_command_mllen_reply_default_instance_._instance.get_mutable()->state_ = const_cast< ::client::command_reply*>(
      ::client::command_reply::internal_default_instance());
}
void command_mllen_reply::clear_data() {
  data_.Clear();
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int command_mllen_reply::kStateFieldNumber;
const int command_mllen_reply::kDataFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

command_mllen_reply::command_mllen_reply()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_message_2eproto::InitDefaultscommand_mllen_reply();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:client.command_mllen_reply)
}
command_mllen_reply::command_mllen_reply(const command_mllen_reply& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      data_(from.data_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_state()) {
    state_ = new ::client::command_reply(*from.state_);
  } else {
    state_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:client.command_mllen_reply)
}

void command_mllen_reply::SharedCtor() {
  state_ = NULL;
  _cached_size_ = 0;
}

command_mllen_reply::~command_mllen_reply() {
  // @@protoc_insertion_point(destructor:client.command_mllen_reply)
  SharedDtor();
}

void command_mllen_reply::SharedDtor() {
  if (this != internal_default_instance()) delete state_;
}

void command_mllen_reply::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* command_mllen_reply::descriptor() {
  ::protobuf_message_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_message_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const command_mllen_reply& command_mllen_reply::default_instance() {
  ::protobuf_message_2eproto::InitDefaultscommand_mllen_reply();
  return *internal_default_instance();
}

command_mllen_reply* command_mllen_reply::New(::google::protobuf::Arena* arena) const {
  command_mllen_reply* n = new command_mllen_reply;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void command_mllen_reply::Clear() {
// @@protoc_insertion_point(message_clear_start:client.command_mllen_reply)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  data_.Clear();
  if (GetArenaNoVirtual() == NULL && state_ != NULL) {
    delete state_;
  }
  state_ = NULL;
  _internal_metadata_.Clear();
}

bool command_mllen_reply::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:client.command_mllen_reply)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .client.command_reply state = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_state()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .data.VALUE data = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(input, add_data()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:client.command_mllen_reply)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:client.command_mllen_reply)
  return false;
#undef DO_
}

void command_mllen_reply::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:client.command_mllen_reply)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .client.command_reply state = 1;
  if (this->has_state()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->state_, output);
  }

  // repeated .data.VALUE data = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->data_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->data(static_cast<int>(i)), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:client.command_mllen_reply)
}

::google::protobuf::uint8* command_mllen_reply::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:client.command_mllen_reply)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .client.command_reply state = 1;
  if (this->has_state()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, *this->state_, deterministic, target);
  }

  // repeated .data.VALUE data = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->data_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, this->data(static_cast<int>(i)), deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:client.command_mllen_reply)
  return target;
}

size_t command_mllen_reply::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:client.command_mllen_reply)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // repeated .data.VALUE data = 2;
  {
    unsigned int count = static_cast<unsigned int>(this->data_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->data(static_cast<int>(i)));
    }
  }

  // .client.command_reply state = 1;
  if (this->has_state()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->state_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void command_mllen_reply::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:client.command_mllen_reply)
  GOOGLE_DCHECK_NE(&from, this);
  const command_mllen_reply* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const command_mllen_reply>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:client.command_mllen_reply)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:client.command_mllen_reply)
    MergeFrom(*source);
  }
}

void command_mllen_reply::MergeFrom(const command_mllen_reply& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:client.command_mllen_reply)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  data_.MergeFrom(from.data_);
  if (from.has_state()) {
    mutable_state()->::client::command_reply::MergeFrom(from.state());
  }
}

void command_mllen_reply::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:client.command_mllen_reply)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void command_mllen_reply::CopyFrom(const command_mllen_reply& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:client.command_mllen_reply)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool command_mllen_reply::IsInitialized() const {
  return true;
}

void command_mllen_reply::Swap(command_mllen_reply* other) {
  if (other == this) return;
  InternalSwap(other);
}
void command_mllen_reply::InternalSwap(command_mllen_reply* other) {
  using std::swap;
  data_.InternalSwap(&other->data_);
  swap(state_, other->state_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata command_mllen_reply::GetMetadata() const {
  protobuf_message_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_message_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void command_hllen::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int command_hllen::kKeyFieldNumber;
const int command_hllen::kFieldFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

command_hllen::command_hllen()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_message_2eproto::InitDefaultscommand_hllen();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:client.command_hllen)
}
command_hllen::command_hllen(const command_hllen& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  key_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.key().size() > 0) {
    key_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.key_);
  }
  field_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.field().size() > 0) {
    field_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.field_);
  }
  // @@protoc_insertion_point(copy_constructor:client.command_hllen)
}

void command_hllen::SharedCtor() {
  key_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  field_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _cached_size_ = 0;
}

command_hllen::~command_hllen() {
  // @@protoc_insertion_point(destructor:client.command_hllen)
  SharedDtor();
}

void command_hllen::SharedDtor() {
  key_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  field_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void command_hllen::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* command_hllen::descriptor() {
  ::protobuf_message_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_message_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const command_hllen& command_hllen::default_instance() {
  ::protobuf_message_2eproto::InitDefaultscommand_hllen();
  return *internal_default_instance();
}

command_hllen* command_hllen::New(::google::protobuf::Arena* arena) const {
  command_hllen* n = new command_hllen;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void command_hllen::Clear() {
// @@protoc_insertion_point(message_clear_start:client.command_hllen)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  key_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  field_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _internal_metadata_.Clear();
}

bool command_hllen::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:client.command_hllen)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string key = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_key()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->key().data(), static_cast<int>(this->key().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "client.command_hllen.key"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string field = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_field()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->field().data(), static_cast<int>(this->field().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "client.command_hllen.field"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:client.command_hllen)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:client.command_hllen)
  return false;
#undef DO_
}

void command_hllen::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:client.command_hllen)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string key = 1;
  if (this->key().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->key().data(), static_cast<int>(this->key().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "client.command_hllen.key");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->key(), output);
  }

  // string field = 2;
  if (this->field().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->field().data(), static_cast<int>(this->field().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "client.command_hllen.field");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->field(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:client.command_hllen)
}

::google::protobuf::uint8* command_hllen::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:client.command_hllen)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string key = 1;
  if (this->key().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->key().data(), static_cast<int>(this->key().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "client.command_hllen.key");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->key(), target);
  }

  // string field = 2;
  if (this->field().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->field().data(), static_cast<int>(this->field().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "client.command_hllen.field");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->field(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:client.command_hllen)
  return target;
}

size_t command_hllen::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:client.command_hllen)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // string key = 1;
  if (this->key().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->key());
  }

  // string field = 2;
  if (this->field().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->field());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void command_hllen::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:client.command_hllen)
  GOOGLE_DCHECK_NE(&from, this);
  const command_hllen* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const command_hllen>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:client.command_hllen)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:client.command_hllen)
    MergeFrom(*source);
  }
}

void command_hllen::MergeFrom(const command_hllen& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:client.command_hllen)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.key().size() > 0) {

    key_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.key_);
  }
  if (from.field().size() > 0) {

    field_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.field_);
  }
}

void command_hllen::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:client.command_hllen)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void command_hllen::CopyFrom(const command_hllen& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:client.command_hllen)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool command_hllen::IsInitialized() const {
  return true;
}

void command_hllen::Swap(command_hllen* other) {
  if (other == this) return;
  InternalSwap(other);
}
void command_hllen::InternalSwap(command_hllen* other) {
  using std::swap;
  key_.Swap(&other->key_);
  field_.Swap(&other->field_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata command_hllen::GetMetadata() const {
  protobuf_message_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_message_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void command_hllen_reply::InitAsDefaultInstance() {
  ::client::_command_hllen_reply_default_instance_._instance.get_mutable()->state_ = const_cast< ::client::command_reply*>(
      ::client::command_reply::internal_default_instance());
  ::client::_command_hllen_reply_default_instance_._instance.get_mutable()->data_ = const_cast< ::data::VALUE*>(
      ::data::VALUE::internal_default_instance());
}
void command_hllen_reply::clear_data() {
  if (GetArenaNoVirtual() == NULL && data_ != NULL) {
    delete data_;
  }
  data_ = NULL;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int command_hllen_reply::kStateFieldNumber;
const int command_hllen_reply::kDataFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

command_hllen_reply::command_hllen_reply()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_message_2eproto::InitDefaultscommand_hllen_reply();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:client.command_hllen_reply)
}
command_hllen_reply::command_hllen_reply(const command_hllen_reply& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_state()) {
    state_ = new ::client::command_reply(*from.state_);
  } else {
    state_ = NULL;
  }
  if (from.has_data()) {
    data_ = new ::data::VALUE(*from.data_);
  } else {
    data_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:client.command_hllen_reply)
}

void command_hllen_reply::SharedCtor() {
  ::memset(&state_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&data_) -
      reinterpret_cast<char*>(&state_)) + sizeof(data_));
  _cached_size_ = 0;
}

command_hllen_reply::~command_hllen_reply() {
  // @@protoc_insertion_point(destructor:client.command_hllen_reply)
  SharedDtor();
}

void command_hllen_reply::SharedDtor() {
  if (this != internal_default_instance()) delete state_;
  if (this != internal_default_instance()) delete data_;
}

void command_hllen_reply::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* command_hllen_reply::descriptor() {
  ::protobuf_message_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_message_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const command_hllen_reply& command_hllen_reply::default_instance() {
  ::protobuf_message_2eproto::InitDefaultscommand_hllen_reply();
  return *internal_default_instance();
}

command_hllen_reply* command_hllen_reply::New(::google::protobuf::Arena* arena) const {
  command_hllen_reply* n = new command_hllen_reply;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void command_hllen_reply::Clear() {
// @@protoc_insertion_point(message_clear_start:client.command_hllen_reply)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == NULL && state_ != NULL) {
    delete state_;
  }
  state_ = NULL;
  if (GetArenaNoVirtual() == NULL && data_ != NULL) {
    delete data_;
  }
  data_ = NULL;
  _internal_metadata_.Clear();
}

bool command_hllen_reply::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:client.command_hllen_reply)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .client.command_reply state = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_state()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .data.VALUE data = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_data()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:client.command_hllen_reply)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:client.command_hllen_reply)
  return false;
#undef DO_
}

void command_hllen_reply::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:client.command_hllen_reply)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .client.command_reply state = 1;
  if (this->has_state()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->state_, output);
  }

  // .data.VALUE data = 2;
  if (this->has_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->data_, output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:client.command_hllen_reply)
}

::google::protobuf::uint8* command_hllen_reply::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:client.command_hllen_reply)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .client.command_reply state = 1;
  if (this->has_state()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, *this->state_, deterministic, target);
  }

  // .data.VALUE data = 2;
  if (this->has_data()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, *this->data_, deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:client.command_hllen_reply)
  return target;
}

size_t command_hllen_reply::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:client.command_hllen_reply)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // .client.command_reply state = 1;
  if (this->has_state()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->state_);
  }

  // .data.VALUE data = 2;
  if (this->has_data()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->data_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void command_hllen_reply::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:client.command_hllen_reply)
  GOOGLE_DCHECK_NE(&from, this);
  const command_hllen_reply* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const command_hllen_reply>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:client.command_hllen_reply)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:client.command_hllen_reply)
    MergeFrom(*source);
  }
}

void command_hllen_reply::MergeFrom(const command_hllen_reply& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:client.command_hllen_reply)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_state()) {
    mutable_state()->::client::command_reply::MergeFrom(from.state());
  }
  if (from.has_data()) {
    mutable_data()->::data::VALUE::MergeFrom(from.data());
  }
}

void command_hllen_reply::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:client.command_hllen_reply)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void command_hllen_reply::CopyFrom(const command_hllen_reply& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:client.command_hllen_reply)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool command_hllen_reply::IsInitialized() const {
  return true;
}

void command_hllen_reply::Swap(command_hllen_reply* other) {
  if (other == this) return;
  InternalSwap(other);
}
void command_hllen_reply::InternalSwap(command_hllen_reply* other) {
  using std::swap;
  swap(state_, other->state_);
  swap(data_, other->data_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata command_hllen_reply::GetMetadata() const {
  protobuf_message_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_message_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void command_hmllen::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int command_hmllen::kKeyFieldNumber;
const int command_hmllen::kFieldsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

command_hmllen::command_hmllen()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_message_2eproto::InitDefaultscommand_hmllen();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:client.command_hmllen)
}
command_hmllen::command_hmllen(const command_hmllen& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      fields_(from.fields_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  key_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.key().size() > 0) {
    key_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.key_);
  }
  // @@protoc_insertion_point(copy_constructor:client.command_hmllen)
}

void command_hmllen::SharedCtor() {
  key_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _cached_size_ = 0;
}

command_hmllen::~command_hmllen() {
  // @@protoc_insertion_point(destructor:client.command_hmllen)
  SharedDtor();
}

void command_hmllen::SharedDtor() {
  key_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void command_hmllen::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* command_hmllen::descriptor() {
  ::protobuf_message_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_message_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const command_hmllen& command_hmllen::default_instance() {
  ::protobuf_message_2eproto::InitDefaultscommand_hmllen();
  return *internal_default_instance();
}

command_hmllen* command_hmllen::New(::google::protobuf::Arena* arena) const {
  command_hmllen* n = new command_hmllen;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void command_hmllen::Clear() {
// @@protoc_insertion_point(message_clear_start:client.command_hmllen)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  fields_.Clear();
  key_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _internal_metadata_.Clear();
}

bool command_hmllen::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:client.command_hmllen)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string key = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_key()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->key().data(), static_cast<int>(this->key().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "client.command_hmllen.key"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated string fields = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_fields()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->fields(this->fields_size() - 1).data(),
            static_cast<int>(this->fields(this->fields_size() - 1).length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "client.command_hmllen.fields"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:client.command_hmllen)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:client.command_hmllen)
  return false;
#undef DO_
}

void command_hmllen::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:client.command_hmllen)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string key = 1;
  if (this->key().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->key().data(), static_cast<int>(this->key().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "client.command_hmllen.key");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->key(), output);
  }

  // repeated string fields = 2;
  for (int i = 0, n = this->fields_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->fields(i).data(), static_cast<int>(this->fields(i).length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "client.command_hmllen.fields");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->fields(i), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:client.command_hmllen)
}

::google::protobuf::uint8* command_hmllen::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:client.command_hmllen)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string key = 1;
  if (this->key().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->key().data(), static_cast<int>(this->key().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "client.command_hmllen.key");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->key(), target);
  }

  // repeated string fields = 2;
  for (int i = 0, n = this->fields_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->fields(i).data(), static_cast<int>(this->fields(i).length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "client.command_hmllen.fields");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(2, this->fields(i), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:client.command_hmllen)
  return target;
}

size_t command_hmllen::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:client.command_hmllen)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // repeated string fields = 2;
  total_size += 1 *
      ::google::protobuf::internal::FromIntSize(this->fields_size());
  for (int i = 0, n = this->fields_size(); i < n; i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->fields(i));
  }

  // string key = 1;
  if (this->key().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->key());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void command_hmllen::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:client.command_hmllen)
  GOOGLE_DCHECK_NE(&from, this);
  const command_hmllen* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const command_hmllen>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:client.command_hmllen)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:client.command_hmllen)
    MergeFrom(*source);
  }
}

void command_hmllen::MergeFrom(const command_hmllen& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:client.command_hmllen)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  fields_.MergeFrom(from.fields_);
  if (from.key().size() > 0) {

    key_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.key_);
  }
}

void command_hmllen::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:client.command_hmllen)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void command_hmllen::CopyFrom(const command_hmllen& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:client.command_hmllen)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool command_hmllen::IsInitialized() const {
  return true;
}

void command_hmllen::Swap(command_hmllen* other) {
  if (other == this) return;
  InternalSwap(other);
}
void command_hmllen::InternalSwap(command_hmllen* other) {
  using std::swap;
  fields_.InternalSwap(&other->fields_);
  key_.Swap(&other->key_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata command_hmllen::GetMetadata() const {
  protobuf_message_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_message_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void command_hmllen_reply::InitAsDefaultInstance() {
  ::client::_command_hmllen_reply_default_instance_._instance.get_mutable()->state_ = const_cast< ::client::command_reply*>(
      ::client::command_reply::internal_default_instance());
}
void command_hmllen_reply::clear_data() {
  data_.Clear();
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int command_hmllen_reply::kStateFieldNumber;
const int command_hmllen_reply::kDataFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

command_hmllen_reply::command_hmllen_reply()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_message_2eproto::InitDefaultscommand_hmllen_reply();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:client.command_hmllen_reply)
}
command_hmllen_reply::command_hmllen_reply(const command_hmllen_reply& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      data_(from.data_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_state()) {
    state_ = new ::client::command_reply(*from.state_);
  } else {
    state_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:client.command_hmllen_reply)
}

void command_hmllen_reply::SharedCtor() {
  state_ = NULL;
  _cached_size_ = 0;
}

command_hmllen_reply::~command_hmllen_reply() {
  // @@protoc_insertion_point(destructor:client.command_hmllen_reply)
  SharedDtor();
}

void command_hmllen_reply::SharedDtor() {
  if (this != internal_default_instance()) delete state_;
}

void command_hmllen_reply::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* command_hmllen_reply::descriptor() {
  ::protobuf_message_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_message_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const command_hmllen_reply& command_hmllen_reply::default_instance() {
  ::protobuf_message_2eproto::InitDefaultscommand_hmllen_reply();
  return *internal_default_instance();
}

command_hmllen_reply* command_hmllen_reply::New(::google::protobuf::Arena* arena) const {
  command_hmllen_reply* n = new command_hmllen_reply;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void command_hmllen_reply::Clear() {
// @@protoc_insertion_point(message_clear_start:client.command_hmllen_reply)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  data_.Clear();
  if (GetArenaNoVirtual() == NULL && state_ != NULL) {
    delete state_;
  }
  state_ = NULL;
  _internal_metadata_.Clear();
}

bool command_hmllen_reply::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:client.command_hmllen_reply)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .client.command_reply state = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_state()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .data.VALUE data = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(input, add_data()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:client.command_hmllen_reply)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:client.command_hmllen_reply)
  return false;
#undef DO_
}

void command_hmllen_reply::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:client.command_hmllen_reply)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .client.command_reply state = 1;
  if (this->has_state()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->state_, output);
  }

  // repeated .data.VALUE data = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->data_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->data(static_cast<int>(i)), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:client.command_hmllen_reply)
}

::google::protobuf::uint8* command_hmllen_reply::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:client.command_hmllen_reply)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .client.command_reply state = 1;
  if (this->has_state()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, *this->state_, deterministic, target);
  }

  // repeated .data.VALUE data = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->data_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, this->data(static_cast<int>(i)), deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:client.command_hmllen_reply)
  return target;
}

size_t command_hmllen_reply::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:client.command_hmllen_reply)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // repeated .data.VALUE data = 2;
  {
    unsigned int count = static_cast<unsigned int>(this->data_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->data(static_cast<int>(i)));
    }
  }

  // .client.command_reply state = 1;
  if (this->has_state()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->state_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void command_hmllen_reply::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:client.command_hmllen_reply)
  GOOGLE_DCHECK_NE(&from, this);
  const command_hmllen_reply* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const command_hmllen_reply>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:client.command_hmllen_reply)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:client.command_hmllen_reply)
    MergeFrom(*source);
  }
}

void command_hmllen_reply::MergeFrom(const command_hmllen_reply& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:client.command_hmllen_reply)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  data_.MergeFrom(from.data_);
  if (from.has_state()) {
    mutable_state()->::client::command_reply::MergeFrom(from.state());
  }
}

void command_hmllen_reply::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:client.command_hmllen_reply)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void command_hmllen_reply::CopyFrom(const command_hmllen_reply& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:client.command_hmllen_reply)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool command_hmllen_reply::IsInitialized() const {
  return true;
}

void command_hmllen_reply::Swap(command_hmllen_reply* other) {
  if (other == this) return;
  InternalSwap(other);
}
void command_hmllen_reply::InternalSwap(command_hmllen_reply* other) {
  using std::swap;
  data_.InternalSwap(&other->data_);
  swap(state_, other->state_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata command_hmllen_reply::GetMetadata() const {
  protobuf_message_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_message_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void command_mhmllen::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int command_mhmllen::kKeysFieldNumber;
const int command_mhmllen::kFieldsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

command_mhmllen::command_mhmllen()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_message_2eproto::InitDefaultscommand_mhmllen();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:client.command_mhmllen)
}
command_mhmllen::command_mhmllen(const command_mhmllen& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      keys_(from.keys_),
      fields_(from.fields_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:client.command_mhmllen)
}

void command_mhmllen::SharedCtor() {
  _cached_size_ = 0;
}

command_mhmllen::~command_mhmllen() {
  // @@protoc_insertion_point(destructor:client.command_mhmllen)
  SharedDtor();
}

void command_mhmllen::SharedDtor() {
}

void command_mhmllen::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* command_mhmllen::descriptor() {
  ::protobuf_message_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_message_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const command_mhmllen& command_mhmllen::default_instance() {
  ::protobuf_message_2eproto::InitDefaultscommand_mhmllen();
  return *internal_default_instance();
}

command_mhmllen* command_mhmllen::New(::google::protobuf::Arena* arena) const {
  command_mhmllen* n = new command_mhmllen;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void command_mhmllen::Clear() {
// @@protoc_insertion_point(message_clear_start:client.command_mhmllen)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  keys_.Clear();
  fields_.Clear();
  _internal_metadata_.Clear();
}

bool command_mhmllen::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:client.command_mhmllen)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated string keys = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_keys()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->keys(this->keys_size() - 1).data(),
            static_cast<int>(this->keys(this->keys_size() - 1).length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "client.command_mhmllen.keys"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated string fields = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_fields()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->fields(this->fields_size() - 1).data(),
            static_cast<int>(this->fields(this->fields_size() - 1).length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "client.command_mhmllen.fields"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:client.command_mhmllen)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:client.command_mhmllen)
  return false;
#undef DO_
}

void command_mhmllen::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:client.command_mhmllen)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated string keys = 1;
  for (int i = 0, n = this->keys_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->keys(i).data(), static_cast<int>(this->keys(i).length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "client.command_mhmllen.keys");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->keys(i), output);
  }

  // repeated string fields = 2;
  for (int i = 0, n = this->fields_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->fields(i).data(), static_cast<int>(this->fields(i).length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "client.command_mhmllen.fields");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->fields(i), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:client.command_mhmllen)
}

::google::protobuf::uint8* command_mhmllen::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:client.command_mhmllen)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated string keys = 1;
  for (int i = 0, n = this->keys_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->keys(i).data(), static_cast<int>(this->keys(i).length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "client.command_mhmllen.keys");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(1, this->keys(i), target);
  }

  // repeated string fields = 2;
  for (int i = 0, n = this->fields_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->fields(i).data(), static_cast<int>(this->fields(i).length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "client.command_mhmllen.fields");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(2, this->fields(i), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:client.command_mhmllen)
  return target;
}

size_t command_mhmllen::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:client.command_mhmllen)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // repeated string keys = 1;
  total_size += 1 *
      ::google::protobuf::internal::FromIntSize(this->keys_size());
  for (int i = 0, n = this->keys_size(); i < n; i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->keys(i));
  }

  // repeated string fields = 2;
  total_size += 1 *
      ::google::protobuf::internal::FromIntSize(this->fields_size());
  for (int i = 0, n = this->fields_size(); i < n; i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->fields(i));
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void command_mhmllen::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:client.command_mhmllen)
  GOOGLE_DCHECK_NE(&from, this);
  const command_mhmllen* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const command_mhmllen>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:client.command_mhmllen)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:client.command_mhmllen)
    MergeFrom(*source);
  }
}

void command_mhmllen::MergeFrom(const command_mhmllen& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:client.command_mhmllen)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  keys_.MergeFrom(from.keys_);
  fields_.MergeFrom(from.fields_);
}

void command_mhmllen::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:client.command_mhmllen)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void command_mhmllen::CopyFrom(const command_mhmllen& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:client.command_mhmllen)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool command_mhmllen::IsInitialized() const {
  return true;
}

void command_mhmllen::Swap(command_mhmllen* other) {
  if (other == this) return;
  InternalSwap(other);
}
void command_mhmllen::InternalSwap(command_mhmllen* other) {
  using std::swap;
  keys_.InternalSwap(&other->keys_);
  fields_.InternalSwap(&other->fields_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata command_mhmllen::GetMetadata() const {
  protobuf_message_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_message_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void command_mhmllen_reply::InitAsDefaultInstance() {
  ::client::_command_mhmllen_reply_default_instance_._instance.get_mutable()->state_ = const_cast< ::client::command_reply*>(
      ::client::command_reply::internal_default_instance());
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int command_mhmllen_reply::kStateFieldNumber;
const int command_mhmllen_reply::kDataFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

command_mhmllen_reply::command_mhmllen_reply()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_message_2eproto::InitDefaultscommand_mhmllen_reply();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:client.command_mhmllen_reply)
}
command_mhmllen_reply::command_mhmllen_reply(const command_mhmllen_reply& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      data_(from.data_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_state()) {
    state_ = new ::client::command_reply(*from.state_);
  } else {
    state_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:client.command_mhmllen_reply)
}

void command_mhmllen_reply::SharedCtor() {
  state_ = NULL;
  _cached_size_ = 0;
}

command_mhmllen_reply::~command_mhmllen_reply() {
  // @@protoc_insertion_point(destructor:client.command_mhmllen_reply)
  SharedDtor();
}

void command_mhmllen_reply::SharedDtor() {
  if (this != internal_default_instance()) delete state_;
}

void command_mhmllen_reply::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* command_mhmllen_reply::descriptor() {
  ::protobuf_message_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_message_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const command_mhmllen_reply& command_mhmllen_reply::default_instance() {
  ::protobuf_message_2eproto::InitDefaultscommand_mhmllen_reply();
  return *internal_default_instance();
}

command_mhmllen_reply* command_mhmllen_reply::New(::google::protobuf::Arena* arena) const {
  command_mhmllen_reply* n = new command_mhmllen_reply;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void command_mhmllen_reply::Clear() {
// @@protoc_insertion_point(message_clear_start:client.command_mhmllen_reply)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  data_.Clear();
  if (GetArenaNoVirtual() == NULL && state_ != NULL) {
    delete state_;
  }
  state_ = NULL;
  _internal_metadata_.Clear();
}

bool command_mhmllen_reply::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:client.command_mhmllen_reply)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .client.command_reply state = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_state()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .client.values_type data = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(input, add_data()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:client.command_mhmllen_reply)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:client.command_mhmllen_reply)
  return false;
#undef DO_
}

void command_mhmllen_reply::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:client.command_mhmllen_reply)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .client.command_reply state = 1;
  if (this->has_state()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->state_, output);
  }

  // repeated .client.values_type data = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->data_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->data(static_cast<int>(i)), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:client.command_mhmllen_reply)
}

::google::protobuf::uint8* command_mhmllen_reply::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:client.command_mhmllen_reply)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .client.command_reply state = 1;
  if (this->has_state()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, *this->state_, deterministic, target);
  }

  // repeated .client.values_type data = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->data_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, this->data(static_cast<int>(i)), deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:client.command_mhmllen_reply)
  return target;
}

size_t command_mhmllen_reply::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:client.command_mhmllen_reply)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // repeated .client.values_type data = 2;
  {
    unsigned int count = static_cast<unsigned int>(this->data_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->data(static_cast<int>(i)));
    }
  }

  // .client.command_reply state = 1;
  if (this->has_state()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->state_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void command_mhmllen_reply::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:client.command_mhmllen_reply)
  GOOGLE_DCHECK_NE(&from, this);
  const command_mhmllen_reply* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const command_mhmllen_reply>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:client.command_mhmllen_reply)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:client.command_mhmllen_reply)
    MergeFrom(*source);
  }
}

void command_mhmllen_reply::MergeFrom(const command_mhmllen_reply& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:client.command_mhmllen_reply)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  data_.MergeFrom(from.data_);
  if (from.has_state()) {
    mutable_state()->::client::command_reply::MergeFrom(from.state());
  }
}

void command_mhmllen_reply::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:client.command_mhmllen_reply)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void command_mhmllen_reply::CopyFrom(const command_mhmllen_reply& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:client.command_mhmllen_reply)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool command_mhmllen_reply::IsInitialized() const {
  return true;
}

void command_mhmllen_reply::Swap(command_mhmllen_reply* other) {
  if (other == this) return;
  InternalSwap(other);
}
void command_mhmllen_reply::InternalSwap(command_mhmllen_reply* other) {
  using std::swap;
  data_.InternalSwap(&other->data_);
  swap(state_, other->state_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata command_mhmllen_reply::GetMetadata() const {
  protobuf_message_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_message_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void command_mapget::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int command_mapget::kKeyFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

command_mapget::command_mapget()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_message_2eproto::InitDefaultscommand_mapget();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:client.command_mapget)
}
command_mapget::command_mapget(const command_mapget& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  key_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.key().size() > 0) {
    key_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.key_);
  }
  // @@protoc_insertion_point(copy_constructor:client.command_mapget)
}

void command_mapget::SharedCtor() {
  key_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _cached_size_ = 0;
}

command_mapget::~command_mapget() {
  // @@protoc_insertion_point(destructor:client.command_mapget)
  SharedDtor();
}

void command_mapget::SharedDtor() {
  key_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void command_mapget::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* command_mapget::descriptor() {
  ::protobuf_message_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_message_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const command_mapget& command_mapget::default_instance() {
  ::protobuf_message_2eproto::InitDefaultscommand_mapget();
  return *internal_default_instance();
}

command_mapget* command_mapget::New(::google::protobuf::Arena* arena) const {
  command_mapget* n = new command_mapget;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void command_mapget::Clear() {
// @@protoc_insertion_point(message_clear_start:client.command_mapget)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  key_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _internal_metadata_.Clear();
}

bool command_mapget::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:client.command_mapget)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string key = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_key()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->key().data(), static_cast<int>(this->key().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "client.command_mapget.key"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:client.command_mapget)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:client.command_mapget)
  return false;
#undef DO_
}

void command_mapget::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:client.command_mapget)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string key = 1;
  if (this->key().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->key().data(), static_cast<int>(this->key().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "client.command_mapget.key");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->key(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:client.command_mapget)
}

::google::protobuf::uint8* command_mapget::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:client.command_mapget)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string key = 1;
  if (this->key().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->key().data(), static_cast<int>(this->key().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "client.command_mapget.key");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->key(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:client.command_mapget)
  return target;
}

size_t command_mapget::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:client.command_mapget)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // string key = 1;
  if (this->key().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->key());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void command_mapget::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:client.command_mapget)
  GOOGLE_DCHECK_NE(&from, this);
  const command_mapget* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const command_mapget>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:client.command_mapget)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:client.command_mapget)
    MergeFrom(*source);
  }
}

void command_mapget::MergeFrom(const command_mapget& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:client.command_mapget)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.key().size() > 0) {

    key_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.key_);
  }
}

void command_mapget::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:client.command_mapget)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void command_mapget::CopyFrom(const command_mapget& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:client.command_mapget)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool command_mapget::IsInitialized() const {
  return true;
}

void command_mapget::Swap(command_mapget* other) {
  if (other == this) return;
  InternalSwap(other);
}
void command_mapget::InternalSwap(command_mapget* other) {
  using std::swap;
  key_.Swap(&other->key_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata command_mapget::GetMetadata() const {
  protobuf_message_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_message_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void command_mapget_reply::InitAsDefaultInstance() {
  ::client::_command_mapget_reply_default_instance_._instance.get_mutable()->state_ = const_cast< ::client::command_reply*>(
      ::client::command_reply::internal_default_instance());
  ::client::_command_mapget_reply_default_instance_._instance.get_mutable()->data_ = const_cast< ::data::VALUE*>(
      ::data::VALUE::internal_default_instance());
}
void command_mapget_reply::clear_data() {
  if (GetArenaNoVirtual() == NULL && data_ != NULL) {
    delete data_;
  }
  data_ = NULL;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int command_mapget_reply::kStateFieldNumber;
const int command_mapget_reply::kDataFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

command_mapget_reply::command_mapget_reply()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_message_2eproto::InitDefaultscommand_mapget_reply();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:client.command_mapget_reply)
}
command_mapget_reply::command_mapget_reply(const command_mapget_reply& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_state()) {
    state_ = new ::client::command_reply(*from.state_);
  } else {
    state_ = NULL;
  }
  if (from.has_data()) {
    data_ = new ::data::VALUE(*from.data_);
  } else {
    data_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:client.command_mapget_reply)
}

void command_mapget_reply::SharedCtor() {
  ::memset(&state_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&data_) -
      reinterpret_cast<char*>(&state_)) + sizeof(data_));
  _cached_size_ = 0;
}

command_mapget_reply::~command_mapget_reply() {
  // @@protoc_insertion_point(destructor:client.command_mapget_reply)
  SharedDtor();
}

void command_mapget_reply::SharedDtor() {
  if (this != internal_default_instance()) delete state_;
  if (this != internal_default_instance()) delete data_;
}

void command_mapget_reply::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* command_mapget_reply::descriptor() {
  ::protobuf_message_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_message_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const command_mapget_reply& command_mapget_reply::default_instance() {
  ::protobuf_message_2eproto::InitDefaultscommand_mapget_reply();
  return *internal_default_instance();
}

command_mapget_reply* command_mapget_reply::New(::google::protobuf::Arena* arena) const {
  command_mapget_reply* n = new command_mapget_reply;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void command_mapget_reply::Clear() {
// @@protoc_insertion_point(message_clear_start:client.command_mapget_reply)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == NULL && state_ != NULL) {
    delete state_;
  }
  state_ = NULL;
  if (GetArenaNoVirtual() == NULL && data_ != NULL) {
    delete data_;
  }
  data_ = NULL;
  _internal_metadata_.Clear();
}

bool command_mapget_reply::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:client.command_mapget_reply)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .client.command_reply state = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_state()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .data.VALUE data = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_data()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:client.command_mapget_reply)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:client.command_mapget_reply)
  return false;
#undef DO_
}

void command_mapget_reply::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:client.command_mapget_reply)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .client.command_reply state = 1;
  if (this->has_state()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->state_, output);
  }

  // .data.VALUE data = 2;
  if (this->has_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->data_, output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:client.command_mapget_reply)
}

::google::protobuf::uint8* command_mapget_reply::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:client.command_mapget_reply)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .client.command_reply state = 1;
  if (this->has_state()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, *this->state_, deterministic, target);
  }

  // .data.VALUE data = 2;
  if (this->has_data()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, *this->data_, deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:client.command_mapget_reply)
  return target;
}

size_t command_mapget_reply::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:client.command_mapget_reply)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // .client.command_reply state = 1;
  if (this->has_state()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->state_);
  }

  // .data.VALUE data = 2;
  if (this->has_data()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->data_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void command_mapget_reply::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:client.command_mapget_reply)
  GOOGLE_DCHECK_NE(&from, this);
  const command_mapget_reply* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const command_mapget_reply>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:client.command_mapget_reply)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:client.command_mapget_reply)
    MergeFrom(*source);
  }
}

void command_mapget_reply::MergeFrom(const command_mapget_reply& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:client.command_mapget_reply)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_state()) {
    mutable_state()->::client::command_reply::MergeFrom(from.state());
  }
  if (from.has_data()) {
    mutable_data()->::data::VALUE::MergeFrom(from.data());
  }
}

void command_mapget_reply::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:client.command_mapget_reply)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void command_mapget_reply::CopyFrom(const command_mapget_reply& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:client.command_mapget_reply)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool command_mapget_reply::IsInitialized() const {
  return true;
}

void command_mapget_reply::Swap(command_mapget_reply* other) {
  if (other == this) return;
  InternalSwap(other);
}
void command_mapget_reply::InternalSwap(command_mapget_reply* other) {
  using std::swap;
  swap(state_, other->state_);
  swap(data_, other->data_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata command_mapget_reply::GetMetadata() const {
  protobuf_message_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_message_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void command_mmapget::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int command_mmapget::kKeysFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

command_mmapget::command_mmapget()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_message_2eproto::InitDefaultscommand_mmapget();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:client.command_mmapget)
}
command_mmapget::command_mmapget(const command_mmapget& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      keys_(from.keys_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:client.command_mmapget)
}

void command_mmapget::SharedCtor() {
  _cached_size_ = 0;
}

command_mmapget::~command_mmapget() {
  // @@protoc_insertion_point(destructor:client.command_mmapget)
  SharedDtor();
}

void command_mmapget::SharedDtor() {
}

void command_mmapget::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* command_mmapget::descriptor() {
  ::protobuf_message_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_message_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const command_mmapget& command_mmapget::default_instance() {
  ::protobuf_message_2eproto::InitDefaultscommand_mmapget();
  return *internal_default_instance();
}

command_mmapget* command_mmapget::New(::google::protobuf::Arena* arena) const {
  command_mmapget* n = new command_mmapget;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void command_mmapget::Clear() {
// @@protoc_insertion_point(message_clear_start:client.command_mmapget)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  keys_.Clear();
  _internal_metadata_.Clear();
}

bool command_mmapget::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:client.command_mmapget)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated string keys = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_keys()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->keys(this->keys_size() - 1).data(),
            static_cast<int>(this->keys(this->keys_size() - 1).length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "client.command_mmapget.keys"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:client.command_mmapget)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:client.command_mmapget)
  return false;
#undef DO_
}

void command_mmapget::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:client.command_mmapget)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated string keys = 1;
  for (int i = 0, n = this->keys_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->keys(i).data(), static_cast<int>(this->keys(i).length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "client.command_mmapget.keys");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->keys(i), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:client.command_mmapget)
}

::google::protobuf::uint8* command_mmapget::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:client.command_mmapget)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated string keys = 1;
  for (int i = 0, n = this->keys_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->keys(i).data(), static_cast<int>(this->keys(i).length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "client.command_mmapget.keys");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(1, this->keys(i), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:client.command_mmapget)
  return target;
}

size_t command_mmapget::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:client.command_mmapget)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // repeated string keys = 1;
  total_size += 1 *
      ::google::protobuf::internal::FromIntSize(this->keys_size());
  for (int i = 0, n = this->keys_size(); i < n; i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->keys(i));
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void command_mmapget::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:client.command_mmapget)
  GOOGLE_DCHECK_NE(&from, this);
  const command_mmapget* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const command_mmapget>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:client.command_mmapget)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:client.command_mmapget)
    MergeFrom(*source);
  }
}

void command_mmapget::MergeFrom(const command_mmapget& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:client.command_mmapget)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  keys_.MergeFrom(from.keys_);
}

void command_mmapget::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:client.command_mmapget)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void command_mmapget::CopyFrom(const command_mmapget& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:client.command_mmapget)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool command_mmapget::IsInitialized() const {
  return true;
}

void command_mmapget::Swap(command_mmapget* other) {
  if (other == this) return;
  InternalSwap(other);
}
void command_mmapget::InternalSwap(command_mmapget* other) {
  using std::swap;
  keys_.InternalSwap(&other->keys_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata command_mmapget::GetMetadata() const {
  protobuf_message_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_message_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void command_mmapget_reply::InitAsDefaultInstance() {
  ::client::_command_mmapget_reply_default_instance_._instance.get_mutable()->state_ = const_cast< ::client::command_reply*>(
      ::client::command_reply::internal_default_instance());
}
void command_mmapget_reply::clear_data() {
  data_.Clear();
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int command_mmapget_reply::kStateFieldNumber;
const int command_mmapget_reply::kDataFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

command_mmapget_reply::command_mmapget_reply()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_message_2eproto::InitDefaultscommand_mmapget_reply();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:client.command_mmapget_reply)
}
command_mmapget_reply::command_mmapget_reply(const command_mmapget_reply& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      data_(from.data_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_state()) {
    state_ = new ::client::command_reply(*from.state_);
  } else {
    state_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:client.command_mmapget_reply)
}

void command_mmapget_reply::SharedCtor() {
  state_ = NULL;
  _cached_size_ = 0;
}

command_mmapget_reply::~command_mmapget_reply() {
  // @@protoc_insertion_point(destructor:client.command_mmapget_reply)
  SharedDtor();
}

void command_mmapget_reply::SharedDtor() {
  if (this != internal_default_instance()) delete state_;
}

void command_mmapget_reply::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* command_mmapget_reply::descriptor() {
  ::protobuf_message_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_message_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const command_mmapget_reply& command_mmapget_reply::default_instance() {
  ::protobuf_message_2eproto::InitDefaultscommand_mmapget_reply();
  return *internal_default_instance();
}

command_mmapget_reply* command_mmapget_reply::New(::google::protobuf::Arena* arena) const {
  command_mmapget_reply* n = new command_mmapget_reply;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void command_mmapget_reply::Clear() {
// @@protoc_insertion_point(message_clear_start:client.command_mmapget_reply)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  data_.Clear();
  if (GetArenaNoVirtual() == NULL && state_ != NULL) {
    delete state_;
  }
  state_ = NULL;
  _internal_metadata_.Clear();
}

bool command_mmapget_reply::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:client.command_mmapget_reply)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .client.command_reply state = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_state()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .data.VALUE data = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(input, add_data()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:client.command_mmapget_reply)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:client.command_mmapget_reply)
  return false;
#undef DO_
}

void command_mmapget_reply::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:client.command_mmapget_reply)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .client.command_reply state = 1;
  if (this->has_state()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->state_, output);
  }

  // repeated .data.VALUE data = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->data_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->data(static_cast<int>(i)), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:client.command_mmapget_reply)
}

::google::protobuf::uint8* command_mmapget_reply::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:client.command_mmapget_reply)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .client.command_reply state = 1;
  if (this->has_state()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, *this->state_, deterministic, target);
  }

  // repeated .data.VALUE data = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->data_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, this->data(static_cast<int>(i)), deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:client.command_mmapget_reply)
  return target;
}

size_t command_mmapget_reply::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:client.command_mmapget_reply)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // repeated .data.VALUE data = 2;
  {
    unsigned int count = static_cast<unsigned int>(this->data_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->data(static_cast<int>(i)));
    }
  }

  // .client.command_reply state = 1;
  if (this->has_state()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->state_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void command_mmapget_reply::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:client.command_mmapget_reply)
  GOOGLE_DCHECK_NE(&from, this);
  const command_mmapget_reply* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const command_mmapget_reply>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:client.command_mmapget_reply)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:client.command_mmapget_reply)
    MergeFrom(*source);
  }
}

void command_mmapget_reply::MergeFrom(const command_mmapget_reply& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:client.command_mmapget_reply)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  data_.MergeFrom(from.data_);
  if (from.has_state()) {
    mutable_state()->::client::command_reply::MergeFrom(from.state());
  }
}

void command_mmapget_reply::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:client.command_mmapget_reply)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void command_mmapget_reply::CopyFrom(const command_mmapget_reply& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:client.command_mmapget_reply)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool command_mmapget_reply::IsInitialized() const {
  return true;
}

void command_mmapget_reply::Swap(command_mmapget_reply* other) {
  if (other == this) return;
  InternalSwap(other);
}
void command_mmapget_reply::InternalSwap(command_mmapget_reply* other) {
  using std::swap;
  data_.InternalSwap(&other->data_);
  swap(state_, other->state_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata command_mmapget_reply::GetMetadata() const {
  protobuf_message_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_message_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void command_hmapget::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int command_hmapget::kKeyFieldNumber;
const int command_hmapget::kFieldFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

command_hmapget::command_hmapget()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_message_2eproto::InitDefaultscommand_hmapget();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:client.command_hmapget)
}
command_hmapget::command_hmapget(const command_hmapget& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  key_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.key().size() > 0) {
    key_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.key_);
  }
  field_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.field().size() > 0) {
    field_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.field_);
  }
  // @@protoc_insertion_point(copy_constructor:client.command_hmapget)
}

void command_hmapget::SharedCtor() {
  key_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  field_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _cached_size_ = 0;
}

command_hmapget::~command_hmapget() {
  // @@protoc_insertion_point(destructor:client.command_hmapget)
  SharedDtor();
}

void command_hmapget::SharedDtor() {
  key_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  field_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void command_hmapget::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* command_hmapget::descriptor() {
  ::protobuf_message_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_message_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const command_hmapget& command_hmapget::default_instance() {
  ::protobuf_message_2eproto::InitDefaultscommand_hmapget();
  return *internal_default_instance();
}

command_hmapget* command_hmapget::New(::google::protobuf::Arena* arena) const {
  command_hmapget* n = new command_hmapget;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void command_hmapget::Clear() {
// @@protoc_insertion_point(message_clear_start:client.command_hmapget)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  key_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  field_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _internal_metadata_.Clear();
}

bool command_hmapget::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:client.command_hmapget)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string key = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_key()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->key().data(), static_cast<int>(this->key().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "client.command_hmapget.key"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string field = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_field()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->field().data(), static_cast<int>(this->field().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "client.command_hmapget.field"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:client.command_hmapget)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:client.command_hmapget)
  return false;
#undef DO_
}

void command_hmapget::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:client.command_hmapget)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string key = 1;
  if (this->key().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->key().data(), static_cast<int>(this->key().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "client.command_hmapget.key");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->key(), output);
  }

  // string field = 2;
  if (this->field().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->field().data(), static_cast<int>(this->field().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "client.command_hmapget.field");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->field(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:client.command_hmapget)
}

::google::protobuf::uint8* command_hmapget::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:client.command_hmapget)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string key = 1;
  if (this->key().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->key().data(), static_cast<int>(this->key().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "client.command_hmapget.key");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->key(), target);
  }

  // string field = 2;
  if (this->field().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->field().data(), static_cast<int>(this->field().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "client.command_hmapget.field");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->field(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:client.command_hmapget)
  return target;
}

size_t command_hmapget::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:client.command_hmapget)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // string key = 1;
  if (this->key().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->key());
  }

  // string field = 2;
  if (this->field().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->field());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void command_hmapget::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:client.command_hmapget)
  GOOGLE_DCHECK_NE(&from, this);
  const command_hmapget* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const command_hmapget>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:client.command_hmapget)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:client.command_hmapget)
    MergeFrom(*source);
  }
}

void command_hmapget::MergeFrom(const command_hmapget& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:client.command_hmapget)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.key().size() > 0) {

    key_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.key_);
  }
  if (from.field().size() > 0) {

    field_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.field_);
  }
}

void command_hmapget::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:client.command_hmapget)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void command_hmapget::CopyFrom(const command_hmapget& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:client.command_hmapget)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool command_hmapget::IsInitialized() const {
  return true;
}

void command_hmapget::Swap(command_hmapget* other) {
  if (other == this) return;
  InternalSwap(other);
}
void command_hmapget::InternalSwap(command_hmapget* other) {
  using std::swap;
  key_.Swap(&other->key_);
  field_.Swap(&other->field_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata command_hmapget::GetMetadata() const {
  protobuf_message_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_message_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void command_hmapget_reply::InitAsDefaultInstance() {
  ::client::_command_hmapget_reply_default_instance_._instance.get_mutable()->state_ = const_cast< ::client::command_reply*>(
      ::client::command_reply::internal_default_instance());
  ::client::_command_hmapget_reply_default_instance_._instance.get_mutable()->data_ = const_cast< ::data::VALUE*>(
      ::data::VALUE::internal_default_instance());
}
void command_hmapget_reply::clear_data() {
  if (GetArenaNoVirtual() == NULL && data_ != NULL) {
    delete data_;
  }
  data_ = NULL;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int command_hmapget_reply::kStateFieldNumber;
const int command_hmapget_reply::kDataFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

command_hmapget_reply::command_hmapget_reply()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_message_2eproto::InitDefaultscommand_hmapget_reply();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:client.command_hmapget_reply)
}
command_hmapget_reply::command_hmapget_reply(const command_hmapget_reply& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_state()) {
    state_ = new ::client::command_reply(*from.state_);
  } else {
    state_ = NULL;
  }
  if (from.has_data()) {
    data_ = new ::data::VALUE(*from.data_);
  } else {
    data_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:client.command_hmapget_reply)
}

void command_hmapget_reply::SharedCtor() {
  ::memset(&state_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&data_) -
      reinterpret_cast<char*>(&state_)) + sizeof(data_));
  _cached_size_ = 0;
}

command_hmapget_reply::~command_hmapget_reply() {
  // @@protoc_insertion_point(destructor:client.command_hmapget_reply)
  SharedDtor();
}

void command_hmapget_reply::SharedDtor() {
  if (this != internal_default_instance()) delete state_;
  if (this != internal_default_instance()) delete data_;
}

void command_hmapget_reply::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* command_hmapget_reply::descriptor() {
  ::protobuf_message_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_message_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const command_hmapget_reply& command_hmapget_reply::default_instance() {
  ::protobuf_message_2eproto::InitDefaultscommand_hmapget_reply();
  return *internal_default_instance();
}

command_hmapget_reply* command_hmapget_reply::New(::google::protobuf::Arena* arena) const {
  command_hmapget_reply* n = new command_hmapget_reply;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void command_hmapget_reply::Clear() {
// @@protoc_insertion_point(message_clear_start:client.command_hmapget_reply)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == NULL && state_ != NULL) {
    delete state_;
  }
  state_ = NULL;
  if (GetArenaNoVirtual() == NULL && data_ != NULL) {
    delete data_;
  }
  data_ = NULL;
  _internal_metadata_.Clear();
}

bool command_hmapget_reply::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:client.command_hmapget_reply)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .client.command_reply state = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_state()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .data.VALUE data = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_data()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:client.command_hmapget_reply)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:client.command_hmapget_reply)
  return false;
#undef DO_
}

void command_hmapget_reply::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:client.command_hmapget_reply)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .client.command_reply state = 1;
  if (this->has_state()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->state_, output);
  }

  // .data.VALUE data = 2;
  if (this->has_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->data_, output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:client.command_hmapget_reply)
}

::google::protobuf::uint8* command_hmapget_reply::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:client.command_hmapget_reply)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .client.command_reply state = 1;
  if (this->has_state()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, *this->state_, deterministic, target);
  }

  // .data.VALUE data = 2;
  if (this->has_data()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, *this->data_, deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:client.command_hmapget_reply)
  return target;
}

size_t command_hmapget_reply::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:client.command_hmapget_reply)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // .client.command_reply state = 1;
  if (this->has_state()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->state_);
  }

  // .data.VALUE data = 2;
  if (this->has_data()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->data_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void command_hmapget_reply::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:client.command_hmapget_reply)
  GOOGLE_DCHECK_NE(&from, this);
  const command_hmapget_reply* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const command_hmapget_reply>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:client.command_hmapget_reply)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:client.command_hmapget_reply)
    MergeFrom(*source);
  }
}

void command_hmapget_reply::MergeFrom(const command_hmapget_reply& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:client.command_hmapget_reply)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_state()) {
    mutable_state()->::client::command_reply::MergeFrom(from.state());
  }
  if (from.has_data()) {
    mutable_data()->::data::VALUE::MergeFrom(from.data());
  }
}

void command_hmapget_reply::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:client.command_hmapget_reply)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void command_hmapget_reply::CopyFrom(const command_hmapget_reply& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:client.command_hmapget_reply)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool command_hmapget_reply::IsInitialized() const {
  return true;
}

void command_hmapget_reply::Swap(command_hmapget_reply* other) {
  if (other == this) return;
  InternalSwap(other);
}
void command_hmapget_reply::InternalSwap(command_hmapget_reply* other) {
  using std::swap;
  swap(state_, other->state_);
  swap(data_, other->data_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata command_hmapget_reply::GetMetadata() const {
  protobuf_message_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_message_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void command_hmmapget::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int command_hmmapget::kKeyFieldNumber;
const int command_hmmapget::kFieldsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

command_hmmapget::command_hmmapget()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_message_2eproto::InitDefaultscommand_hmmapget();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:client.command_hmmapget)
}
command_hmmapget::command_hmmapget(const command_hmmapget& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      fields_(from.fields_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  key_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.key().size() > 0) {
    key_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.key_);
  }
  // @@protoc_insertion_point(copy_constructor:client.command_hmmapget)
}

void command_hmmapget::SharedCtor() {
  key_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _cached_size_ = 0;
}

command_hmmapget::~command_hmmapget() {
  // @@protoc_insertion_point(destructor:client.command_hmmapget)
  SharedDtor();
}

void command_hmmapget::SharedDtor() {
  key_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void command_hmmapget::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* command_hmmapget::descriptor() {
  ::protobuf_message_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_message_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const command_hmmapget& command_hmmapget::default_instance() {
  ::protobuf_message_2eproto::InitDefaultscommand_hmmapget();
  return *internal_default_instance();
}

command_hmmapget* command_hmmapget::New(::google::protobuf::Arena* arena) const {
  command_hmmapget* n = new command_hmmapget;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void command_hmmapget::Clear() {
// @@protoc_insertion_point(message_clear_start:client.command_hmmapget)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  fields_.Clear();
  key_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _internal_metadata_.Clear();
}

bool command_hmmapget::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:client.command_hmmapget)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string key = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_key()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->key().data(), static_cast<int>(this->key().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "client.command_hmmapget.key"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated string fields = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_fields()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->fields(this->fields_size() - 1).data(),
            static_cast<int>(this->fields(this->fields_size() - 1).length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "client.command_hmmapget.fields"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:client.command_hmmapget)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:client.command_hmmapget)
  return false;
#undef DO_
}

void command_hmmapget::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:client.command_hmmapget)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string key = 1;
  if (this->key().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->key().data(), static_cast<int>(this->key().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "client.command_hmmapget.key");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->key(), output);
  }

  // repeated string fields = 2;
  for (int i = 0, n = this->fields_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->fields(i).data(), static_cast<int>(this->fields(i).length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "client.command_hmmapget.fields");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->fields(i), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:client.command_hmmapget)
}

::google::protobuf::uint8* command_hmmapget::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:client.command_hmmapget)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string key = 1;
  if (this->key().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->key().data(), static_cast<int>(this->key().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "client.command_hmmapget.key");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->key(), target);
  }

  // repeated string fields = 2;
  for (int i = 0, n = this->fields_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->fields(i).data(), static_cast<int>(this->fields(i).length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "client.command_hmmapget.fields");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(2, this->fields(i), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:client.command_hmmapget)
  return target;
}

size_t command_hmmapget::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:client.command_hmmapget)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // repeated string fields = 2;
  total_size += 1 *
      ::google::protobuf::internal::FromIntSize(this->fields_size());
  for (int i = 0, n = this->fields_size(); i < n; i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->fields(i));
  }

  // string key = 1;
  if (this->key().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->key());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void command_hmmapget::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:client.command_hmmapget)
  GOOGLE_DCHECK_NE(&from, this);
  const command_hmmapget* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const command_hmmapget>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:client.command_hmmapget)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:client.command_hmmapget)
    MergeFrom(*source);
  }
}

void command_hmmapget::MergeFrom(const command_hmmapget& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:client.command_hmmapget)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  fields_.MergeFrom(from.fields_);
  if (from.key().size() > 0) {

    key_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.key_);
  }
}

void command_hmmapget::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:client.command_hmmapget)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void command_hmmapget::CopyFrom(const command_hmmapget& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:client.command_hmmapget)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool command_hmmapget::IsInitialized() const {
  return true;
}

void command_hmmapget::Swap(command_hmmapget* other) {
  if (other == this) return;
  InternalSwap(other);
}
void command_hmmapget::InternalSwap(command_hmmapget* other) {
  using std::swap;
  fields_.InternalSwap(&other->fields_);
  key_.Swap(&other->key_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata command_hmmapget::GetMetadata() const {
  protobuf_message_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_message_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void command_hmmapget_reply::InitAsDefaultInstance() {
  ::client::_command_hmmapget_reply_default_instance_._instance.get_mutable()->state_ = const_cast< ::client::command_reply*>(
      ::client::command_reply::internal_default_instance());
}
void command_hmmapget_reply::clear_data() {
  data_.Clear();
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int command_hmmapget_reply::kStateFieldNumber;
const int command_hmmapget_reply::kDataFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

command_hmmapget_reply::command_hmmapget_reply()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_message_2eproto::InitDefaultscommand_hmmapget_reply();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:client.command_hmmapget_reply)
}
command_hmmapget_reply::command_hmmapget_reply(const command_hmmapget_reply& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      data_(from.data_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_state()) {
    state_ = new ::client::command_reply(*from.state_);
  } else {
    state_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:client.command_hmmapget_reply)
}

void command_hmmapget_reply::SharedCtor() {
  state_ = NULL;
  _cached_size_ = 0;
}

command_hmmapget_reply::~command_hmmapget_reply() {
  // @@protoc_insertion_point(destructor:client.command_hmmapget_reply)
  SharedDtor();
}

void command_hmmapget_reply::SharedDtor() {
  if (this != internal_default_instance()) delete state_;
}

void command_hmmapget_reply::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* command_hmmapget_reply::descriptor() {
  ::protobuf_message_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_message_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const command_hmmapget_reply& command_hmmapget_reply::default_instance() {
  ::protobuf_message_2eproto::InitDefaultscommand_hmmapget_reply();
  return *internal_default_instance();
}

command_hmmapget_reply* command_hmmapget_reply::New(::google::protobuf::Arena* arena) const {
  command_hmmapget_reply* n = new command_hmmapget_reply;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void command_hmmapget_reply::Clear() {
// @@protoc_insertion_point(message_clear_start:client.command_hmmapget_reply)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  data_.Clear();
  if (GetArenaNoVirtual() == NULL && state_ != NULL) {
    delete state_;
  }
  state_ = NULL;
  _internal_metadata_.Clear();
}

bool command_hmmapget_reply::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:client.command_hmmapget_reply)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .client.command_reply state = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_state()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .data.VALUE data = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(input, add_data()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:client.command_hmmapget_reply)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:client.command_hmmapget_reply)
  return false;
#undef DO_
}

void command_hmmapget_reply::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:client.command_hmmapget_reply)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .client.command_reply state = 1;
  if (this->has_state()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->state_, output);
  }

  // repeated .data.VALUE data = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->data_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->data(static_cast<int>(i)), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:client.command_hmmapget_reply)
}

::google::protobuf::uint8* command_hmmapget_reply::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:client.command_hmmapget_reply)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .client.command_reply state = 1;
  if (this->has_state()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, *this->state_, deterministic, target);
  }

  // repeated .data.VALUE data = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->data_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, this->data(static_cast<int>(i)), deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:client.command_hmmapget_reply)
  return target;
}

size_t command_hmmapget_reply::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:client.command_hmmapget_reply)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // repeated .data.VALUE data = 2;
  {
    unsigned int count = static_cast<unsigned int>(this->data_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->data(static_cast<int>(i)));
    }
  }

  // .client.command_reply state = 1;
  if (this->has_state()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->state_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void command_hmmapget_reply::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:client.command_hmmapget_reply)
  GOOGLE_DCHECK_NE(&from, this);
  const command_hmmapget_reply* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const command_hmmapget_reply>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:client.command_hmmapget_reply)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:client.command_hmmapget_reply)
    MergeFrom(*source);
  }
}

void command_hmmapget_reply::MergeFrom(const command_hmmapget_reply& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:client.command_hmmapget_reply)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  data_.MergeFrom(from.data_);
  if (from.has_state()) {
    mutable_state()->::client::command_reply::MergeFrom(from.state());
  }
}

void command_hmmapget_reply::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:client.command_hmmapget_reply)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void command_hmmapget_reply::CopyFrom(const command_hmmapget_reply& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:client.command_hmmapget_reply)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool command_hmmapget_reply::IsInitialized() const {
  return true;
}

void command_hmmapget_reply::Swap(command_hmmapget_reply* other) {
  if (other == this) return;
  InternalSwap(other);
}
void command_hmmapget_reply::InternalSwap(command_hmmapget_reply* other) {
  using std::swap;
  data_.InternalSwap(&other->data_);
  swap(state_, other->state_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata command_hmmapget_reply::GetMetadata() const {
  protobuf_message_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_message_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void command_mhmmapget::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int command_mhmmapget::kKeysFieldNumber;
const int command_mhmmapget::kFieldsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

command_mhmmapget::command_mhmmapget()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_message_2eproto::InitDefaultscommand_mhmmapget();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:client.command_mhmmapget)
}
command_mhmmapget::command_mhmmapget(const command_mhmmapget& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      keys_(from.keys_),
      fields_(from.fields_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:client.command_mhmmapget)
}

void command_mhmmapget::SharedCtor() {
  _cached_size_ = 0;
}

command_mhmmapget::~command_mhmmapget() {
  // @@protoc_insertion_point(destructor:client.command_mhmmapget)
  SharedDtor();
}

void command_mhmmapget::SharedDtor() {
}

void command_mhmmapget::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* command_mhmmapget::descriptor() {
  ::protobuf_message_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_message_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const command_mhmmapget& command_mhmmapget::default_instance() {
  ::protobuf_message_2eproto::InitDefaultscommand_mhmmapget();
  return *internal_default_instance();
}

command_mhmmapget* command_mhmmapget::New(::google::protobuf::Arena* arena) const {
  command_mhmmapget* n = new command_mhmmapget;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void command_mhmmapget::Clear() {
// @@protoc_insertion_point(message_clear_start:client.command_mhmmapget)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  keys_.Clear();
  fields_.Clear();
  _internal_metadata_.Clear();
}

bool command_mhmmapget::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:client.command_mhmmapget)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated string keys = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_keys()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->keys(this->keys_size() - 1).data(),
            static_cast<int>(this->keys(this->keys_size() - 1).length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "client.command_mhmmapget.keys"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated string fields = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_fields()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->fields(this->fields_size() - 1).data(),
            static_cast<int>(this->fields(this->fields_size() - 1).length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "client.command_mhmmapget.fields"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:client.command_mhmmapget)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:client.command_mhmmapget)
  return false;
#undef DO_
}

void command_mhmmapget::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:client.command_mhmmapget)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated string keys = 1;
  for (int i = 0, n = this->keys_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->keys(i).data(), static_cast<int>(this->keys(i).length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "client.command_mhmmapget.keys");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->keys(i), output);
  }

  // repeated string fields = 2;
  for (int i = 0, n = this->fields_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->fields(i).data(), static_cast<int>(this->fields(i).length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "client.command_mhmmapget.fields");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->fields(i), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:client.command_mhmmapget)
}

::google::protobuf::uint8* command_mhmmapget::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:client.command_mhmmapget)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated string keys = 1;
  for (int i = 0, n = this->keys_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->keys(i).data(), static_cast<int>(this->keys(i).length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "client.command_mhmmapget.keys");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(1, this->keys(i), target);
  }

  // repeated string fields = 2;
  for (int i = 0, n = this->fields_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->fields(i).data(), static_cast<int>(this->fields(i).length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "client.command_mhmmapget.fields");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(2, this->fields(i), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:client.command_mhmmapget)
  return target;
}

size_t command_mhmmapget::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:client.command_mhmmapget)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // repeated string keys = 1;
  total_size += 1 *
      ::google::protobuf::internal::FromIntSize(this->keys_size());
  for (int i = 0, n = this->keys_size(); i < n; i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->keys(i));
  }

  // repeated string fields = 2;
  total_size += 1 *
      ::google::protobuf::internal::FromIntSize(this->fields_size());
  for (int i = 0, n = this->fields_size(); i < n; i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->fields(i));
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void command_mhmmapget::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:client.command_mhmmapget)
  GOOGLE_DCHECK_NE(&from, this);
  const command_mhmmapget* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const command_mhmmapget>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:client.command_mhmmapget)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:client.command_mhmmapget)
    MergeFrom(*source);
  }
}

void command_mhmmapget::MergeFrom(const command_mhmmapget& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:client.command_mhmmapget)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  keys_.MergeFrom(from.keys_);
  fields_.MergeFrom(from.fields_);
}

void command_mhmmapget::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:client.command_mhmmapget)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void command_mhmmapget::CopyFrom(const command_mhmmapget& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:client.command_mhmmapget)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool command_mhmmapget::IsInitialized() const {
  return true;
}

void command_mhmmapget::Swap(command_mhmmapget* other) {
  if (other == this) return;
  InternalSwap(other);
}
void command_mhmmapget::InternalSwap(command_mhmmapget* other) {
  using std::swap;
  keys_.InternalSwap(&other->keys_);
  fields_.InternalSwap(&other->fields_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata command_mhmmapget::GetMetadata() const {
  protobuf_message_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_message_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void command_mhmmapget_reply::InitAsDefaultInstance() {
  ::client::_command_mhmmapget_reply_default_instance_._instance.get_mutable()->state_ = const_cast< ::client::command_reply*>(
      ::client::command_reply::internal_default_instance());
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int command_mhmmapget_reply::kStateFieldNumber;
const int command_mhmmapget_reply::kDataFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

command_mhmmapget_reply::command_mhmmapget_reply()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_message_2eproto::InitDefaultscommand_mhmmapget_reply();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:client.command_mhmmapget_reply)
}
command_mhmmapget_reply::command_mhmmapget_reply(const command_mhmmapget_reply& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      data_(from.data_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_state()) {
    state_ = new ::client::command_reply(*from.state_);
  } else {
    state_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:client.command_mhmmapget_reply)
}

void command_mhmmapget_reply::SharedCtor() {
  state_ = NULL;
  _cached_size_ = 0;
}

command_mhmmapget_reply::~command_mhmmapget_reply() {
  // @@protoc_insertion_point(destructor:client.command_mhmmapget_reply)
  SharedDtor();
}

void command_mhmmapget_reply::SharedDtor() {
  if (this != internal_default_instance()) delete state_;
}

void command_mhmmapget_reply::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* command_mhmmapget_reply::descriptor() {
  ::protobuf_message_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_message_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const command_mhmmapget_reply& command_mhmmapget_reply::default_instance() {
  ::protobuf_message_2eproto::InitDefaultscommand_mhmmapget_reply();
  return *internal_default_instance();
}

command_mhmmapget_reply* command_mhmmapget_reply::New(::google::protobuf::Arena* arena) const {
  command_mhmmapget_reply* n = new command_mhmmapget_reply;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void command_mhmmapget_reply::Clear() {
// @@protoc_insertion_point(message_clear_start:client.command_mhmmapget_reply)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  data_.Clear();
  if (GetArenaNoVirtual() == NULL && state_ != NULL) {
    delete state_;
  }
  state_ = NULL;
  _internal_metadata_.Clear();
}

bool command_mhmmapget_reply::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:client.command_mhmmapget_reply)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .client.command_reply state = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_state()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .client.values_type data = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(input, add_data()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:client.command_mhmmapget_reply)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:client.command_mhmmapget_reply)
  return false;
#undef DO_
}

void command_mhmmapget_reply::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:client.command_mhmmapget_reply)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .client.command_reply state = 1;
  if (this->has_state()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->state_, output);
  }

  // repeated .client.values_type data = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->data_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->data(static_cast<int>(i)), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:client.command_mhmmapget_reply)
}

::google::protobuf::uint8* command_mhmmapget_reply::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:client.command_mhmmapget_reply)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .client.command_reply state = 1;
  if (this->has_state()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, *this->state_, deterministic, target);
  }

  // repeated .client.values_type data = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->data_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, this->data(static_cast<int>(i)), deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:client.command_mhmmapget_reply)
  return target;
}

size_t command_mhmmapget_reply::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:client.command_mhmmapget_reply)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // repeated .client.values_type data = 2;
  {
    unsigned int count = static_cast<unsigned int>(this->data_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->data(static_cast<int>(i)));
    }
  }

  // .client.command_reply state = 1;
  if (this->has_state()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->state_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void command_mhmmapget_reply::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:client.command_mhmmapget_reply)
  GOOGLE_DCHECK_NE(&from, this);
  const command_mhmmapget_reply* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const command_mhmmapget_reply>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:client.command_mhmmapget_reply)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:client.command_mhmmapget_reply)
    MergeFrom(*source);
  }
}

void command_mhmmapget_reply::MergeFrom(const command_mhmmapget_reply& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:client.command_mhmmapget_reply)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  data_.MergeFrom(from.data_);
  if (from.has_state()) {
    mutable_state()->::client::command_reply::MergeFrom(from.state());
  }
}

void command_mhmmapget_reply::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:client.command_mhmmapget_reply)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void command_mhmmapget_reply::CopyFrom(const command_mhmmapget_reply& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:client.command_mhmmapget_reply)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool command_mhmmapget_reply::IsInitialized() const {
  return true;
}

void command_mhmmapget_reply::Swap(command_mhmmapget_reply* other) {
  if (other == this) return;
  InternalSwap(other);
}
void command_mhmmapget_reply::InternalSwap(command_mhmmapget_reply* other) {
  using std::swap;
  data_.InternalSwap(&other->data_);
  swap(state_, other->state_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata command_mhmmapget_reply::GetMetadata() const {
  protobuf_message_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_message_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void command_mapset::InitAsDefaultInstance() {
  ::client::_command_mapset_default_instance_._instance.get_mutable()->value_ = const_cast< ::data::VALUE*>(
      ::data::VALUE::internal_default_instance());
}
void command_mapset::clear_value() {
  if (GetArenaNoVirtual() == NULL && value_ != NULL) {
    delete value_;
  }
  value_ = NULL;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int command_mapset::kKeyFieldNumber;
const int command_mapset::kValueFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

command_mapset::command_mapset()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_message_2eproto::InitDefaultscommand_mapset();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:client.command_mapset)
}
command_mapset::command_mapset(const command_mapset& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  key_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.key().size() > 0) {
    key_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.key_);
  }
  if (from.has_value()) {
    value_ = new ::data::VALUE(*from.value_);
  } else {
    value_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:client.command_mapset)
}

void command_mapset::SharedCtor() {
  key_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  value_ = NULL;
  _cached_size_ = 0;
}

command_mapset::~command_mapset() {
  // @@protoc_insertion_point(destructor:client.command_mapset)
  SharedDtor();
}

void command_mapset::SharedDtor() {
  key_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete value_;
}

void command_mapset::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* command_mapset::descriptor() {
  ::protobuf_message_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_message_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const command_mapset& command_mapset::default_instance() {
  ::protobuf_message_2eproto::InitDefaultscommand_mapset();
  return *internal_default_instance();
}

command_mapset* command_mapset::New(::google::protobuf::Arena* arena) const {
  command_mapset* n = new command_mapset;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void command_mapset::Clear() {
// @@protoc_insertion_point(message_clear_start:client.command_mapset)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  key_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == NULL && value_ != NULL) {
    delete value_;
  }
  value_ = NULL;
  _internal_metadata_.Clear();
}

bool command_mapset::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:client.command_mapset)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string key = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_key()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->key().data(), static_cast<int>(this->key().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "client.command_mapset.key"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .data.VALUE value = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_value()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:client.command_mapset)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:client.command_mapset)
  return false;
#undef DO_
}

void command_mapset::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:client.command_mapset)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string key = 1;
  if (this->key().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->key().data(), static_cast<int>(this->key().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "client.command_mapset.key");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->key(), output);
  }

  // .data.VALUE value = 2;
  if (this->has_value()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->value_, output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:client.command_mapset)
}

::google::protobuf::uint8* command_mapset::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:client.command_mapset)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string key = 1;
  if (this->key().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->key().data(), static_cast<int>(this->key().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "client.command_mapset.key");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->key(), target);
  }

  // .data.VALUE value = 2;
  if (this->has_value()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, *this->value_, deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:client.command_mapset)
  return target;
}

size_t command_mapset::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:client.command_mapset)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // string key = 1;
  if (this->key().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->key());
  }

  // .data.VALUE value = 2;
  if (this->has_value()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->value_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void command_mapset::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:client.command_mapset)
  GOOGLE_DCHECK_NE(&from, this);
  const command_mapset* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const command_mapset>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:client.command_mapset)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:client.command_mapset)
    MergeFrom(*source);
  }
}

void command_mapset::MergeFrom(const command_mapset& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:client.command_mapset)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.key().size() > 0) {

    key_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.key_);
  }
  if (from.has_value()) {
    mutable_value()->::data::VALUE::MergeFrom(from.value());
  }
}

void command_mapset::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:client.command_mapset)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void command_mapset::CopyFrom(const command_mapset& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:client.command_mapset)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool command_mapset::IsInitialized() const {
  return true;
}

void command_mapset::Swap(command_mapset* other) {
  if (other == this) return;
  InternalSwap(other);
}
void command_mapset::InternalSwap(command_mapset* other) {
  using std::swap;
  key_.Swap(&other->key_);
  swap(value_, other->value_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata command_mapset::GetMetadata() const {
  protobuf_message_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_message_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

command_mmapset_KvsEntry_DoNotUse::command_mmapset_KvsEntry_DoNotUse() {}
command_mmapset_KvsEntry_DoNotUse::command_mmapset_KvsEntry_DoNotUse(::google::protobuf::Arena* arena) : SuperType(arena) {}
void command_mmapset_KvsEntry_DoNotUse::MergeFrom(const command_mmapset_KvsEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::google::protobuf::Metadata command_mmapset_KvsEntry_DoNotUse::GetMetadata() const {
  ::protobuf_message_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_message_2eproto::file_level_metadata[89];
}
void command_mmapset_KvsEntry_DoNotUse::MergeFrom(
    const ::google::protobuf::Message& other) {
  ::google::protobuf::Message::MergeFrom(other);
}


// ===================================================================

void command_mmapset::InitAsDefaultInstance() {
}
void command_mmapset::clear_kvs() {
  kvs_.Clear();
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int command_mmapset::kKvsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

command_mmapset::command_mmapset()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_message_2eproto::InitDefaultscommand_mmapset();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:client.command_mmapset)
}
command_mmapset::command_mmapset(const command_mmapset& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  kvs_.MergeFrom(from.kvs_);
  // @@protoc_insertion_point(copy_constructor:client.command_mmapset)
}

void command_mmapset::SharedCtor() {
  _cached_size_ = 0;
}

command_mmapset::~command_mmapset() {
  // @@protoc_insertion_point(destructor:client.command_mmapset)
  SharedDtor();
}

void command_mmapset::SharedDtor() {
}

void command_mmapset::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* command_mmapset::descriptor() {
  ::protobuf_message_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_message_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const command_mmapset& command_mmapset::default_instance() {
  ::protobuf_message_2eproto::InitDefaultscommand_mmapset();
  return *internal_default_instance();
}

command_mmapset* command_mmapset::New(::google::protobuf::Arena* arena) const {
  command_mmapset* n = new command_mmapset;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void command_mmapset::Clear() {
// @@protoc_insertion_point(message_clear_start:client.command_mmapset)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  kvs_.Clear();
  _internal_metadata_.Clear();
}

bool command_mmapset::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:client.command_mmapset)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // map<string, .data.VALUE> kvs = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          command_mmapset_KvsEntry_DoNotUse::Parser< ::google::protobuf::internal::MapField<
              command_mmapset_KvsEntry_DoNotUse,
              ::std::string, ::data::VALUE,
              ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
              ::google::protobuf::internal::WireFormatLite::TYPE_MESSAGE,
              0 >,
            ::google::protobuf::Map< ::std::string, ::data::VALUE > > parser(&kvs_);
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
              input, &parser));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            parser.key().data(), static_cast<int>(parser.key().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "client.command_mmapset.KvsEntry.key"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:client.command_mmapset)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:client.command_mmapset)
  return false;
#undef DO_
}

void command_mmapset::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:client.command_mmapset)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // map<string, .data.VALUE> kvs = 1;
  if (!this->kvs().empty()) {
    typedef ::google::protobuf::Map< ::std::string, ::data::VALUE >::const_pointer
        ConstPtr;
    typedef ConstPtr SortItem;
    typedef ::google::protobuf::internal::CompareByDerefFirst<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
          p->first.data(), static_cast<int>(p->first.length()),
          ::google::protobuf::internal::WireFormatLite::SERIALIZE,
          "client.command_mmapset.KvsEntry.key");
      }
    };

    if (output->IsSerializationDeterministic() &&
        this->kvs().size() > 1) {
      ::google::protobuf::scoped_array<SortItem> items(
          new SortItem[this->kvs().size()]);
      typedef ::google::protobuf::Map< ::std::string, ::data::VALUE >::size_type size_type;
      size_type n = 0;
      for (::google::protobuf::Map< ::std::string, ::data::VALUE >::const_iterator
          it = this->kvs().begin();
          it != this->kvs().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      ::google::protobuf::scoped_ptr<command_mmapset_KvsEntry_DoNotUse> entry;
      for (size_type i = 0; i < n; i++) {
        entry.reset(kvs_.NewEntryWrapper(
            items[static_cast<ptrdiff_t>(i)]->first, items[static_cast<ptrdiff_t>(i)]->second));
        ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
            1, *entry, output);
        Utf8Check::Check(items[static_cast<ptrdiff_t>(i)]);
      }
    } else {
      ::google::protobuf::scoped_ptr<command_mmapset_KvsEntry_DoNotUse> entry;
      for (::google::protobuf::Map< ::std::string, ::data::VALUE >::const_iterator
          it = this->kvs().begin();
          it != this->kvs().end(); ++it) {
        entry.reset(kvs_.NewEntryWrapper(
            it->first, it->second));
        ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
            1, *entry, output);
        Utf8Check::Check(&*it);
      }
    }
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:client.command_mmapset)
}

::google::protobuf::uint8* command_mmapset::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:client.command_mmapset)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // map<string, .data.VALUE> kvs = 1;
  if (!this->kvs().empty()) {
    typedef ::google::protobuf::Map< ::std::string, ::data::VALUE >::const_pointer
        ConstPtr;
    typedef ConstPtr SortItem;
    typedef ::google::protobuf::internal::CompareByDerefFirst<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
          p->first.data(), static_cast<int>(p->first.length()),
          ::google::protobuf::internal::WireFormatLite::SERIALIZE,
          "client.command_mmapset.KvsEntry.key");
      }
    };

    if (deterministic &&
        this->kvs().size() > 1) {
      ::google::protobuf::scoped_array<SortItem> items(
          new SortItem[this->kvs().size()]);
      typedef ::google::protobuf::Map< ::std::string, ::data::VALUE >::size_type size_type;
      size_type n = 0;
      for (::google::protobuf::Map< ::std::string, ::data::VALUE >::const_iterator
          it = this->kvs().begin();
          it != this->kvs().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      ::google::protobuf::scoped_ptr<command_mmapset_KvsEntry_DoNotUse> entry;
      for (size_type i = 0; i < n; i++) {
        entry.reset(kvs_.NewEntryWrapper(
            items[static_cast<ptrdiff_t>(i)]->first, items[static_cast<ptrdiff_t>(i)]->second));
        target = ::google::protobuf::internal::WireFormatLite::
                   InternalWriteMessageNoVirtualToArray(
                       1, *entry, deterministic, target);
;
        Utf8Check::Check(items[static_cast<ptrdiff_t>(i)]);
      }
    } else {
      ::google::protobuf::scoped_ptr<command_mmapset_KvsEntry_DoNotUse> entry;
      for (::google::protobuf::Map< ::std::string, ::data::VALUE >::const_iterator
          it = this->kvs().begin();
          it != this->kvs().end(); ++it) {
        entry.reset(kvs_.NewEntryWrapper(
            it->first, it->second));
        target = ::google::protobuf::internal::WireFormatLite::
                   InternalWriteMessageNoVirtualToArray(
                       1, *entry, deterministic, target);
;
        Utf8Check::Check(&*it);
      }
    }
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:client.command_mmapset)
  return target;
}

size_t command_mmapset::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:client.command_mmapset)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // map<string, .data.VALUE> kvs = 1;
  total_size += 1 *
      ::google::protobuf::internal::FromIntSize(this->kvs_size());
  {
    ::google::protobuf::scoped_ptr<command_mmapset_KvsEntry_DoNotUse> entry;
    for (::google::protobuf::Map< ::std::string, ::data::VALUE >::const_iterator
        it = this->kvs().begin();
        it != this->kvs().end(); ++it) {
      entry.reset(kvs_.NewEntryWrapper(it->first, it->second));
      total_size += ::google::protobuf::internal::WireFormatLite::
          MessageSizeNoVirtual(*entry);
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void command_mmapset::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:client.command_mmapset)
  GOOGLE_DCHECK_NE(&from, this);
  const command_mmapset* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const command_mmapset>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:client.command_mmapset)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:client.command_mmapset)
    MergeFrom(*source);
  }
}

void command_mmapset::MergeFrom(const command_mmapset& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:client.command_mmapset)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  kvs_.MergeFrom(from.kvs_);
}

void command_mmapset::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:client.command_mmapset)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void command_mmapset::CopyFrom(const command_mmapset& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:client.command_mmapset)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool command_mmapset::IsInitialized() const {
  return true;
}

void command_mmapset::Swap(command_mmapset* other) {
  if (other == this) return;
  InternalSwap(other);
}
void command_mmapset::InternalSwap(command_mmapset* other) {
  using std::swap;
  kvs_.Swap(&other->kvs_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata command_mmapset::GetMetadata() const {
  protobuf_message_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_message_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void command_hmapset::InitAsDefaultInstance() {
  ::client::_command_hmapset_default_instance_._instance.get_mutable()->value_ = const_cast< ::data::VALUE*>(
      ::data::VALUE::internal_default_instance());
}
void command_hmapset::clear_value() {
  if (GetArenaNoVirtual() == NULL && value_ != NULL) {
    delete value_;
  }
  value_ = NULL;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int command_hmapset::kKeyFieldNumber;
const int command_hmapset::kFieldFieldNumber;
const int command_hmapset::kValueFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

command_hmapset::command_hmapset()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_message_2eproto::InitDefaultscommand_hmapset();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:client.command_hmapset)
}
command_hmapset::command_hmapset(const command_hmapset& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  key_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.key().size() > 0) {
    key_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.key_);
  }
  field_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.field().size() > 0) {
    field_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.field_);
  }
  if (from.has_value()) {
    value_ = new ::data::VALUE(*from.value_);
  } else {
    value_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:client.command_hmapset)
}

void command_hmapset::SharedCtor() {
  key_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  field_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  value_ = NULL;
  _cached_size_ = 0;
}

command_hmapset::~command_hmapset() {
  // @@protoc_insertion_point(destructor:client.command_hmapset)
  SharedDtor();
}

void command_hmapset::SharedDtor() {
  key_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  field_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete value_;
}

void command_hmapset::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* command_hmapset::descriptor() {
  ::protobuf_message_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_message_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const command_hmapset& command_hmapset::default_instance() {
  ::protobuf_message_2eproto::InitDefaultscommand_hmapset();
  return *internal_default_instance();
}

command_hmapset* command_hmapset::New(::google::protobuf::Arena* arena) const {
  command_hmapset* n = new command_hmapset;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void command_hmapset::Clear() {
// @@protoc_insertion_point(message_clear_start:client.command_hmapset)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  key_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  field_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == NULL && value_ != NULL) {
    delete value_;
  }
  value_ = NULL;
  _internal_metadata_.Clear();
}

bool command_hmapset::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:client.command_hmapset)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string key = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_key()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->key().data(), static_cast<int>(this->key().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "client.command_hmapset.key"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string field = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_field()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->field().data(), static_cast<int>(this->field().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "client.command_hmapset.field"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .data.VALUE value = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_value()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:client.command_hmapset)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:client.command_hmapset)
  return false;
#undef DO_
}

void command_hmapset::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:client.command_hmapset)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string key = 1;
  if (this->key().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->key().data(), static_cast<int>(this->key().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "client.command_hmapset.key");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->key(), output);
  }

  // string field = 2;
  if (this->field().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->field().data(), static_cast<int>(this->field().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "client.command_hmapset.field");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->field(), output);
  }

  // .data.VALUE value = 3;
  if (this->has_value()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, *this->value_, output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:client.command_hmapset)
}

::google::protobuf::uint8* command_hmapset::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:client.command_hmapset)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string key = 1;
  if (this->key().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->key().data(), static_cast<int>(this->key().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "client.command_hmapset.key");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->key(), target);
  }

  // string field = 2;
  if (this->field().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->field().data(), static_cast<int>(this->field().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "client.command_hmapset.field");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->field(), target);
  }

  // .data.VALUE value = 3;
  if (this->has_value()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        3, *this->value_, deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:client.command_hmapset)
  return target;
}

size_t command_hmapset::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:client.command_hmapset)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // string key = 1;
  if (this->key().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->key());
  }

  // string field = 2;
  if (this->field().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->field());
  }

  // .data.VALUE value = 3;
  if (this->has_value()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->value_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void command_hmapset::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:client.command_hmapset)
  GOOGLE_DCHECK_NE(&from, this);
  const command_hmapset* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const command_hmapset>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:client.command_hmapset)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:client.command_hmapset)
    MergeFrom(*source);
  }
}

void command_hmapset::MergeFrom(const command_hmapset& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:client.command_hmapset)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.key().size() > 0) {

    key_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.key_);
  }
  if (from.field().size() > 0) {

    field_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.field_);
  }
  if (from.has_value()) {
    mutable_value()->::data::VALUE::MergeFrom(from.value());
  }
}

void command_hmapset::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:client.command_hmapset)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void command_hmapset::CopyFrom(const command_hmapset& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:client.command_hmapset)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool command_hmapset::IsInitialized() const {
  return true;
}

void command_hmapset::Swap(command_hmapset* other) {
  if (other == this) return;
  InternalSwap(other);
}
void command_hmapset::InternalSwap(command_hmapset* other) {
  using std::swap;
  key_.Swap(&other->key_);
  field_.Swap(&other->field_);
  swap(value_, other->value_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata command_hmapset::GetMetadata() const {
  protobuf_message_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_message_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

command_hmmapset_ValuesEntry_DoNotUse::command_hmmapset_ValuesEntry_DoNotUse() {}
command_hmmapset_ValuesEntry_DoNotUse::command_hmmapset_ValuesEntry_DoNotUse(::google::protobuf::Arena* arena) : SuperType(arena) {}
void command_hmmapset_ValuesEntry_DoNotUse::MergeFrom(const command_hmmapset_ValuesEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::google::protobuf::Metadata command_hmmapset_ValuesEntry_DoNotUse::GetMetadata() const {
  ::protobuf_message_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_message_2eproto::file_level_metadata[92];
}
void command_hmmapset_ValuesEntry_DoNotUse::MergeFrom(
    const ::google::protobuf::Message& other) {
  ::google::protobuf::Message::MergeFrom(other);
}


// ===================================================================

void command_hmmapset::InitAsDefaultInstance() {
}
void command_hmmapset::clear_values() {
  values_.Clear();
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int command_hmmapset::kKeyFieldNumber;
const int command_hmmapset::kValuesFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

command_hmmapset::command_hmmapset()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_message_2eproto::InitDefaultscommand_hmmapset();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:client.command_hmmapset)
}
command_hmmapset::command_hmmapset(const command_hmmapset& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  values_.MergeFrom(from.values_);
  key_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.key().size() > 0) {
    key_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.key_);
  }
  // @@protoc_insertion_point(copy_constructor:client.command_hmmapset)
}

void command_hmmapset::SharedCtor() {
  key_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _cached_size_ = 0;
}

command_hmmapset::~command_hmmapset() {
  // @@protoc_insertion_point(destructor:client.command_hmmapset)
  SharedDtor();
}

void command_hmmapset::SharedDtor() {
  key_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void command_hmmapset::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* command_hmmapset::descriptor() {
  ::protobuf_message_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_message_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const command_hmmapset& command_hmmapset::default_instance() {
  ::protobuf_message_2eproto::InitDefaultscommand_hmmapset();
  return *internal_default_instance();
}

command_hmmapset* command_hmmapset::New(::google::protobuf::Arena* arena) const {
  command_hmmapset* n = new command_hmmapset;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void command_hmmapset::Clear() {
// @@protoc_insertion_point(message_clear_start:client.command_hmmapset)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  values_.Clear();
  key_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _internal_metadata_.Clear();
}

bool command_hmmapset::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:client.command_hmmapset)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string key = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_key()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->key().data(), static_cast<int>(this->key().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "client.command_hmmapset.key"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // map<string, .data.VALUE> values = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          command_hmmapset_ValuesEntry_DoNotUse::Parser< ::google::protobuf::internal::MapField<
              command_hmmapset_ValuesEntry_DoNotUse,
              ::std::string, ::data::VALUE,
              ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
              ::google::protobuf::internal::WireFormatLite::TYPE_MESSAGE,
              0 >,
            ::google::protobuf::Map< ::std::string, ::data::VALUE > > parser(&values_);
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
              input, &parser));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            parser.key().data(), static_cast<int>(parser.key().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "client.command_hmmapset.ValuesEntry.key"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:client.command_hmmapset)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:client.command_hmmapset)
  return false;
#undef DO_
}

void command_hmmapset::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:client.command_hmmapset)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string key = 1;
  if (this->key().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->key().data(), static_cast<int>(this->key().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "client.command_hmmapset.key");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->key(), output);
  }

  // map<string, .data.VALUE> values = 2;
  if (!this->values().empty()) {
    typedef ::google::protobuf::Map< ::std::string, ::data::VALUE >::const_pointer
        ConstPtr;
    typedef ConstPtr SortItem;
    typedef ::google::protobuf::internal::CompareByDerefFirst<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
          p->first.data(), static_cast<int>(p->first.length()),
          ::google::protobuf::internal::WireFormatLite::SERIALIZE,
          "client.command_hmmapset.ValuesEntry.key");
      }
    };

    if (output->IsSerializationDeterministic() &&
        this->values().size() > 1) {
      ::google::protobuf::scoped_array<SortItem> items(
          new SortItem[this->values().size()]);
      typedef ::google::protobuf::Map< ::std::string, ::data::VALUE >::size_type size_type;
      size_type n = 0;
      for (::google::protobuf::Map< ::std::string, ::data::VALUE >::const_iterator
          it = this->values().begin();
          it != this->values().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      ::google::protobuf::scoped_ptr<command_hmmapset_ValuesEntry_DoNotUse> entry;
      for (size_type i = 0; i < n; i++) {
        entry.reset(values_.NewEntryWrapper(
            items[static_cast<ptrdiff_t>(i)]->first, items[static_cast<ptrdiff_t>(i)]->second));
        ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
            2, *entry, output);
        Utf8Check::Check(items[static_cast<ptrdiff_t>(i)]);
      }
    } else {
      ::google::protobuf::scoped_ptr<command_hmmapset_ValuesEntry_DoNotUse> entry;
      for (::google::protobuf::Map< ::std::string, ::data::VALUE >::const_iterator
          it = this->values().begin();
          it != this->values().end(); ++it) {
        entry.reset(values_.NewEntryWrapper(
            it->first, it->second));
        ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
            2, *entry, output);
        Utf8Check::Check(&*it);
      }
    }
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:client.command_hmmapset)
}

::google::protobuf::uint8* command_hmmapset::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:client.command_hmmapset)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string key = 1;
  if (this->key().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->key().data(), static_cast<int>(this->key().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "client.command_hmmapset.key");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->key(), target);
  }

  // map<string, .data.VALUE> values = 2;
  if (!this->values().empty()) {
    typedef ::google::protobuf::Map< ::std::string, ::data::VALUE >::const_pointer
        ConstPtr;
    typedef ConstPtr SortItem;
    typedef ::google::protobuf::internal::CompareByDerefFirst<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
          p->first.data(), static_cast<int>(p->first.length()),
          ::google::protobuf::internal::WireFormatLite::SERIALIZE,
          "client.command_hmmapset.ValuesEntry.key");
      }
    };

    if (deterministic &&
        this->values().size() > 1) {
      ::google::protobuf::scoped_array<SortItem> items(
          new SortItem[this->values().size()]);
      typedef ::google::protobuf::Map< ::std::string, ::data::VALUE >::size_type size_type;
      size_type n = 0;
      for (::google::protobuf::Map< ::std::string, ::data::VALUE >::const_iterator
          it = this->values().begin();
          it != this->values().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      ::google::protobuf::scoped_ptr<command_hmmapset_ValuesEntry_DoNotUse> entry;
      for (size_type i = 0; i < n; i++) {
        entry.reset(values_.NewEntryWrapper(
            items[static_cast<ptrdiff_t>(i)]->first, items[static_cast<ptrdiff_t>(i)]->second));
        target = ::google::protobuf::internal::WireFormatLite::
                   InternalWriteMessageNoVirtualToArray(
                       2, *entry, deterministic, target);
;
        Utf8Check::Check(items[static_cast<ptrdiff_t>(i)]);
      }
    } else {
      ::google::protobuf::scoped_ptr<command_hmmapset_ValuesEntry_DoNotUse> entry;
      for (::google::protobuf::Map< ::std::string, ::data::VALUE >::const_iterator
          it = this->values().begin();
          it != this->values().end(); ++it) {
        entry.reset(values_.NewEntryWrapper(
            it->first, it->second));
        target = ::google::protobuf::internal::WireFormatLite::
                   InternalWriteMessageNoVirtualToArray(
                       2, *entry, deterministic, target);
;
        Utf8Check::Check(&*it);
      }
    }
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:client.command_hmmapset)
  return target;
}

size_t command_hmmapset::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:client.command_hmmapset)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // map<string, .data.VALUE> values = 2;
  total_size += 1 *
      ::google::protobuf::internal::FromIntSize(this->values_size());
  {
    ::google::protobuf::scoped_ptr<command_hmmapset_ValuesEntry_DoNotUse> entry;
    for (::google::protobuf::Map< ::std::string, ::data::VALUE >::const_iterator
        it = this->values().begin();
        it != this->values().end(); ++it) {
      entry.reset(values_.NewEntryWrapper(it->first, it->second));
      total_size += ::google::protobuf::internal::WireFormatLite::
          MessageSizeNoVirtual(*entry);
    }
  }

  // string key = 1;
  if (this->key().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->key());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void command_hmmapset::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:client.command_hmmapset)
  GOOGLE_DCHECK_NE(&from, this);
  const command_hmmapset* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const command_hmmapset>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:client.command_hmmapset)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:client.command_hmmapset)
    MergeFrom(*source);
  }
}

void command_hmmapset::MergeFrom(const command_hmmapset& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:client.command_hmmapset)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  values_.MergeFrom(from.values_);
  if (from.key().size() > 0) {

    key_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.key_);
  }
}

void command_hmmapset::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:client.command_hmmapset)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void command_hmmapset::CopyFrom(const command_hmmapset& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:client.command_hmmapset)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool command_hmmapset::IsInitialized() const {
  return true;
}

void command_hmmapset::Swap(command_hmmapset* other) {
  if (other == this) return;
  InternalSwap(other);
}
void command_hmmapset::InternalSwap(command_hmmapset* other) {
  using std::swap;
  values_.Swap(&other->values_);
  key_.Swap(&other->key_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata command_hmmapset::GetMetadata() const {
  protobuf_message_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_message_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

command_mhmmapset_ValuesEntry_DoNotUse::command_mhmmapset_ValuesEntry_DoNotUse() {}
command_mhmmapset_ValuesEntry_DoNotUse::command_mhmmapset_ValuesEntry_DoNotUse(::google::protobuf::Arena* arena) : SuperType(arena) {}
void command_mhmmapset_ValuesEntry_DoNotUse::MergeFrom(const command_mhmmapset_ValuesEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::google::protobuf::Metadata command_mhmmapset_ValuesEntry_DoNotUse::GetMetadata() const {
  ::protobuf_message_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_message_2eproto::file_level_metadata[94];
}
void command_mhmmapset_ValuesEntry_DoNotUse::MergeFrom(
    const ::google::protobuf::Message& other) {
  ::google::protobuf::Message::MergeFrom(other);
}


// ===================================================================

void command_mhmmapset::InitAsDefaultInstance() {
}
void command_mhmmapset::clear_values() {
  values_.Clear();
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int command_mhmmapset::kFieldsFieldNumber;
const int command_mhmmapset::kValuesFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

command_mhmmapset::command_mhmmapset()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_message_2eproto::InitDefaultscommand_mhmmapset();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:client.command_mhmmapset)
}
command_mhmmapset::command_mhmmapset(const command_mhmmapset& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      fields_(from.fields_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  values_.MergeFrom(from.values_);
  // @@protoc_insertion_point(copy_constructor:client.command_mhmmapset)
}

void command_mhmmapset::SharedCtor() {
  _cached_size_ = 0;
}

command_mhmmapset::~command_mhmmapset() {
  // @@protoc_insertion_point(destructor:client.command_mhmmapset)
  SharedDtor();
}

void command_mhmmapset::SharedDtor() {
}

void command_mhmmapset::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* command_mhmmapset::descriptor() {
  ::protobuf_message_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_message_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const command_mhmmapset& command_mhmmapset::default_instance() {
  ::protobuf_message_2eproto::InitDefaultscommand_mhmmapset();
  return *internal_default_instance();
}

command_mhmmapset* command_mhmmapset::New(::google::protobuf::Arena* arena) const {
  command_mhmmapset* n = new command_mhmmapset;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void command_mhmmapset::Clear() {
// @@protoc_insertion_point(message_clear_start:client.command_mhmmapset)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  fields_.Clear();
  values_.Clear();
  _internal_metadata_.Clear();
}

bool command_mhmmapset::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:client.command_mhmmapset)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated string fields = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_fields()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->fields(this->fields_size() - 1).data(),
            static_cast<int>(this->fields(this->fields_size() - 1).length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "client.command_mhmmapset.fields"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // map<string, .data.VALUE> values = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          command_mhmmapset_ValuesEntry_DoNotUse::Parser< ::google::protobuf::internal::MapField<
              command_mhmmapset_ValuesEntry_DoNotUse,
              ::std::string, ::data::VALUE,
              ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
              ::google::protobuf::internal::WireFormatLite::TYPE_MESSAGE,
              0 >,
            ::google::protobuf::Map< ::std::string, ::data::VALUE > > parser(&values_);
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
              input, &parser));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            parser.key().data(), static_cast<int>(parser.key().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "client.command_mhmmapset.ValuesEntry.key"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:client.command_mhmmapset)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:client.command_mhmmapset)
  return false;
#undef DO_
}

void command_mhmmapset::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:client.command_mhmmapset)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated string fields = 1;
  for (int i = 0, n = this->fields_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->fields(i).data(), static_cast<int>(this->fields(i).length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "client.command_mhmmapset.fields");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->fields(i), output);
  }

  // map<string, .data.VALUE> values = 2;
  if (!this->values().empty()) {
    typedef ::google::protobuf::Map< ::std::string, ::data::VALUE >::const_pointer
        ConstPtr;
    typedef ConstPtr SortItem;
    typedef ::google::protobuf::internal::CompareByDerefFirst<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
          p->first.data(), static_cast<int>(p->first.length()),
          ::google::protobuf::internal::WireFormatLite::SERIALIZE,
          "client.command_mhmmapset.ValuesEntry.key");
      }
    };

    if (output->IsSerializationDeterministic() &&
        this->values().size() > 1) {
      ::google::protobuf::scoped_array<SortItem> items(
          new SortItem[this->values().size()]);
      typedef ::google::protobuf::Map< ::std::string, ::data::VALUE >::size_type size_type;
      size_type n = 0;
      for (::google::protobuf::Map< ::std::string, ::data::VALUE >::const_iterator
          it = this->values().begin();
          it != this->values().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      ::google::protobuf::scoped_ptr<command_mhmmapset_ValuesEntry_DoNotUse> entry;
      for (size_type i = 0; i < n; i++) {
        entry.reset(values_.NewEntryWrapper(
            items[static_cast<ptrdiff_t>(i)]->first, items[static_cast<ptrdiff_t>(i)]->second));
        ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
            2, *entry, output);
        Utf8Check::Check(items[static_cast<ptrdiff_t>(i)]);
      }
    } else {
      ::google::protobuf::scoped_ptr<command_mhmmapset_ValuesEntry_DoNotUse> entry;
      for (::google::protobuf::Map< ::std::string, ::data::VALUE >::const_iterator
          it = this->values().begin();
          it != this->values().end(); ++it) {
        entry.reset(values_.NewEntryWrapper(
            it->first, it->second));
        ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
            2, *entry, output);
        Utf8Check::Check(&*it);
      }
    }
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:client.command_mhmmapset)
}

::google::protobuf::uint8* command_mhmmapset::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:client.command_mhmmapset)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated string fields = 1;
  for (int i = 0, n = this->fields_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->fields(i).data(), static_cast<int>(this->fields(i).length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "client.command_mhmmapset.fields");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(1, this->fields(i), target);
  }

  // map<string, .data.VALUE> values = 2;
  if (!this->values().empty()) {
    typedef ::google::protobuf::Map< ::std::string, ::data::VALUE >::const_pointer
        ConstPtr;
    typedef ConstPtr SortItem;
    typedef ::google::protobuf::internal::CompareByDerefFirst<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
          p->first.data(), static_cast<int>(p->first.length()),
          ::google::protobuf::internal::WireFormatLite::SERIALIZE,
          "client.command_mhmmapset.ValuesEntry.key");
      }
    };

    if (deterministic &&
        this->values().size() > 1) {
      ::google::protobuf::scoped_array<SortItem> items(
          new SortItem[this->values().size()]);
      typedef ::google::protobuf::Map< ::std::string, ::data::VALUE >::size_type size_type;
      size_type n = 0;
      for (::google::protobuf::Map< ::std::string, ::data::VALUE >::const_iterator
          it = this->values().begin();
          it != this->values().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      ::google::protobuf::scoped_ptr<command_mhmmapset_ValuesEntry_DoNotUse> entry;
      for (size_type i = 0; i < n; i++) {
        entry.reset(values_.NewEntryWrapper(
            items[static_cast<ptrdiff_t>(i)]->first, items[static_cast<ptrdiff_t>(i)]->second));
        target = ::google::protobuf::internal::WireFormatLite::
                   InternalWriteMessageNoVirtualToArray(
                       2, *entry, deterministic, target);
;
        Utf8Check::Check(items[static_cast<ptrdiff_t>(i)]);
      }
    } else {
      ::google::protobuf::scoped_ptr<command_mhmmapset_ValuesEntry_DoNotUse> entry;
      for (::google::protobuf::Map< ::std::string, ::data::VALUE >::const_iterator
          it = this->values().begin();
          it != this->values().end(); ++it) {
        entry.reset(values_.NewEntryWrapper(
            it->first, it->second));
        target = ::google::protobuf::internal::WireFormatLite::
                   InternalWriteMessageNoVirtualToArray(
                       2, *entry, deterministic, target);
;
        Utf8Check::Check(&*it);
      }
    }
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:client.command_mhmmapset)
  return target;
}

size_t command_mhmmapset::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:client.command_mhmmapset)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // repeated string fields = 1;
  total_size += 1 *
      ::google::protobuf::internal::FromIntSize(this->fields_size());
  for (int i = 0, n = this->fields_size(); i < n; i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->fields(i));
  }

  // map<string, .data.VALUE> values = 2;
  total_size += 1 *
      ::google::protobuf::internal::FromIntSize(this->values_size());
  {
    ::google::protobuf::scoped_ptr<command_mhmmapset_ValuesEntry_DoNotUse> entry;
    for (::google::protobuf::Map< ::std::string, ::data::VALUE >::const_iterator
        it = this->values().begin();
        it != this->values().end(); ++it) {
      entry.reset(values_.NewEntryWrapper(it->first, it->second));
      total_size += ::google::protobuf::internal::WireFormatLite::
          MessageSizeNoVirtual(*entry);
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void command_mhmmapset::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:client.command_mhmmapset)
  GOOGLE_DCHECK_NE(&from, this);
  const command_mhmmapset* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const command_mhmmapset>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:client.command_mhmmapset)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:client.command_mhmmapset)
    MergeFrom(*source);
  }
}

void command_mhmmapset::MergeFrom(const command_mhmmapset& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:client.command_mhmmapset)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  fields_.MergeFrom(from.fields_);
  values_.MergeFrom(from.values_);
}

void command_mhmmapset::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:client.command_mhmmapset)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void command_mhmmapset::CopyFrom(const command_mhmmapset& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:client.command_mhmmapset)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool command_mhmmapset::IsInitialized() const {
  return true;
}

void command_mhmmapset::Swap(command_mhmmapset* other) {
  if (other == this) return;
  InternalSwap(other);
}
void command_mhmmapset::InternalSwap(command_mhmmapset* other) {
  using std::swap;
  fields_.InternalSwap(&other->fields_);
  values_.Swap(&other->values_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata command_mhmmapset::GetMetadata() const {
  protobuf_message_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_message_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void command_mapdel::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int command_mapdel::kKeyFieldNumber;
const int command_mapdel::kMapkeysFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

command_mapdel::command_mapdel()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_message_2eproto::InitDefaultscommand_mapdel();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:client.command_mapdel)
}
command_mapdel::command_mapdel(const command_mapdel& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      mapkeys_(from.mapkeys_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  key_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.key().size() > 0) {
    key_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.key_);
  }
  // @@protoc_insertion_point(copy_constructor:client.command_mapdel)
}

void command_mapdel::SharedCtor() {
  key_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _cached_size_ = 0;
}

command_mapdel::~command_mapdel() {
  // @@protoc_insertion_point(destructor:client.command_mapdel)
  SharedDtor();
}

void command_mapdel::SharedDtor() {
  key_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void command_mapdel::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* command_mapdel::descriptor() {
  ::protobuf_message_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_message_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const command_mapdel& command_mapdel::default_instance() {
  ::protobuf_message_2eproto::InitDefaultscommand_mapdel();
  return *internal_default_instance();
}

command_mapdel* command_mapdel::New(::google::protobuf::Arena* arena) const {
  command_mapdel* n = new command_mapdel;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void command_mapdel::Clear() {
// @@protoc_insertion_point(message_clear_start:client.command_mapdel)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  mapkeys_.Clear();
  key_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _internal_metadata_.Clear();
}

bool command_mapdel::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:client.command_mapdel)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string key = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_key()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->key().data(), static_cast<int>(this->key().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "client.command_mapdel.key"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated string mapkeys = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_mapkeys()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->mapkeys(this->mapkeys_size() - 1).data(),
            static_cast<int>(this->mapkeys(this->mapkeys_size() - 1).length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "client.command_mapdel.mapkeys"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:client.command_mapdel)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:client.command_mapdel)
  return false;
#undef DO_
}

void command_mapdel::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:client.command_mapdel)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string key = 1;
  if (this->key().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->key().data(), static_cast<int>(this->key().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "client.command_mapdel.key");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->key(), output);
  }

  // repeated string mapkeys = 2;
  for (int i = 0, n = this->mapkeys_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->mapkeys(i).data(), static_cast<int>(this->mapkeys(i).length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "client.command_mapdel.mapkeys");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->mapkeys(i), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:client.command_mapdel)
}

::google::protobuf::uint8* command_mapdel::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:client.command_mapdel)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string key = 1;
  if (this->key().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->key().data(), static_cast<int>(this->key().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "client.command_mapdel.key");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->key(), target);
  }

  // repeated string mapkeys = 2;
  for (int i = 0, n = this->mapkeys_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->mapkeys(i).data(), static_cast<int>(this->mapkeys(i).length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "client.command_mapdel.mapkeys");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(2, this->mapkeys(i), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:client.command_mapdel)
  return target;
}

size_t command_mapdel::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:client.command_mapdel)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // repeated string mapkeys = 2;
  total_size += 1 *
      ::google::protobuf::internal::FromIntSize(this->mapkeys_size());
  for (int i = 0, n = this->mapkeys_size(); i < n; i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->mapkeys(i));
  }

  // string key = 1;
  if (this->key().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->key());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void command_mapdel::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:client.command_mapdel)
  GOOGLE_DCHECK_NE(&from, this);
  const command_mapdel* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const command_mapdel>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:client.command_mapdel)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:client.command_mapdel)
    MergeFrom(*source);
  }
}

void command_mapdel::MergeFrom(const command_mapdel& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:client.command_mapdel)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  mapkeys_.MergeFrom(from.mapkeys_);
  if (from.key().size() > 0) {

    key_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.key_);
  }
}

void command_mapdel::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:client.command_mapdel)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void command_mapdel::CopyFrom(const command_mapdel& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:client.command_mapdel)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool command_mapdel::IsInitialized() const {
  return true;
}

void command_mapdel::Swap(command_mapdel* other) {
  if (other == this) return;
  InternalSwap(other);
}
void command_mapdel::InternalSwap(command_mapdel* other) {
  using std::swap;
  mapkeys_.InternalSwap(&other->mapkeys_);
  key_.Swap(&other->key_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata command_mapdel::GetMetadata() const {
  protobuf_message_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_message_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void command_mmapdel::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int command_mmapdel::kKeysFieldNumber;
const int command_mmapdel::kMapkeysFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

command_mmapdel::command_mmapdel()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_message_2eproto::InitDefaultscommand_mmapdel();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:client.command_mmapdel)
}
command_mmapdel::command_mmapdel(const command_mmapdel& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      keys_(from.keys_),
      mapkeys_(from.mapkeys_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:client.command_mmapdel)
}

void command_mmapdel::SharedCtor() {
  _cached_size_ = 0;
}

command_mmapdel::~command_mmapdel() {
  // @@protoc_insertion_point(destructor:client.command_mmapdel)
  SharedDtor();
}

void command_mmapdel::SharedDtor() {
}

void command_mmapdel::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* command_mmapdel::descriptor() {
  ::protobuf_message_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_message_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const command_mmapdel& command_mmapdel::default_instance() {
  ::protobuf_message_2eproto::InitDefaultscommand_mmapdel();
  return *internal_default_instance();
}

command_mmapdel* command_mmapdel::New(::google::protobuf::Arena* arena) const {
  command_mmapdel* n = new command_mmapdel;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void command_mmapdel::Clear() {
// @@protoc_insertion_point(message_clear_start:client.command_mmapdel)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  keys_.Clear();
  mapkeys_.Clear();
  _internal_metadata_.Clear();
}

bool command_mmapdel::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:client.command_mmapdel)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated string keys = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_keys()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->keys(this->keys_size() - 1).data(),
            static_cast<int>(this->keys(this->keys_size() - 1).length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "client.command_mmapdel.keys"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated string mapkeys = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_mapkeys()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->mapkeys(this->mapkeys_size() - 1).data(),
            static_cast<int>(this->mapkeys(this->mapkeys_size() - 1).length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "client.command_mmapdel.mapkeys"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:client.command_mmapdel)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:client.command_mmapdel)
  return false;
#undef DO_
}

void command_mmapdel::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:client.command_mmapdel)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated string keys = 1;
  for (int i = 0, n = this->keys_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->keys(i).data(), static_cast<int>(this->keys(i).length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "client.command_mmapdel.keys");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->keys(i), output);
  }

  // repeated string mapkeys = 2;
  for (int i = 0, n = this->mapkeys_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->mapkeys(i).data(), static_cast<int>(this->mapkeys(i).length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "client.command_mmapdel.mapkeys");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->mapkeys(i), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:client.command_mmapdel)
}

::google::protobuf::uint8* command_mmapdel::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:client.command_mmapdel)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated string keys = 1;
  for (int i = 0, n = this->keys_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->keys(i).data(), static_cast<int>(this->keys(i).length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "client.command_mmapdel.keys");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(1, this->keys(i), target);
  }

  // repeated string mapkeys = 2;
  for (int i = 0, n = this->mapkeys_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->mapkeys(i).data(), static_cast<int>(this->mapkeys(i).length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "client.command_mmapdel.mapkeys");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(2, this->mapkeys(i), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:client.command_mmapdel)
  return target;
}

size_t command_mmapdel::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:client.command_mmapdel)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // repeated string keys = 1;
  total_size += 1 *
      ::google::protobuf::internal::FromIntSize(this->keys_size());
  for (int i = 0, n = this->keys_size(); i < n; i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->keys(i));
  }

  // repeated string mapkeys = 2;
  total_size += 1 *
      ::google::protobuf::internal::FromIntSize(this->mapkeys_size());
  for (int i = 0, n = this->mapkeys_size(); i < n; i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->mapkeys(i));
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void command_mmapdel::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:client.command_mmapdel)
  GOOGLE_DCHECK_NE(&from, this);
  const command_mmapdel* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const command_mmapdel>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:client.command_mmapdel)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:client.command_mmapdel)
    MergeFrom(*source);
  }
}

void command_mmapdel::MergeFrom(const command_mmapdel& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:client.command_mmapdel)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  keys_.MergeFrom(from.keys_);
  mapkeys_.MergeFrom(from.mapkeys_);
}

void command_mmapdel::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:client.command_mmapdel)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void command_mmapdel::CopyFrom(const command_mmapdel& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:client.command_mmapdel)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool command_mmapdel::IsInitialized() const {
  return true;
}

void command_mmapdel::Swap(command_mmapdel* other) {
  if (other == this) return;
  InternalSwap(other);
}
void command_mmapdel::InternalSwap(command_mmapdel* other) {
  using std::swap;
  keys_.InternalSwap(&other->keys_);
  mapkeys_.InternalSwap(&other->mapkeys_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata command_mmapdel::GetMetadata() const {
  protobuf_message_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_message_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void command_hmapdel::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int command_hmapdel::kKeyFieldNumber;
const int command_hmapdel::kFieldFieldNumber;
const int command_hmapdel::kMapkeysFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

command_hmapdel::command_hmapdel()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_message_2eproto::InitDefaultscommand_hmapdel();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:client.command_hmapdel)
}
command_hmapdel::command_hmapdel(const command_hmapdel& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      mapkeys_(from.mapkeys_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  key_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.key().size() > 0) {
    key_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.key_);
  }
  field_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.field().size() > 0) {
    field_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.field_);
  }
  // @@protoc_insertion_point(copy_constructor:client.command_hmapdel)
}

void command_hmapdel::SharedCtor() {
  key_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  field_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _cached_size_ = 0;
}

command_hmapdel::~command_hmapdel() {
  // @@protoc_insertion_point(destructor:client.command_hmapdel)
  SharedDtor();
}

void command_hmapdel::SharedDtor() {
  key_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  field_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void command_hmapdel::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* command_hmapdel::descriptor() {
  ::protobuf_message_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_message_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const command_hmapdel& command_hmapdel::default_instance() {
  ::protobuf_message_2eproto::InitDefaultscommand_hmapdel();
  return *internal_default_instance();
}

command_hmapdel* command_hmapdel::New(::google::protobuf::Arena* arena) const {
  command_hmapdel* n = new command_hmapdel;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void command_hmapdel::Clear() {
// @@protoc_insertion_point(message_clear_start:client.command_hmapdel)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  mapkeys_.Clear();
  key_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  field_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _internal_metadata_.Clear();
}

bool command_hmapdel::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:client.command_hmapdel)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string key = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_key()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->key().data(), static_cast<int>(this->key().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "client.command_hmapdel.key"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string field = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_field()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->field().data(), static_cast<int>(this->field().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "client.command_hmapdel.field"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated string mapkeys = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_mapkeys()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->mapkeys(this->mapkeys_size() - 1).data(),
            static_cast<int>(this->mapkeys(this->mapkeys_size() - 1).length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "client.command_hmapdel.mapkeys"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:client.command_hmapdel)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:client.command_hmapdel)
  return false;
#undef DO_
}

void command_hmapdel::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:client.command_hmapdel)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string key = 1;
  if (this->key().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->key().data(), static_cast<int>(this->key().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "client.command_hmapdel.key");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->key(), output);
  }

  // string field = 2;
  if (this->field().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->field().data(), static_cast<int>(this->field().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "client.command_hmapdel.field");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->field(), output);
  }

  // repeated string mapkeys = 3;
  for (int i = 0, n = this->mapkeys_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->mapkeys(i).data(), static_cast<int>(this->mapkeys(i).length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "client.command_hmapdel.mapkeys");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->mapkeys(i), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:client.command_hmapdel)
}

::google::protobuf::uint8* command_hmapdel::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:client.command_hmapdel)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string key = 1;
  if (this->key().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->key().data(), static_cast<int>(this->key().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "client.command_hmapdel.key");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->key(), target);
  }

  // string field = 2;
  if (this->field().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->field().data(), static_cast<int>(this->field().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "client.command_hmapdel.field");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->field(), target);
  }

  // repeated string mapkeys = 3;
  for (int i = 0, n = this->mapkeys_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->mapkeys(i).data(), static_cast<int>(this->mapkeys(i).length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "client.command_hmapdel.mapkeys");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(3, this->mapkeys(i), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:client.command_hmapdel)
  return target;
}

size_t command_hmapdel::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:client.command_hmapdel)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // repeated string mapkeys = 3;
  total_size += 1 *
      ::google::protobuf::internal::FromIntSize(this->mapkeys_size());
  for (int i = 0, n = this->mapkeys_size(); i < n; i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->mapkeys(i));
  }

  // string key = 1;
  if (this->key().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->key());
  }

  // string field = 2;
  if (this->field().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->field());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void command_hmapdel::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:client.command_hmapdel)
  GOOGLE_DCHECK_NE(&from, this);
  const command_hmapdel* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const command_hmapdel>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:client.command_hmapdel)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:client.command_hmapdel)
    MergeFrom(*source);
  }
}

void command_hmapdel::MergeFrom(const command_hmapdel& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:client.command_hmapdel)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  mapkeys_.MergeFrom(from.mapkeys_);
  if (from.key().size() > 0) {

    key_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.key_);
  }
  if (from.field().size() > 0) {

    field_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.field_);
  }
}

void command_hmapdel::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:client.command_hmapdel)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void command_hmapdel::CopyFrom(const command_hmapdel& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:client.command_hmapdel)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool command_hmapdel::IsInitialized() const {
  return true;
}

void command_hmapdel::Swap(command_hmapdel* other) {
  if (other == this) return;
  InternalSwap(other);
}
void command_hmapdel::InternalSwap(command_hmapdel* other) {
  using std::swap;
  mapkeys_.InternalSwap(&other->mapkeys_);
  key_.Swap(&other->key_);
  field_.Swap(&other->field_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata command_hmapdel::GetMetadata() const {
  protobuf_message_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_message_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void command_hmmapdel::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int command_hmmapdel::kKeyFieldNumber;
const int command_hmmapdel::kFieldFieldNumber;
const int command_hmmapdel::kMapkeysFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

command_hmmapdel::command_hmmapdel()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_message_2eproto::InitDefaultscommand_hmmapdel();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:client.command_hmmapdel)
}
command_hmmapdel::command_hmmapdel(const command_hmmapdel& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      field_(from.field_),
      mapkeys_(from.mapkeys_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  key_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.key().size() > 0) {
    key_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.key_);
  }
  // @@protoc_insertion_point(copy_constructor:client.command_hmmapdel)
}

void command_hmmapdel::SharedCtor() {
  key_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _cached_size_ = 0;
}

command_hmmapdel::~command_hmmapdel() {
  // @@protoc_insertion_point(destructor:client.command_hmmapdel)
  SharedDtor();
}

void command_hmmapdel::SharedDtor() {
  key_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void command_hmmapdel::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* command_hmmapdel::descriptor() {
  ::protobuf_message_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_message_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const command_hmmapdel& command_hmmapdel::default_instance() {
  ::protobuf_message_2eproto::InitDefaultscommand_hmmapdel();
  return *internal_default_instance();
}

command_hmmapdel* command_hmmapdel::New(::google::protobuf::Arena* arena) const {
  command_hmmapdel* n = new command_hmmapdel;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void command_hmmapdel::Clear() {
// @@protoc_insertion_point(message_clear_start:client.command_hmmapdel)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  field_.Clear();
  mapkeys_.Clear();
  key_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _internal_metadata_.Clear();
}

bool command_hmmapdel::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:client.command_hmmapdel)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string key = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_key()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->key().data(), static_cast<int>(this->key().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "client.command_hmmapdel.key"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated string field = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_field()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->field(this->field_size() - 1).data(),
            static_cast<int>(this->field(this->field_size() - 1).length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "client.command_hmmapdel.field"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated string mapkeys = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_mapkeys()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->mapkeys(this->mapkeys_size() - 1).data(),
            static_cast<int>(this->mapkeys(this->mapkeys_size() - 1).length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "client.command_hmmapdel.mapkeys"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:client.command_hmmapdel)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:client.command_hmmapdel)
  return false;
#undef DO_
}

void command_hmmapdel::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:client.command_hmmapdel)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string key = 1;
  if (this->key().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->key().data(), static_cast<int>(this->key().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "client.command_hmmapdel.key");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->key(), output);
  }

  // repeated string field = 2;
  for (int i = 0, n = this->field_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->field(i).data(), static_cast<int>(this->field(i).length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "client.command_hmmapdel.field");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->field(i), output);
  }

  // repeated string mapkeys = 3;
  for (int i = 0, n = this->mapkeys_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->mapkeys(i).data(), static_cast<int>(this->mapkeys(i).length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "client.command_hmmapdel.mapkeys");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->mapkeys(i), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:client.command_hmmapdel)
}

::google::protobuf::uint8* command_hmmapdel::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:client.command_hmmapdel)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string key = 1;
  if (this->key().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->key().data(), static_cast<int>(this->key().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "client.command_hmmapdel.key");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->key(), target);
  }

  // repeated string field = 2;
  for (int i = 0, n = this->field_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->field(i).data(), static_cast<int>(this->field(i).length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "client.command_hmmapdel.field");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(2, this->field(i), target);
  }

  // repeated string mapkeys = 3;
  for (int i = 0, n = this->mapkeys_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->mapkeys(i).data(), static_cast<int>(this->mapkeys(i).length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "client.command_hmmapdel.mapkeys");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(3, this->mapkeys(i), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:client.command_hmmapdel)
  return target;
}

size_t command_hmmapdel::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:client.command_hmmapdel)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // repeated string field = 2;
  total_size += 1 *
      ::google::protobuf::internal::FromIntSize(this->field_size());
  for (int i = 0, n = this->field_size(); i < n; i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->field(i));
  }

  // repeated string mapkeys = 3;
  total_size += 1 *
      ::google::protobuf::internal::FromIntSize(this->mapkeys_size());
  for (int i = 0, n = this->mapkeys_size(); i < n; i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->mapkeys(i));
  }

  // string key = 1;
  if (this->key().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->key());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void command_hmmapdel::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:client.command_hmmapdel)
  GOOGLE_DCHECK_NE(&from, this);
  const command_hmmapdel* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const command_hmmapdel>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:client.command_hmmapdel)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:client.command_hmmapdel)
    MergeFrom(*source);
  }
}

void command_hmmapdel::MergeFrom(const command_hmmapdel& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:client.command_hmmapdel)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  field_.MergeFrom(from.field_);
  mapkeys_.MergeFrom(from.mapkeys_);
  if (from.key().size() > 0) {

    key_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.key_);
  }
}

void command_hmmapdel::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:client.command_hmmapdel)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void command_hmmapdel::CopyFrom(const command_hmmapdel& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:client.command_hmmapdel)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool command_hmmapdel::IsInitialized() const {
  return true;
}

void command_hmmapdel::Swap(command_hmmapdel* other) {
  if (other == this) return;
  InternalSwap(other);
}
void command_hmmapdel::InternalSwap(command_hmmapdel* other) {
  using std::swap;
  field_.InternalSwap(&other->field_);
  mapkeys_.InternalSwap(&other->mapkeys_);
  key_.Swap(&other->key_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata command_hmmapdel::GetMetadata() const {
  protobuf_message_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_message_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

command_mhmmapdel_ValuesEntry_DoNotUse::command_mhmmapdel_ValuesEntry_DoNotUse() {}
command_mhmmapdel_ValuesEntry_DoNotUse::command_mhmmapdel_ValuesEntry_DoNotUse(::google::protobuf::Arena* arena) : SuperType(arena) {}
void command_mhmmapdel_ValuesEntry_DoNotUse::MergeFrom(const command_mhmmapdel_ValuesEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::google::protobuf::Metadata command_mhmmapdel_ValuesEntry_DoNotUse::GetMetadata() const {
  ::protobuf_message_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_message_2eproto::file_level_metadata[100];
}
void command_mhmmapdel_ValuesEntry_DoNotUse::MergeFrom(
    const ::google::protobuf::Message& other) {
  ::google::protobuf::Message::MergeFrom(other);
}


// ===================================================================

void command_mhmmapdel::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int command_mhmmapdel::kFieldFieldNumber;
const int command_mhmmapdel::kValuesFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

command_mhmmapdel::command_mhmmapdel()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_message_2eproto::InitDefaultscommand_mhmmapdel();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:client.command_mhmmapdel)
}
command_mhmmapdel::command_mhmmapdel(const command_mhmmapdel& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      field_(from.field_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  values_.MergeFrom(from.values_);
  // @@protoc_insertion_point(copy_constructor:client.command_mhmmapdel)
}

void command_mhmmapdel::SharedCtor() {
  _cached_size_ = 0;
}

command_mhmmapdel::~command_mhmmapdel() {
  // @@protoc_insertion_point(destructor:client.command_mhmmapdel)
  SharedDtor();
}

void command_mhmmapdel::SharedDtor() {
}

void command_mhmmapdel::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* command_mhmmapdel::descriptor() {
  ::protobuf_message_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_message_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const command_mhmmapdel& command_mhmmapdel::default_instance() {
  ::protobuf_message_2eproto::InitDefaultscommand_mhmmapdel();
  return *internal_default_instance();
}

command_mhmmapdel* command_mhmmapdel::New(::google::protobuf::Arena* arena) const {
  command_mhmmapdel* n = new command_mhmmapdel;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void command_mhmmapdel::Clear() {
// @@protoc_insertion_point(message_clear_start:client.command_mhmmapdel)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  field_.Clear();
  values_.Clear();
  _internal_metadata_.Clear();
}

bool command_mhmmapdel::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:client.command_mhmmapdel)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated string field = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_field()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->field(this->field_size() - 1).data(),
            static_cast<int>(this->field(this->field_size() - 1).length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "client.command_mhmmapdel.field"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // map<string, .client.keys_type> values = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          command_mhmmapdel_ValuesEntry_DoNotUse::Parser< ::google::protobuf::internal::MapField<
              command_mhmmapdel_ValuesEntry_DoNotUse,
              ::std::string, ::client::keys_type,
              ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
              ::google::protobuf::internal::WireFormatLite::TYPE_MESSAGE,
              0 >,
            ::google::protobuf::Map< ::std::string, ::client::keys_type > > parser(&values_);
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
              input, &parser));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            parser.key().data(), static_cast<int>(parser.key().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "client.command_mhmmapdel.ValuesEntry.key"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:client.command_mhmmapdel)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:client.command_mhmmapdel)
  return false;
#undef DO_
}

void command_mhmmapdel::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:client.command_mhmmapdel)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated string field = 1;
  for (int i = 0, n = this->field_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->field(i).data(), static_cast<int>(this->field(i).length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "client.command_mhmmapdel.field");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->field(i), output);
  }

  // map<string, .client.keys_type> values = 2;
  if (!this->values().empty()) {
    typedef ::google::protobuf::Map< ::std::string, ::client::keys_type >::const_pointer
        ConstPtr;
    typedef ConstPtr SortItem;
    typedef ::google::protobuf::internal::CompareByDerefFirst<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
          p->first.data(), static_cast<int>(p->first.length()),
          ::google::protobuf::internal::WireFormatLite::SERIALIZE,
          "client.command_mhmmapdel.ValuesEntry.key");
      }
    };

    if (output->IsSerializationDeterministic() &&
        this->values().size() > 1) {
      ::google::protobuf::scoped_array<SortItem> items(
          new SortItem[this->values().size()]);
      typedef ::google::protobuf::Map< ::std::string, ::client::keys_type >::size_type size_type;
      size_type n = 0;
      for (::google::protobuf::Map< ::std::string, ::client::keys_type >::const_iterator
          it = this->values().begin();
          it != this->values().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      ::google::protobuf::scoped_ptr<command_mhmmapdel_ValuesEntry_DoNotUse> entry;
      for (size_type i = 0; i < n; i++) {
        entry.reset(values_.NewEntryWrapper(
            items[static_cast<ptrdiff_t>(i)]->first, items[static_cast<ptrdiff_t>(i)]->second));
        ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
            2, *entry, output);
        Utf8Check::Check(items[static_cast<ptrdiff_t>(i)]);
      }
    } else {
      ::google::protobuf::scoped_ptr<command_mhmmapdel_ValuesEntry_DoNotUse> entry;
      for (::google::protobuf::Map< ::std::string, ::client::keys_type >::const_iterator
          it = this->values().begin();
          it != this->values().end(); ++it) {
        entry.reset(values_.NewEntryWrapper(
            it->first, it->second));
        ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
            2, *entry, output);
        Utf8Check::Check(&*it);
      }
    }
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:client.command_mhmmapdel)
}

::google::protobuf::uint8* command_mhmmapdel::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:client.command_mhmmapdel)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated string field = 1;
  for (int i = 0, n = this->field_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->field(i).data(), static_cast<int>(this->field(i).length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "client.command_mhmmapdel.field");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(1, this->field(i), target);
  }

  // map<string, .client.keys_type> values = 2;
  if (!this->values().empty()) {
    typedef ::google::protobuf::Map< ::std::string, ::client::keys_type >::const_pointer
        ConstPtr;
    typedef ConstPtr SortItem;
    typedef ::google::protobuf::internal::CompareByDerefFirst<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
          p->first.data(), static_cast<int>(p->first.length()),
          ::google::protobuf::internal::WireFormatLite::SERIALIZE,
          "client.command_mhmmapdel.ValuesEntry.key");
      }
    };

    if (deterministic &&
        this->values().size() > 1) {
      ::google::protobuf::scoped_array<SortItem> items(
          new SortItem[this->values().size()]);
      typedef ::google::protobuf::Map< ::std::string, ::client::keys_type >::size_type size_type;
      size_type n = 0;
      for (::google::protobuf::Map< ::std::string, ::client::keys_type >::const_iterator
          it = this->values().begin();
          it != this->values().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      ::google::protobuf::scoped_ptr<command_mhmmapdel_ValuesEntry_DoNotUse> entry;
      for (size_type i = 0; i < n; i++) {
        entry.reset(values_.NewEntryWrapper(
            items[static_cast<ptrdiff_t>(i)]->first, items[static_cast<ptrdiff_t>(i)]->second));
        target = ::google::protobuf::internal::WireFormatLite::
                   InternalWriteMessageNoVirtualToArray(
                       2, *entry, deterministic, target);
;
        Utf8Check::Check(items[static_cast<ptrdiff_t>(i)]);
      }
    } else {
      ::google::protobuf::scoped_ptr<command_mhmmapdel_ValuesEntry_DoNotUse> entry;
      for (::google::protobuf::Map< ::std::string, ::client::keys_type >::const_iterator
          it = this->values().begin();
          it != this->values().end(); ++it) {
        entry.reset(values_.NewEntryWrapper(
            it->first, it->second));
        target = ::google::protobuf::internal::WireFormatLite::
                   InternalWriteMessageNoVirtualToArray(
                       2, *entry, deterministic, target);
;
        Utf8Check::Check(&*it);
      }
    }
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:client.command_mhmmapdel)
  return target;
}

size_t command_mhmmapdel::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:client.command_mhmmapdel)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // repeated string field = 1;
  total_size += 1 *
      ::google::protobuf::internal::FromIntSize(this->field_size());
  for (int i = 0, n = this->field_size(); i < n; i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->field(i));
  }

  // map<string, .client.keys_type> values = 2;
  total_size += 1 *
      ::google::protobuf::internal::FromIntSize(this->values_size());
  {
    ::google::protobuf::scoped_ptr<command_mhmmapdel_ValuesEntry_DoNotUse> entry;
    for (::google::protobuf::Map< ::std::string, ::client::keys_type >::const_iterator
        it = this->values().begin();
        it != this->values().end(); ++it) {
      entry.reset(values_.NewEntryWrapper(it->first, it->second));
      total_size += ::google::protobuf::internal::WireFormatLite::
          MessageSizeNoVirtual(*entry);
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void command_mhmmapdel::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:client.command_mhmmapdel)
  GOOGLE_DCHECK_NE(&from, this);
  const command_mhmmapdel* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const command_mhmmapdel>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:client.command_mhmmapdel)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:client.command_mhmmapdel)
    MergeFrom(*source);
  }
}

void command_mhmmapdel::MergeFrom(const command_mhmmapdel& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:client.command_mhmmapdel)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  field_.MergeFrom(from.field_);
  values_.MergeFrom(from.values_);
}

void command_mhmmapdel::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:client.command_mhmmapdel)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void command_mhmmapdel::CopyFrom(const command_mhmmapdel& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:client.command_mhmmapdel)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool command_mhmmapdel::IsInitialized() const {
  return true;
}

void command_mhmmapdel::Swap(command_mhmmapdel* other) {
  if (other == this) return;
  InternalSwap(other);
}
void command_mhmmapdel::InternalSwap(command_mhmmapdel* other) {
  using std::swap;
  field_.InternalSwap(&other->field_);
  values_.Swap(&other->values_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata command_mhmmapdel::GetMetadata() const {
  protobuf_message_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_message_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void command_meet::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int command_meet::kIpFieldNumber;
const int command_meet::kPortFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

command_meet::command_meet()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_message_2eproto::InitDefaultscommand_meet();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:client.command_meet)
}
command_meet::command_meet(const command_meet& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ip_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.ip().size() > 0) {
    ip_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.ip_);
  }
  port_ = from.port_;
  // @@protoc_insertion_point(copy_constructor:client.command_meet)
}

void command_meet::SharedCtor() {
  ip_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  port_ = GOOGLE_LONGLONG(0);
  _cached_size_ = 0;
}

command_meet::~command_meet() {
  // @@protoc_insertion_point(destructor:client.command_meet)
  SharedDtor();
}

void command_meet::SharedDtor() {
  ip_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void command_meet::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* command_meet::descriptor() {
  ::protobuf_message_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_message_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const command_meet& command_meet::default_instance() {
  ::protobuf_message_2eproto::InitDefaultscommand_meet();
  return *internal_default_instance();
}

command_meet* command_meet::New(::google::protobuf::Arena* arena) const {
  command_meet* n = new command_meet;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void command_meet::Clear() {
// @@protoc_insertion_point(message_clear_start:client.command_meet)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ip_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  port_ = GOOGLE_LONGLONG(0);
  _internal_metadata_.Clear();
}

bool command_meet::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:client.command_meet)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string ip = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_ip()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->ip().data(), static_cast<int>(this->ip().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "client.command_meet.ip"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int64 port = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &port_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:client.command_meet)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:client.command_meet)
  return false;
#undef DO_
}

void command_meet::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:client.command_meet)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string ip = 1;
  if (this->ip().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->ip().data(), static_cast<int>(this->ip().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "client.command_meet.ip");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->ip(), output);
  }

  // int64 port = 2;
  if (this->port() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->port(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:client.command_meet)
}

::google::protobuf::uint8* command_meet::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:client.command_meet)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string ip = 1;
  if (this->ip().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->ip().data(), static_cast<int>(this->ip().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "client.command_meet.ip");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->ip(), target);
  }

  // int64 port = 2;
  if (this->port() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->port(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:client.command_meet)
  return target;
}

size_t command_meet::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:client.command_meet)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // string ip = 1;
  if (this->ip().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->ip());
  }

  // int64 port = 2;
  if (this->port() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->port());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void command_meet::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:client.command_meet)
  GOOGLE_DCHECK_NE(&from, this);
  const command_meet* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const command_meet>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:client.command_meet)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:client.command_meet)
    MergeFrom(*source);
  }
}

void command_meet::MergeFrom(const command_meet& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:client.command_meet)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.ip().size() > 0) {

    ip_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.ip_);
  }
  if (from.port() != 0) {
    set_port(from.port());
  }
}

void command_meet::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:client.command_meet)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void command_meet::CopyFrom(const command_meet& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:client.command_meet)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool command_meet::IsInitialized() const {
  return true;
}

void command_meet::Swap(command_meet* other) {
  if (other == this) return;
  InternalSwap(other);
}
void command_meet::InternalSwap(command_meet* other) {
  using std::swap;
  ip_.Swap(&other->ip_);
  swap(port_, other->port_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata command_meet::GetMetadata() const {
  protobuf_message_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_message_2eproto::file_level_metadata[kIndexInFileMessages];
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace client

// @@protoc_insertion_point(global_scope)
