syntax="proto3";
package cluster;

// 消息发送者信息
message command_header{
    // 消息发送者的配置纪元
    int64 current_epoch = 1;

    // 如果消息发送者是一个主节点，那么这里记录的是消息发送者的配置纪元
    // 如果消息发送者是一个从节点，那么这里记录的是消息发送者正在复制的主节点的配置纪元
    int64 config_epoch = 2;

    // 节点的复制偏移量
    // 如果是 主节点 则为复制偏移量
    // 如果是从节点 则为已经处理的 复制偏移量
    int64 offset = 3;

    // 消息发送者的名字（ID）
    string sender_name = 4;

    // 如果消息发送者是一个从节点，那么这里记录的是消息发送者正在复制的主节点的名字
    // 如果消息发送者是一个主节点，那么这里记录的是 REDIS_NODE_NULL_NAME
    string slaveof_name = 5;

    // 消息发送者目前的槽指派信息
    repeated bool myslots = 6; // 16384

    // 消息发送者的端口号
    int32 port = 7;

    // 消息发送者的标识值
    int32 flags = 8;

    // 消息发送者所处集群的状态
    int32 state = 9;
}

message gossip{
    // 在刚开始的时候，节点的名字会是随机的
    // 当 MEET 信息发送并得到回复之后，集群就会为节点设置正式的名字
    string node_name = 1;
    // 最后一次向该节点发送 PING 消息的时间戳
    int32 ping_sent = 2;
    // 最后一次从该节点接收到 PONG 消息的时间戳
    int32 pong_received = 3;
    // 节点的 IP 地址
    string ip = 4;
    // 节点的端口号
    int32 port = 5;
    // 节点的标识值
    int32 flags = 6;
}

// ping, pong, meet
message command_gossip{
    // 发送者信息
    command_header header = 1;
    // 每条消息都包含两个 cluster_gossip
    repeated gossip gossips = 2;
}

// fail
message command_fail{
    // 发送者信息
    command_header header = 1;
    string node_name = 2;
}

message command_update{
    // 发送者信息
    command_header header = 1;
    int64 config_epoch = 2;
    string node_name = 3;
    repeated bool slots = 4;
}