syntax="proto3";
package protocol;

enum TYPE{
    UNKNOW = 0;

    NUMBER = 1; // 数值
    NUMBER_LIST = 2; // 数值列表

    STRING = 3; // 字符串
    STRING_LIST = 4; // 字符串列表

    MAP = 5; // map
}

message VALUE{
    TYPE type = 1;
    int64 number = 2;
    repeated int64 number_list = 3;
    string str = 4;
    repeated string str_list = 5;
    map<string, string> kvs = 6;
}

// 通用返回码
message command_reply{
    int32 errcode = 1;
    string errmsg = 2;
}

// 针对 value 为 number 或 str 的操作
message values_type{
    repeated VALUE value = 1;
}

message keys_type{
    repeated string value = 1;
}

// ==========================set============================
message command_set{
    string key = 1;
    VALUE value = 2;
}

message command_mset{
    map<string, VALUE> kvs = 1; // key 为主键
}

// =========================hset=============================
message command_hset{
    string key = 1;
    string field = 2;
    VALUE value = 3;
}

message command_hmset{
    string key = 1;
    map<string, VALUE> values = 2; // key 为 field
}

message command_mhmset{
    repeated string fields = 1;
    map<string, values_type> values = 2; // key 为主键
}

// ==========================get============================
message command_get{
    string key = 1;
}

message command_get_reply{
    command_reply state = 1;
    VALUE reply = 2;
}

message command_mget{
    repeated string keys = 1;
}

message command_mget_reply{
    command_reply state = 1;
    repeated VALUE reply = 2;
}

// =========================hget=============================
message command_hget{
    string key = 1;
    string field = 2;
}

message command_hget_reply{
    command_reply state = 1;
    VALUE reply = 2;
}

message command_hmget{
    string key = 1;
    repeated string fields = 2;
}

message command_hmget_reply{
    command_reply state = 1;
    repeated VALUE reply = 2;
}

message command_mhmget{
    repeated string keys = 1;
    repeated string fields = 2;
}

message command_mhmget_reply{
    command_reply state = 1;
    map<string, values_type> reply = 2; // key 是主键，
}

// =========================del=============================
message command_del{
    string key = 1;
}

message command_mdel{
    repeated string keys = 1;
}

// =========================hdel=============================
message command_hdel{
    string key = 1;
    string field = 2;
}

message command_hmdel{
    string key = 1;
    repeated string fields = 2;
}

message command_mhmdel{
    repeated string keys = 1;
    repeated string fields = 2;
}

// ========================= incr =============================
message command_incr{
    string key = 1;
    VALUE value = 2;
}

message command_mincr{
    map<string, VALUE> kvs = 1;
}

// ========================= hincr =============================
message command_hincr{
    string key = 1;
    string field = 2;
    VALUE value = 3;
}

message command_hmincr{
    string key = 1;
    map<string, VALUE> kvs = 2;
}

message command_mhmincr{
    repeated string fields = 1; // 不同 key 的相同 field
    map<string, values_type> kvs = 2; // key 为主键
}

// =========================lpush=============================
message command_lpush{
    string key = 1;
    VALUE value = 2;
    bool head = 3;
}

message command_mlpush{
    map<string, VALUE> kvs = 1;
    bool head = 2; // true 头插入，false 尾插入
}

// =========================hlpush=============================
message command_hlpush{
    string key = 1;
    string field = 2;
    VALUE value = 3;
}

message command_hmlpush{
    string key = 1;
    map<string, VALUE> kvs = 2; // field -> value
}

message command_mhmlpush{
    repeated string fields = 1;
    map<string, values_type> kvs = 2; // key 为主键
}

// =========================lrange=============================
message command_lrange{
    string key = 1;
    int32 start = 2; // 0 头部
    int32 stop = 3; // -1 尾部
}

message command_lrange_reply{
    command_reply state = 1;
    VALUE reply = 2;
}

message command_mlrange{
    repeated string keys = 1;
    int32 start = 2; // 0 头部
    int32 stop = 3; // -1 尾部
}

message command_mlrange_reply{
    command_reply state = 1;
    repeated VALUE reply = 2;
}

// =========================hlrange=============================
message command_hlrange{
    string key = 1;
    string field = 2;
    int32 start = 3; // 0 头部
    int32 stop = 4; // -1 尾部
}

message command_hlrange_reply{
    command_reply state = 1;
    VALUE value = 2;
}

message command_hmlrange{
    string key = 1;
    repeated string fields = 2;
    int32 start = 3; // 0 头部
    int32 stop = 4; // -1 尾部
}

message command_hmlrange_reply{
    command_reply state = 1;
    repeated VALUE reply = 2;
}

message command_mhmlrange{
    repeated string keys = 1;
    repeated string fields = 2;
}

message command_mhmlrange_reply{
    command_reply state = 1;
    repeated values_type values = 2;
}

// =========================lpop=============================
// 删除 list 头 或 尾部一个元素，并返回值
message command_lpop{
    string key = 1;
    bool head = 2; // true 头插入，false 尾插入
}

message command_lpop_reply{
    command_reply state = 1;
    VALUE reply = 2;
}

message command_mlpop{
    repeated string keys = 1;
    bool head = 2;
}

message command_mlpop_repy{
    command_reply state = 1;
    repeated VALUE reply = 2;
}

// =========================hlpop=============================
message command_hlpop{
    string key = 1;
    string field = 2;
}

message command_hlpop_reply{
    command_reply state = 1;
    VALUE reply = 2;
}

message command_hmlpop{
    string key = 1;
    repeated string fields = 2;
}

message command_hmlpop_reply{
    command_reply state = 1;
    repeated VALUE reply = 2;
}

message command_mhmlpop{
    repeated string keys = 1;
    repeated string fields = 2;
}

message command_mhmlpop_reply{
    command_reply state = 1;
    repeated values_type values = 2;
}

// =========================ltrim=============================
message command_ltrim{
    string key = 1;
    int32 start = 2;
    int32 stop = 3;
}

message command_mltrim{
    repeated string keys = 1;
    int32 start = 2;
    int32 stop = 3;
}

// =========================hltrim=============================
message command_hltrim{
    string key = 1;
    string filed = 2;
    int32 start = 3;
    int32 stop = 4;
}

message command_hmltrim{
    string key = 1;
    repeated string fileds = 2;
    int32 start = 3;
    int32 stop = 4;
}


message command_mhmltrim{
    repeated string keys = 1;
    repeated string fileds = 2;
    int32 start = 3;
    int32 stop = 4;
}

// =========================llen=============================
message command_llen{
    string key = 1;
}

message command_llen_reply{
    command_reply state = 1;
    VALUE reply = 2;
}

message command_mllen{
    repeated string keys = 1;
}

message command_mllen_reply{
    command_reply state = 1;
    repeated VALUE reply = 2;
}

// =========================hllen=============================
message command_hllen{
    string key = 1;
    string field = 2;
}

message command_hllen_reply{
    command_reply state = 1;
    VALUE reply = 2;
}

message command_hmllen{
    string key = 1;
    repeated string fields = 2;
}

message command_hmllen_reply{
    command_reply state = 1;
    repeated VALUE reply = 2;
}

message command_mhmllen{
    repeated string keys = 1;
    repeated string fields = 2;
}

message command_mhmllen_reply{
    command_reply state = 1;
    repeated values_type reply = 2;
}

// ========================map get==============================
message command_mapget{
    string key = 1;
}

message command_mapget_reply{
    command_reply state = 1;
    VALUE value = 2;
}

message command_mmapget{
    repeated string keys = 1;
}

message command_mmapget_reply{
    command_reply state = 1;
    repeated VALUE values = 2;
}

// ========================hmap get==============================
message command_hmapget{
    string key = 1;
    string field = 2;
}

message command_hmapget_reply{
    command_reply state = 1;
    VALUE values = 2;
}

message command_hmmapget{
    string key = 1;
    repeated string fields = 2;
}

message command_hmmapget_reply{
    command_reply state = 1;
    repeated VALUE values = 2;
}

message command_mhmmapget{
    repeated string keys = 1;
    repeated string fields = 2;
}

message command_mhmmapget_reply{
    command_reply state = 1;
    repeated values_type values = 2;
}

// ========================map set==============================
message command_mapset{
    string key = 1;
    VALUE value = 2;
}

message command_mmapset{
    map<string, VALUE> kvs = 1;
}

// ========================hmap set==============================
message command_hmapset{
    string key = 1;
    string field = 2;
    VALUE value = 3;
}

message command_hmmapset{
    string key = 1;
    map<string, VALUE> values = 2;
}

message command_mhmmapset{
    repeated string fields = 1;
    map<string, VALUE> values = 2; // key 为主键
}

// ========================map del==============================
message command_mapdel{
    string key = 1;
    repeated string mapkeys = 2; // VALUE 中 map 结构的 key
}

message command_mmapdel{
    repeated string keys = 1;
    repeated string mapkeys = 2; // VALUE 中 map 结构的 key
}

// ========================hmap del==============================
message command_hmapdel{
    string key = 1;
    string field = 2;
    repeated string mapkeys = 3; // VALUE 中 map 结构的 key
}

message command_hmmapdel{
    string key = 1;
    repeated string field = 2;
    repeated string mapkeys = 3; // VALUE 中 map 结构的 key
}

message command_mhmmapdel{
    repeated string field = 1;
    map<string, keys_type> values = 2;
}

// ========================cluster meet==============================
message command_cluster_meet{
    string ip = 1;
    int port = 2;
}