// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: cluster_message.proto

#include "cluster_message.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// This is a temporary google only hack
#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
#include "third_party/protobuf/version.h"
#endif
// @@protoc_insertion_point(includes)
namespace protocol {
class cluster_headerDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<cluster_header>
      _instance;
} _cluster_header_default_instance_;
class cluster_gossipDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<cluster_gossip>
      _instance;
} _cluster_gossip_default_instance_;
class cluster_command_gossipDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<cluster_command_gossip>
      _instance;
} _cluster_command_gossip_default_instance_;
class cluster_command_failDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<cluster_command_fail>
      _instance;
} _cluster_command_fail_default_instance_;
class cluster_command_updateDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<cluster_command_update>
      _instance;
} _cluster_command_update_default_instance_;
}  // namespace protocol
namespace protobuf_cluster_5fmessage_2eproto {
void InitDefaultscluster_headerImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  {
    void* ptr = &::protocol::_cluster_header_default_instance_;
    new (ptr) ::protocol::cluster_header();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::protocol::cluster_header::InitAsDefaultInstance();
}

void InitDefaultscluster_header() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultscluster_headerImpl);
}

void InitDefaultscluster_gossipImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  {
    void* ptr = &::protocol::_cluster_gossip_default_instance_;
    new (ptr) ::protocol::cluster_gossip();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::protocol::cluster_gossip::InitAsDefaultInstance();
}

void InitDefaultscluster_gossip() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultscluster_gossipImpl);
}

void InitDefaultscluster_command_gossipImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  protobuf_cluster_5fmessage_2eproto::InitDefaultscluster_header();
  protobuf_cluster_5fmessage_2eproto::InitDefaultscluster_gossip();
  {
    void* ptr = &::protocol::_cluster_command_gossip_default_instance_;
    new (ptr) ::protocol::cluster_command_gossip();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::protocol::cluster_command_gossip::InitAsDefaultInstance();
}

void InitDefaultscluster_command_gossip() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultscluster_command_gossipImpl);
}

void InitDefaultscluster_command_failImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  protobuf_cluster_5fmessage_2eproto::InitDefaultscluster_header();
  {
    void* ptr = &::protocol::_cluster_command_fail_default_instance_;
    new (ptr) ::protocol::cluster_command_fail();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::protocol::cluster_command_fail::InitAsDefaultInstance();
}

void InitDefaultscluster_command_fail() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultscluster_command_failImpl);
}

void InitDefaultscluster_command_updateImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  protobuf_cluster_5fmessage_2eproto::InitDefaultscluster_header();
  {
    void* ptr = &::protocol::_cluster_command_update_default_instance_;
    new (ptr) ::protocol::cluster_command_update();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::protocol::cluster_command_update::InitAsDefaultInstance();
}

void InitDefaultscluster_command_update() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultscluster_command_updateImpl);
}

::google::protobuf::Metadata file_level_metadata[5];

const ::google::protobuf::uint32 TableStruct::offsets[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::protocol::cluster_header, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::protocol::cluster_header, current_epoch_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::protocol::cluster_header, config_epoch_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::protocol::cluster_header, offset_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::protocol::cluster_header, sender_name_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::protocol::cluster_header, slaveof_name_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::protocol::cluster_header, myslots_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::protocol::cluster_header, port_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::protocol::cluster_header, flags_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::protocol::cluster_header, state_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::protocol::cluster_gossip, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::protocol::cluster_gossip, node_name_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::protocol::cluster_gossip, ping_sent_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::protocol::cluster_gossip, pong_received_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::protocol::cluster_gossip, ip_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::protocol::cluster_gossip, port_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::protocol::cluster_gossip, flags_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::protocol::cluster_command_gossip, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::protocol::cluster_command_gossip, header_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::protocol::cluster_command_gossip, gossips_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::protocol::cluster_command_fail, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::protocol::cluster_command_fail, header_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::protocol::cluster_command_fail, node_name_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::protocol::cluster_command_update, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::protocol::cluster_command_update, header_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::protocol::cluster_command_update, config_epoch_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::protocol::cluster_command_update, node_name_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::protocol::cluster_command_update, slots_),
};
static const ::google::protobuf::internal::MigrationSchema schemas[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::protocol::cluster_header)},
  { 14, -1, sizeof(::protocol::cluster_gossip)},
  { 25, -1, sizeof(::protocol::cluster_command_gossip)},
  { 32, -1, sizeof(::protocol::cluster_command_fail)},
  { 39, -1, sizeof(::protocol::cluster_command_update)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&::protocol::_cluster_header_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::protocol::_cluster_gossip_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::protocol::_cluster_command_gossip_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::protocol::_cluster_command_fail_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::protocol::_cluster_command_update_default_instance_),
};

void protobuf_AssignDescriptors() {
  AddDescriptors();
  ::google::protobuf::MessageFactory* factory = NULL;
  AssignDescriptors(
      "cluster_message.proto", schemas, file_default_instances, TableStruct::offsets, factory,
      file_level_metadata, NULL, NULL);
}

void protobuf_AssignDescriptorsOnce() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_PROTOBUF_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 5);
}

void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
      "\n\025cluster_message.proto\022\010protocol\"\265\001\n\016cl"
      "uster_header\022\025\n\rcurrent_epoch\030\001 \001(\003\022\024\n\014c"
      "onfig_epoch\030\002 \001(\003\022\016\n\006offset\030\003 \001(\003\022\023\n\013sen"
      "der_name\030\004 \001(\t\022\024\n\014slaveof_name\030\005 \001(\t\022\017\n\007"
      "myslots\030\006 \003(\010\022\014\n\004port\030\007 \001(\005\022\r\n\005flags\030\010 \001"
      "(\005\022\r\n\005state\030\t \001(\005\"v\n\016cluster_gossip\022\021\n\tn"
      "ode_name\030\001 \001(\t\022\021\n\tping_sent\030\002 \001(\005\022\025\n\rpon"
      "g_received\030\003 \001(\005\022\n\n\002ip\030\004 \001(\t\022\014\n\004port\030\005 \001"
      "(\005\022\r\n\005flags\030\006 \001(\005\"m\n\026cluster_command_gos"
      "sip\022(\n\006header\030\001 \001(\0132\030.protocol.cluster_h"
      "eader\022)\n\007gossips\030\002 \003(\0132\030.protocol.cluste"
      "r_gossip\"S\n\024cluster_command_fail\022(\n\006head"
      "er\030\001 \001(\0132\030.protocol.cluster_header\022\021\n\tno"
      "de_name\030\002 \001(\t\"z\n\026cluster_command_update\022"
      "(\n\006header\030\001 \001(\0132\030.protocol.cluster_heade"
      "r\022\024\n\014config_epoch\030\002 \001(\003\022\021\n\tnode_name\030\003 \001"
      "(\t\022\r\n\005slots\030\004 \003(\010b\006proto3"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 665);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "cluster_message.proto", &protobuf_RegisterTypes);
}

void AddDescriptors() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at dynamic initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;
}  // namespace protobuf_cluster_5fmessage_2eproto
namespace protocol {

// ===================================================================

void cluster_header::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int cluster_header::kCurrentEpochFieldNumber;
const int cluster_header::kConfigEpochFieldNumber;
const int cluster_header::kOffsetFieldNumber;
const int cluster_header::kSenderNameFieldNumber;
const int cluster_header::kSlaveofNameFieldNumber;
const int cluster_header::kMyslotsFieldNumber;
const int cluster_header::kPortFieldNumber;
const int cluster_header::kFlagsFieldNumber;
const int cluster_header::kStateFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

cluster_header::cluster_header()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_cluster_5fmessage_2eproto::InitDefaultscluster_header();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:protocol.cluster_header)
}
cluster_header::cluster_header(const cluster_header& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      myslots_(from.myslots_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  sender_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.sender_name().size() > 0) {
    sender_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.sender_name_);
  }
  slaveof_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.slaveof_name().size() > 0) {
    slaveof_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.slaveof_name_);
  }
  ::memcpy(&current_epoch_, &from.current_epoch_,
    static_cast<size_t>(reinterpret_cast<char*>(&state_) -
    reinterpret_cast<char*>(&current_epoch_)) + sizeof(state_));
  // @@protoc_insertion_point(copy_constructor:protocol.cluster_header)
}

void cluster_header::SharedCtor() {
  sender_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  slaveof_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&current_epoch_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&state_) -
      reinterpret_cast<char*>(&current_epoch_)) + sizeof(state_));
  _cached_size_ = 0;
}

cluster_header::~cluster_header() {
  // @@protoc_insertion_point(destructor:protocol.cluster_header)
  SharedDtor();
}

void cluster_header::SharedDtor() {
  sender_name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  slaveof_name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void cluster_header::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* cluster_header::descriptor() {
  ::protobuf_cluster_5fmessage_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_cluster_5fmessage_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const cluster_header& cluster_header::default_instance() {
  ::protobuf_cluster_5fmessage_2eproto::InitDefaultscluster_header();
  return *internal_default_instance();
}

cluster_header* cluster_header::New(::google::protobuf::Arena* arena) const {
  cluster_header* n = new cluster_header;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void cluster_header::Clear() {
// @@protoc_insertion_point(message_clear_start:protocol.cluster_header)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  myslots_.Clear();
  sender_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  slaveof_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&current_epoch_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&state_) -
      reinterpret_cast<char*>(&current_epoch_)) + sizeof(state_));
  _internal_metadata_.Clear();
}

bool cluster_header::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:protocol.cluster_header)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int64 current_epoch = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &current_epoch_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int64 config_epoch = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &config_epoch_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int64 offset = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &offset_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string sender_name = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_sender_name()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->sender_name().data(), static_cast<int>(this->sender_name().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "protocol.cluster_header.sender_name"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string slaveof_name = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u /* 42 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_slaveof_name()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->slaveof_name().data(), static_cast<int>(this->slaveof_name().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "protocol.cluster_header.slaveof_name"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated bool myslots = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(50u /* 50 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, this->mutable_myslots())));
        } else if (
            static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u /* 48 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 1, 50u, input, this->mutable_myslots())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 port = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(56u /* 56 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &port_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 flags = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(64u /* 64 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &flags_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 state = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(72u /* 72 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &state_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:protocol.cluster_header)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:protocol.cluster_header)
  return false;
#undef DO_
}

void cluster_header::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:protocol.cluster_header)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 current_epoch = 1;
  if (this->current_epoch() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->current_epoch(), output);
  }

  // int64 config_epoch = 2;
  if (this->config_epoch() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->config_epoch(), output);
  }

  // int64 offset = 3;
  if (this->offset() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(3, this->offset(), output);
  }

  // string sender_name = 4;
  if (this->sender_name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->sender_name().data(), static_cast<int>(this->sender_name().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "protocol.cluster_header.sender_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->sender_name(), output);
  }

  // string slaveof_name = 5;
  if (this->slaveof_name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->slaveof_name().data(), static_cast<int>(this->slaveof_name().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "protocol.cluster_header.slaveof_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->slaveof_name(), output);
  }

  // repeated bool myslots = 6;
  if (this->myslots_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(6, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(static_cast< ::google::protobuf::uint32>(
        _myslots_cached_byte_size_));
    ::google::protobuf::internal::WireFormatLite::WriteBoolArray(
      this->myslots().data(), this->myslots_size(), output);
  }

  // int32 port = 7;
  if (this->port() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->port(), output);
  }

  // int32 flags = 8;
  if (this->flags() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->flags(), output);
  }

  // int32 state = 9;
  if (this->state() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(9, this->state(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:protocol.cluster_header)
}

::google::protobuf::uint8* cluster_header::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:protocol.cluster_header)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 current_epoch = 1;
  if (this->current_epoch() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->current_epoch(), target);
  }

  // int64 config_epoch = 2;
  if (this->config_epoch() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->config_epoch(), target);
  }

  // int64 offset = 3;
  if (this->offset() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(3, this->offset(), target);
  }

  // string sender_name = 4;
  if (this->sender_name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->sender_name().data(), static_cast<int>(this->sender_name().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "protocol.cluster_header.sender_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->sender_name(), target);
  }

  // string slaveof_name = 5;
  if (this->slaveof_name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->slaveof_name().data(), static_cast<int>(this->slaveof_name().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "protocol.cluster_header.slaveof_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->slaveof_name(), target);
  }

  // repeated bool myslots = 6;
  if (this->myslots_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      6,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
        static_cast< ::google::protobuf::int32>(
            _myslots_cached_byte_size_), target);
    target = ::google::protobuf::internal::WireFormatLite::
      WriteBoolNoTagToArray(this->myslots_, target);
  }

  // int32 port = 7;
  if (this->port() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->port(), target);
  }

  // int32 flags = 8;
  if (this->flags() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(8, this->flags(), target);
  }

  // int32 state = 9;
  if (this->state() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(9, this->state(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:protocol.cluster_header)
  return target;
}

size_t cluster_header::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:protocol.cluster_header)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // repeated bool myslots = 6;
  {
    unsigned int count = static_cast<unsigned int>(this->myslots_size());
    size_t data_size = 1UL * count;
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
            static_cast< ::google::protobuf::int32>(data_size));
    }
    int cached_size = ::google::protobuf::internal::ToCachedSize(data_size);
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _myslots_cached_byte_size_ = cached_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  // string sender_name = 4;
  if (this->sender_name().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->sender_name());
  }

  // string slaveof_name = 5;
  if (this->slaveof_name().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->slaveof_name());
  }

  // int64 current_epoch = 1;
  if (this->current_epoch() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->current_epoch());
  }

  // int64 config_epoch = 2;
  if (this->config_epoch() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->config_epoch());
  }

  // int64 offset = 3;
  if (this->offset() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->offset());
  }

  // int32 port = 7;
  if (this->port() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->port());
  }

  // int32 flags = 8;
  if (this->flags() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->flags());
  }

  // int32 state = 9;
  if (this->state() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->state());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void cluster_header::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:protocol.cluster_header)
  GOOGLE_DCHECK_NE(&from, this);
  const cluster_header* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const cluster_header>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:protocol.cluster_header)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:protocol.cluster_header)
    MergeFrom(*source);
  }
}

void cluster_header::MergeFrom(const cluster_header& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:protocol.cluster_header)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  myslots_.MergeFrom(from.myslots_);
  if (from.sender_name().size() > 0) {

    sender_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.sender_name_);
  }
  if (from.slaveof_name().size() > 0) {

    slaveof_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.slaveof_name_);
  }
  if (from.current_epoch() != 0) {
    set_current_epoch(from.current_epoch());
  }
  if (from.config_epoch() != 0) {
    set_config_epoch(from.config_epoch());
  }
  if (from.offset() != 0) {
    set_offset(from.offset());
  }
  if (from.port() != 0) {
    set_port(from.port());
  }
  if (from.flags() != 0) {
    set_flags(from.flags());
  }
  if (from.state() != 0) {
    set_state(from.state());
  }
}

void cluster_header::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:protocol.cluster_header)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void cluster_header::CopyFrom(const cluster_header& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:protocol.cluster_header)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool cluster_header::IsInitialized() const {
  return true;
}

void cluster_header::Swap(cluster_header* other) {
  if (other == this) return;
  InternalSwap(other);
}
void cluster_header::InternalSwap(cluster_header* other) {
  using std::swap;
  myslots_.InternalSwap(&other->myslots_);
  sender_name_.Swap(&other->sender_name_);
  slaveof_name_.Swap(&other->slaveof_name_);
  swap(current_epoch_, other->current_epoch_);
  swap(config_epoch_, other->config_epoch_);
  swap(offset_, other->offset_);
  swap(port_, other->port_);
  swap(flags_, other->flags_);
  swap(state_, other->state_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata cluster_header::GetMetadata() const {
  protobuf_cluster_5fmessage_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_cluster_5fmessage_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void cluster_gossip::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int cluster_gossip::kNodeNameFieldNumber;
const int cluster_gossip::kPingSentFieldNumber;
const int cluster_gossip::kPongReceivedFieldNumber;
const int cluster_gossip::kIpFieldNumber;
const int cluster_gossip::kPortFieldNumber;
const int cluster_gossip::kFlagsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

cluster_gossip::cluster_gossip()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_cluster_5fmessage_2eproto::InitDefaultscluster_gossip();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:protocol.cluster_gossip)
}
cluster_gossip::cluster_gossip(const cluster_gossip& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  node_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.node_name().size() > 0) {
    node_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.node_name_);
  }
  ip_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.ip().size() > 0) {
    ip_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.ip_);
  }
  ::memcpy(&ping_sent_, &from.ping_sent_,
    static_cast<size_t>(reinterpret_cast<char*>(&flags_) -
    reinterpret_cast<char*>(&ping_sent_)) + sizeof(flags_));
  // @@protoc_insertion_point(copy_constructor:protocol.cluster_gossip)
}

void cluster_gossip::SharedCtor() {
  node_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ip_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&ping_sent_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&flags_) -
      reinterpret_cast<char*>(&ping_sent_)) + sizeof(flags_));
  _cached_size_ = 0;
}

cluster_gossip::~cluster_gossip() {
  // @@protoc_insertion_point(destructor:protocol.cluster_gossip)
  SharedDtor();
}

void cluster_gossip::SharedDtor() {
  node_name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ip_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void cluster_gossip::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* cluster_gossip::descriptor() {
  ::protobuf_cluster_5fmessage_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_cluster_5fmessage_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const cluster_gossip& cluster_gossip::default_instance() {
  ::protobuf_cluster_5fmessage_2eproto::InitDefaultscluster_gossip();
  return *internal_default_instance();
}

cluster_gossip* cluster_gossip::New(::google::protobuf::Arena* arena) const {
  cluster_gossip* n = new cluster_gossip;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void cluster_gossip::Clear() {
// @@protoc_insertion_point(message_clear_start:protocol.cluster_gossip)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  node_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ip_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&ping_sent_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&flags_) -
      reinterpret_cast<char*>(&ping_sent_)) + sizeof(flags_));
  _internal_metadata_.Clear();
}

bool cluster_gossip::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:protocol.cluster_gossip)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string node_name = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_node_name()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->node_name().data(), static_cast<int>(this->node_name().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "protocol.cluster_gossip.node_name"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 ping_sent = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ping_sent_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 pong_received = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &pong_received_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string ip = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_ip()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->ip().data(), static_cast<int>(this->ip().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "protocol.cluster_gossip.ip"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 port = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u /* 40 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &port_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 flags = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u /* 48 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &flags_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:protocol.cluster_gossip)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:protocol.cluster_gossip)
  return false;
#undef DO_
}

void cluster_gossip::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:protocol.cluster_gossip)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string node_name = 1;
  if (this->node_name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->node_name().data(), static_cast<int>(this->node_name().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "protocol.cluster_gossip.node_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->node_name(), output);
  }

  // int32 ping_sent = 2;
  if (this->ping_sent() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->ping_sent(), output);
  }

  // int32 pong_received = 3;
  if (this->pong_received() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->pong_received(), output);
  }

  // string ip = 4;
  if (this->ip().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->ip().data(), static_cast<int>(this->ip().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "protocol.cluster_gossip.ip");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->ip(), output);
  }

  // int32 port = 5;
  if (this->port() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->port(), output);
  }

  // int32 flags = 6;
  if (this->flags() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->flags(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:protocol.cluster_gossip)
}

::google::protobuf::uint8* cluster_gossip::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:protocol.cluster_gossip)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string node_name = 1;
  if (this->node_name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->node_name().data(), static_cast<int>(this->node_name().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "protocol.cluster_gossip.node_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->node_name(), target);
  }

  // int32 ping_sent = 2;
  if (this->ping_sent() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->ping_sent(), target);
  }

  // int32 pong_received = 3;
  if (this->pong_received() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->pong_received(), target);
  }

  // string ip = 4;
  if (this->ip().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->ip().data(), static_cast<int>(this->ip().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "protocol.cluster_gossip.ip");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->ip(), target);
  }

  // int32 port = 5;
  if (this->port() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->port(), target);
  }

  // int32 flags = 6;
  if (this->flags() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->flags(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:protocol.cluster_gossip)
  return target;
}

size_t cluster_gossip::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:protocol.cluster_gossip)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // string node_name = 1;
  if (this->node_name().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->node_name());
  }

  // string ip = 4;
  if (this->ip().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->ip());
  }

  // int32 ping_sent = 2;
  if (this->ping_sent() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->ping_sent());
  }

  // int32 pong_received = 3;
  if (this->pong_received() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->pong_received());
  }

  // int32 port = 5;
  if (this->port() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->port());
  }

  // int32 flags = 6;
  if (this->flags() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->flags());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void cluster_gossip::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:protocol.cluster_gossip)
  GOOGLE_DCHECK_NE(&from, this);
  const cluster_gossip* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const cluster_gossip>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:protocol.cluster_gossip)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:protocol.cluster_gossip)
    MergeFrom(*source);
  }
}

void cluster_gossip::MergeFrom(const cluster_gossip& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:protocol.cluster_gossip)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.node_name().size() > 0) {

    node_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.node_name_);
  }
  if (from.ip().size() > 0) {

    ip_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.ip_);
  }
  if (from.ping_sent() != 0) {
    set_ping_sent(from.ping_sent());
  }
  if (from.pong_received() != 0) {
    set_pong_received(from.pong_received());
  }
  if (from.port() != 0) {
    set_port(from.port());
  }
  if (from.flags() != 0) {
    set_flags(from.flags());
  }
}

void cluster_gossip::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:protocol.cluster_gossip)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void cluster_gossip::CopyFrom(const cluster_gossip& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:protocol.cluster_gossip)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool cluster_gossip::IsInitialized() const {
  return true;
}

void cluster_gossip::Swap(cluster_gossip* other) {
  if (other == this) return;
  InternalSwap(other);
}
void cluster_gossip::InternalSwap(cluster_gossip* other) {
  using std::swap;
  node_name_.Swap(&other->node_name_);
  ip_.Swap(&other->ip_);
  swap(ping_sent_, other->ping_sent_);
  swap(pong_received_, other->pong_received_);
  swap(port_, other->port_);
  swap(flags_, other->flags_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata cluster_gossip::GetMetadata() const {
  protobuf_cluster_5fmessage_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_cluster_5fmessage_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void cluster_command_gossip::InitAsDefaultInstance() {
  ::protocol::_cluster_command_gossip_default_instance_._instance.get_mutable()->header_ = const_cast< ::protocol::cluster_header*>(
      ::protocol::cluster_header::internal_default_instance());
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int cluster_command_gossip::kHeaderFieldNumber;
const int cluster_command_gossip::kGossipsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

cluster_command_gossip::cluster_command_gossip()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_cluster_5fmessage_2eproto::InitDefaultscluster_command_gossip();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:protocol.cluster_command_gossip)
}
cluster_command_gossip::cluster_command_gossip(const cluster_command_gossip& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      gossips_(from.gossips_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_header()) {
    header_ = new ::protocol::cluster_header(*from.header_);
  } else {
    header_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:protocol.cluster_command_gossip)
}

void cluster_command_gossip::SharedCtor() {
  header_ = NULL;
  _cached_size_ = 0;
}

cluster_command_gossip::~cluster_command_gossip() {
  // @@protoc_insertion_point(destructor:protocol.cluster_command_gossip)
  SharedDtor();
}

void cluster_command_gossip::SharedDtor() {
  if (this != internal_default_instance()) delete header_;
}

void cluster_command_gossip::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* cluster_command_gossip::descriptor() {
  ::protobuf_cluster_5fmessage_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_cluster_5fmessage_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const cluster_command_gossip& cluster_command_gossip::default_instance() {
  ::protobuf_cluster_5fmessage_2eproto::InitDefaultscluster_command_gossip();
  return *internal_default_instance();
}

cluster_command_gossip* cluster_command_gossip::New(::google::protobuf::Arena* arena) const {
  cluster_command_gossip* n = new cluster_command_gossip;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void cluster_command_gossip::Clear() {
// @@protoc_insertion_point(message_clear_start:protocol.cluster_command_gossip)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  gossips_.Clear();
  if (GetArenaNoVirtual() == NULL && header_ != NULL) {
    delete header_;
  }
  header_ = NULL;
  _internal_metadata_.Clear();
}

bool cluster_command_gossip::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:protocol.cluster_command_gossip)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .protocol.cluster_header header = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_header()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .protocol.cluster_gossip gossips = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(input, add_gossips()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:protocol.cluster_command_gossip)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:protocol.cluster_command_gossip)
  return false;
#undef DO_
}

void cluster_command_gossip::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:protocol.cluster_command_gossip)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .protocol.cluster_header header = 1;
  if (this->has_header()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->header_, output);
  }

  // repeated .protocol.cluster_gossip gossips = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->gossips_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->gossips(static_cast<int>(i)), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:protocol.cluster_command_gossip)
}

::google::protobuf::uint8* cluster_command_gossip::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:protocol.cluster_command_gossip)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .protocol.cluster_header header = 1;
  if (this->has_header()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, *this->header_, deterministic, target);
  }

  // repeated .protocol.cluster_gossip gossips = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->gossips_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, this->gossips(static_cast<int>(i)), deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:protocol.cluster_command_gossip)
  return target;
}

size_t cluster_command_gossip::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:protocol.cluster_command_gossip)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // repeated .protocol.cluster_gossip gossips = 2;
  {
    unsigned int count = static_cast<unsigned int>(this->gossips_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->gossips(static_cast<int>(i)));
    }
  }

  // .protocol.cluster_header header = 1;
  if (this->has_header()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->header_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void cluster_command_gossip::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:protocol.cluster_command_gossip)
  GOOGLE_DCHECK_NE(&from, this);
  const cluster_command_gossip* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const cluster_command_gossip>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:protocol.cluster_command_gossip)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:protocol.cluster_command_gossip)
    MergeFrom(*source);
  }
}

void cluster_command_gossip::MergeFrom(const cluster_command_gossip& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:protocol.cluster_command_gossip)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  gossips_.MergeFrom(from.gossips_);
  if (from.has_header()) {
    mutable_header()->::protocol::cluster_header::MergeFrom(from.header());
  }
}

void cluster_command_gossip::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:protocol.cluster_command_gossip)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void cluster_command_gossip::CopyFrom(const cluster_command_gossip& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:protocol.cluster_command_gossip)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool cluster_command_gossip::IsInitialized() const {
  return true;
}

void cluster_command_gossip::Swap(cluster_command_gossip* other) {
  if (other == this) return;
  InternalSwap(other);
}
void cluster_command_gossip::InternalSwap(cluster_command_gossip* other) {
  using std::swap;
  gossips_.InternalSwap(&other->gossips_);
  swap(header_, other->header_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata cluster_command_gossip::GetMetadata() const {
  protobuf_cluster_5fmessage_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_cluster_5fmessage_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void cluster_command_fail::InitAsDefaultInstance() {
  ::protocol::_cluster_command_fail_default_instance_._instance.get_mutable()->header_ = const_cast< ::protocol::cluster_header*>(
      ::protocol::cluster_header::internal_default_instance());
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int cluster_command_fail::kHeaderFieldNumber;
const int cluster_command_fail::kNodeNameFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

cluster_command_fail::cluster_command_fail()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_cluster_5fmessage_2eproto::InitDefaultscluster_command_fail();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:protocol.cluster_command_fail)
}
cluster_command_fail::cluster_command_fail(const cluster_command_fail& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  node_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.node_name().size() > 0) {
    node_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.node_name_);
  }
  if (from.has_header()) {
    header_ = new ::protocol::cluster_header(*from.header_);
  } else {
    header_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:protocol.cluster_command_fail)
}

void cluster_command_fail::SharedCtor() {
  node_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  header_ = NULL;
  _cached_size_ = 0;
}

cluster_command_fail::~cluster_command_fail() {
  // @@protoc_insertion_point(destructor:protocol.cluster_command_fail)
  SharedDtor();
}

void cluster_command_fail::SharedDtor() {
  node_name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete header_;
}

void cluster_command_fail::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* cluster_command_fail::descriptor() {
  ::protobuf_cluster_5fmessage_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_cluster_5fmessage_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const cluster_command_fail& cluster_command_fail::default_instance() {
  ::protobuf_cluster_5fmessage_2eproto::InitDefaultscluster_command_fail();
  return *internal_default_instance();
}

cluster_command_fail* cluster_command_fail::New(::google::protobuf::Arena* arena) const {
  cluster_command_fail* n = new cluster_command_fail;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void cluster_command_fail::Clear() {
// @@protoc_insertion_point(message_clear_start:protocol.cluster_command_fail)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  node_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == NULL && header_ != NULL) {
    delete header_;
  }
  header_ = NULL;
  _internal_metadata_.Clear();
}

bool cluster_command_fail::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:protocol.cluster_command_fail)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .protocol.cluster_header header = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_header()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string node_name = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_node_name()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->node_name().data(), static_cast<int>(this->node_name().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "protocol.cluster_command_fail.node_name"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:protocol.cluster_command_fail)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:protocol.cluster_command_fail)
  return false;
#undef DO_
}

void cluster_command_fail::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:protocol.cluster_command_fail)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .protocol.cluster_header header = 1;
  if (this->has_header()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->header_, output);
  }

  // string node_name = 2;
  if (this->node_name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->node_name().data(), static_cast<int>(this->node_name().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "protocol.cluster_command_fail.node_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->node_name(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:protocol.cluster_command_fail)
}

::google::protobuf::uint8* cluster_command_fail::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:protocol.cluster_command_fail)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .protocol.cluster_header header = 1;
  if (this->has_header()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, *this->header_, deterministic, target);
  }

  // string node_name = 2;
  if (this->node_name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->node_name().data(), static_cast<int>(this->node_name().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "protocol.cluster_command_fail.node_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->node_name(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:protocol.cluster_command_fail)
  return target;
}

size_t cluster_command_fail::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:protocol.cluster_command_fail)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // string node_name = 2;
  if (this->node_name().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->node_name());
  }

  // .protocol.cluster_header header = 1;
  if (this->has_header()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->header_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void cluster_command_fail::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:protocol.cluster_command_fail)
  GOOGLE_DCHECK_NE(&from, this);
  const cluster_command_fail* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const cluster_command_fail>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:protocol.cluster_command_fail)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:protocol.cluster_command_fail)
    MergeFrom(*source);
  }
}

void cluster_command_fail::MergeFrom(const cluster_command_fail& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:protocol.cluster_command_fail)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.node_name().size() > 0) {

    node_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.node_name_);
  }
  if (from.has_header()) {
    mutable_header()->::protocol::cluster_header::MergeFrom(from.header());
  }
}

void cluster_command_fail::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:protocol.cluster_command_fail)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void cluster_command_fail::CopyFrom(const cluster_command_fail& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:protocol.cluster_command_fail)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool cluster_command_fail::IsInitialized() const {
  return true;
}

void cluster_command_fail::Swap(cluster_command_fail* other) {
  if (other == this) return;
  InternalSwap(other);
}
void cluster_command_fail::InternalSwap(cluster_command_fail* other) {
  using std::swap;
  node_name_.Swap(&other->node_name_);
  swap(header_, other->header_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata cluster_command_fail::GetMetadata() const {
  protobuf_cluster_5fmessage_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_cluster_5fmessage_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void cluster_command_update::InitAsDefaultInstance() {
  ::protocol::_cluster_command_update_default_instance_._instance.get_mutable()->header_ = const_cast< ::protocol::cluster_header*>(
      ::protocol::cluster_header::internal_default_instance());
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int cluster_command_update::kHeaderFieldNumber;
const int cluster_command_update::kConfigEpochFieldNumber;
const int cluster_command_update::kNodeNameFieldNumber;
const int cluster_command_update::kSlotsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

cluster_command_update::cluster_command_update()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_cluster_5fmessage_2eproto::InitDefaultscluster_command_update();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:protocol.cluster_command_update)
}
cluster_command_update::cluster_command_update(const cluster_command_update& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      slots_(from.slots_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  node_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.node_name().size() > 0) {
    node_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.node_name_);
  }
  if (from.has_header()) {
    header_ = new ::protocol::cluster_header(*from.header_);
  } else {
    header_ = NULL;
  }
  config_epoch_ = from.config_epoch_;
  // @@protoc_insertion_point(copy_constructor:protocol.cluster_command_update)
}

void cluster_command_update::SharedCtor() {
  node_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&header_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&config_epoch_) -
      reinterpret_cast<char*>(&header_)) + sizeof(config_epoch_));
  _cached_size_ = 0;
}

cluster_command_update::~cluster_command_update() {
  // @@protoc_insertion_point(destructor:protocol.cluster_command_update)
  SharedDtor();
}

void cluster_command_update::SharedDtor() {
  node_name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete header_;
}

void cluster_command_update::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* cluster_command_update::descriptor() {
  ::protobuf_cluster_5fmessage_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_cluster_5fmessage_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const cluster_command_update& cluster_command_update::default_instance() {
  ::protobuf_cluster_5fmessage_2eproto::InitDefaultscluster_command_update();
  return *internal_default_instance();
}

cluster_command_update* cluster_command_update::New(::google::protobuf::Arena* arena) const {
  cluster_command_update* n = new cluster_command_update;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void cluster_command_update::Clear() {
// @@protoc_insertion_point(message_clear_start:protocol.cluster_command_update)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  slots_.Clear();
  node_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == NULL && header_ != NULL) {
    delete header_;
  }
  header_ = NULL;
  config_epoch_ = GOOGLE_LONGLONG(0);
  _internal_metadata_.Clear();
}

bool cluster_command_update::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:protocol.cluster_command_update)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .protocol.cluster_header header = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_header()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int64 config_epoch = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &config_epoch_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string node_name = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_node_name()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->node_name().data(), static_cast<int>(this->node_name().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "protocol.cluster_command_update.node_name"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated bool slots = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, this->mutable_slots())));
        } else if (
            static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 1, 34u, input, this->mutable_slots())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:protocol.cluster_command_update)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:protocol.cluster_command_update)
  return false;
#undef DO_
}

void cluster_command_update::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:protocol.cluster_command_update)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .protocol.cluster_header header = 1;
  if (this->has_header()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->header_, output);
  }

  // int64 config_epoch = 2;
  if (this->config_epoch() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->config_epoch(), output);
  }

  // string node_name = 3;
  if (this->node_name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->node_name().data(), static_cast<int>(this->node_name().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "protocol.cluster_command_update.node_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->node_name(), output);
  }

  // repeated bool slots = 4;
  if (this->slots_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(4, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(static_cast< ::google::protobuf::uint32>(
        _slots_cached_byte_size_));
    ::google::protobuf::internal::WireFormatLite::WriteBoolArray(
      this->slots().data(), this->slots_size(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:protocol.cluster_command_update)
}

::google::protobuf::uint8* cluster_command_update::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:protocol.cluster_command_update)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .protocol.cluster_header header = 1;
  if (this->has_header()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, *this->header_, deterministic, target);
  }

  // int64 config_epoch = 2;
  if (this->config_epoch() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->config_epoch(), target);
  }

  // string node_name = 3;
  if (this->node_name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->node_name().data(), static_cast<int>(this->node_name().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "protocol.cluster_command_update.node_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->node_name(), target);
  }

  // repeated bool slots = 4;
  if (this->slots_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      4,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
        static_cast< ::google::protobuf::int32>(
            _slots_cached_byte_size_), target);
    target = ::google::protobuf::internal::WireFormatLite::
      WriteBoolNoTagToArray(this->slots_, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:protocol.cluster_command_update)
  return target;
}

size_t cluster_command_update::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:protocol.cluster_command_update)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // repeated bool slots = 4;
  {
    unsigned int count = static_cast<unsigned int>(this->slots_size());
    size_t data_size = 1UL * count;
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
            static_cast< ::google::protobuf::int32>(data_size));
    }
    int cached_size = ::google::protobuf::internal::ToCachedSize(data_size);
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _slots_cached_byte_size_ = cached_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  // string node_name = 3;
  if (this->node_name().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->node_name());
  }

  // .protocol.cluster_header header = 1;
  if (this->has_header()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->header_);
  }

  // int64 config_epoch = 2;
  if (this->config_epoch() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->config_epoch());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void cluster_command_update::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:protocol.cluster_command_update)
  GOOGLE_DCHECK_NE(&from, this);
  const cluster_command_update* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const cluster_command_update>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:protocol.cluster_command_update)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:protocol.cluster_command_update)
    MergeFrom(*source);
  }
}

void cluster_command_update::MergeFrom(const cluster_command_update& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:protocol.cluster_command_update)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  slots_.MergeFrom(from.slots_);
  if (from.node_name().size() > 0) {

    node_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.node_name_);
  }
  if (from.has_header()) {
    mutable_header()->::protocol::cluster_header::MergeFrom(from.header());
  }
  if (from.config_epoch() != 0) {
    set_config_epoch(from.config_epoch());
  }
}

void cluster_command_update::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:protocol.cluster_command_update)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void cluster_command_update::CopyFrom(const cluster_command_update& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:protocol.cluster_command_update)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool cluster_command_update::IsInitialized() const {
  return true;
}

void cluster_command_update::Swap(cluster_command_update* other) {
  if (other == this) return;
  InternalSwap(other);
}
void cluster_command_update::InternalSwap(cluster_command_update* other) {
  using std::swap;
  slots_.InternalSwap(&other->slots_);
  node_name_.Swap(&other->node_name_);
  swap(header_, other->header_);
  swap(config_epoch_, other->config_epoch_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata cluster_command_update::GetMetadata() const {
  protobuf_cluster_5fmessage_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_cluster_5fmessage_2eproto::file_level_metadata[kIndexInFileMessages];
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace protocol

// @@protoc_insertion_point(global_scope)
