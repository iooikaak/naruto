// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: cluster_message.proto

#ifndef PROTOBUF_cluster_5fmessage_2eproto__INCLUDED
#define PROTOBUF_cluster_5fmessage_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3005000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

namespace protobuf_cluster_5fmessage_2eproto {
// Internal implementation detail -- do not use these members.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[5];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void AddDescriptors();
void InitDefaultscommand_headerImpl();
void InitDefaultscommand_header();
void InitDefaultsgossipImpl();
void InitDefaultsgossip();
void InitDefaultscommand_gossipImpl();
void InitDefaultscommand_gossip();
void InitDefaultscommand_failImpl();
void InitDefaultscommand_fail();
void InitDefaultscommand_updateImpl();
void InitDefaultscommand_update();
inline void InitDefaults() {
  InitDefaultscommand_header();
  InitDefaultsgossip();
  InitDefaultscommand_gossip();
  InitDefaultscommand_fail();
  InitDefaultscommand_update();
}
}  // namespace protobuf_cluster_5fmessage_2eproto
namespace cluster {
class command_fail;
class command_failDefaultTypeInternal;
extern command_failDefaultTypeInternal _command_fail_default_instance_;
class command_gossip;
class command_gossipDefaultTypeInternal;
extern command_gossipDefaultTypeInternal _command_gossip_default_instance_;
class command_header;
class command_headerDefaultTypeInternal;
extern command_headerDefaultTypeInternal _command_header_default_instance_;
class command_update;
class command_updateDefaultTypeInternal;
extern command_updateDefaultTypeInternal _command_update_default_instance_;
class gossip;
class gossipDefaultTypeInternal;
extern gossipDefaultTypeInternal _gossip_default_instance_;
}  // namespace cluster
namespace cluster {

// ===================================================================

class command_header : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:cluster.command_header) */ {
 public:
  command_header();
  virtual ~command_header();

  command_header(const command_header& from);

  inline command_header& operator=(const command_header& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  command_header(command_header&& from) noexcept
    : command_header() {
    *this = ::std::move(from);
  }

  inline command_header& operator=(command_header&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const command_header& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const command_header* internal_default_instance() {
    return reinterpret_cast<const command_header*>(
               &_command_header_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    0;

  void Swap(command_header* other);
  friend void swap(command_header& a, command_header& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline command_header* New() const PROTOBUF_FINAL { return New(NULL); }

  command_header* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const command_header& from);
  void MergeFrom(const command_header& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(command_header* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated bool myslots = 6;
  int myslots_size() const;
  void clear_myslots();
  static const int kMyslotsFieldNumber = 6;
  bool myslots(int index) const;
  void set_myslots(int index, bool value);
  void add_myslots(bool value);
  const ::google::protobuf::RepeatedField< bool >&
      myslots() const;
  ::google::protobuf::RepeatedField< bool >*
      mutable_myslots();

  // string sender_name = 4;
  void clear_sender_name();
  static const int kSenderNameFieldNumber = 4;
  const ::std::string& sender_name() const;
  void set_sender_name(const ::std::string& value);
  #if LANG_CXX11
  void set_sender_name(::std::string&& value);
  #endif
  void set_sender_name(const char* value);
  void set_sender_name(const char* value, size_t size);
  ::std::string* mutable_sender_name();
  ::std::string* release_sender_name();
  void set_allocated_sender_name(::std::string* sender_name);

  // string slaveof_name = 5;
  void clear_slaveof_name();
  static const int kSlaveofNameFieldNumber = 5;
  const ::std::string& slaveof_name() const;
  void set_slaveof_name(const ::std::string& value);
  #if LANG_CXX11
  void set_slaveof_name(::std::string&& value);
  #endif
  void set_slaveof_name(const char* value);
  void set_slaveof_name(const char* value, size_t size);
  ::std::string* mutable_slaveof_name();
  ::std::string* release_slaveof_name();
  void set_allocated_slaveof_name(::std::string* slaveof_name);

  // int64 current_epoch = 1;
  void clear_current_epoch();
  static const int kCurrentEpochFieldNumber = 1;
  ::google::protobuf::int64 current_epoch() const;
  void set_current_epoch(::google::protobuf::int64 value);

  // int64 config_epoch = 2;
  void clear_config_epoch();
  static const int kConfigEpochFieldNumber = 2;
  ::google::protobuf::int64 config_epoch() const;
  void set_config_epoch(::google::protobuf::int64 value);

  // int64 offset = 3;
  void clear_offset();
  static const int kOffsetFieldNumber = 3;
  ::google::protobuf::int64 offset() const;
  void set_offset(::google::protobuf::int64 value);

  // int32 port = 7;
  void clear_port();
  static const int kPortFieldNumber = 7;
  ::google::protobuf::int32 port() const;
  void set_port(::google::protobuf::int32 value);

  // int32 flags = 8;
  void clear_flags();
  static const int kFlagsFieldNumber = 8;
  ::google::protobuf::int32 flags() const;
  void set_flags(::google::protobuf::int32 value);

  // int32 state = 9;
  void clear_state();
  static const int kStateFieldNumber = 9;
  ::google::protobuf::int32 state() const;
  void set_state(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:cluster.command_header)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedField< bool > myslots_;
  mutable int _myslots_cached_byte_size_;
  ::google::protobuf::internal::ArenaStringPtr sender_name_;
  ::google::protobuf::internal::ArenaStringPtr slaveof_name_;
  ::google::protobuf::int64 current_epoch_;
  ::google::protobuf::int64 config_epoch_;
  ::google::protobuf::int64 offset_;
  ::google::protobuf::int32 port_;
  ::google::protobuf::int32 flags_;
  ::google::protobuf::int32 state_;
  mutable int _cached_size_;
  friend struct ::protobuf_cluster_5fmessage_2eproto::TableStruct;
  friend void ::protobuf_cluster_5fmessage_2eproto::InitDefaultscommand_headerImpl();
};
// -------------------------------------------------------------------

class gossip : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:cluster.gossip) */ {
 public:
  gossip();
  virtual ~gossip();

  gossip(const gossip& from);

  inline gossip& operator=(const gossip& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  gossip(gossip&& from) noexcept
    : gossip() {
    *this = ::std::move(from);
  }

  inline gossip& operator=(gossip&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const gossip& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const gossip* internal_default_instance() {
    return reinterpret_cast<const gossip*>(
               &_gossip_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    1;

  void Swap(gossip* other);
  friend void swap(gossip& a, gossip& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline gossip* New() const PROTOBUF_FINAL { return New(NULL); }

  gossip* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const gossip& from);
  void MergeFrom(const gossip& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(gossip* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string node_name = 1;
  void clear_node_name();
  static const int kNodeNameFieldNumber = 1;
  const ::std::string& node_name() const;
  void set_node_name(const ::std::string& value);
  #if LANG_CXX11
  void set_node_name(::std::string&& value);
  #endif
  void set_node_name(const char* value);
  void set_node_name(const char* value, size_t size);
  ::std::string* mutable_node_name();
  ::std::string* release_node_name();
  void set_allocated_node_name(::std::string* node_name);

  // string ip = 4;
  void clear_ip();
  static const int kIpFieldNumber = 4;
  const ::std::string& ip() const;
  void set_ip(const ::std::string& value);
  #if LANG_CXX11
  void set_ip(::std::string&& value);
  #endif
  void set_ip(const char* value);
  void set_ip(const char* value, size_t size);
  ::std::string* mutable_ip();
  ::std::string* release_ip();
  void set_allocated_ip(::std::string* ip);

  // int32 ping_sent = 2;
  void clear_ping_sent();
  static const int kPingSentFieldNumber = 2;
  ::google::protobuf::int32 ping_sent() const;
  void set_ping_sent(::google::protobuf::int32 value);

  // int32 pong_received = 3;
  void clear_pong_received();
  static const int kPongReceivedFieldNumber = 3;
  ::google::protobuf::int32 pong_received() const;
  void set_pong_received(::google::protobuf::int32 value);

  // int32 port = 5;
  void clear_port();
  static const int kPortFieldNumber = 5;
  ::google::protobuf::int32 port() const;
  void set_port(::google::protobuf::int32 value);

  // int32 flags = 6;
  void clear_flags();
  static const int kFlagsFieldNumber = 6;
  ::google::protobuf::int32 flags() const;
  void set_flags(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:cluster.gossip)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr node_name_;
  ::google::protobuf::internal::ArenaStringPtr ip_;
  ::google::protobuf::int32 ping_sent_;
  ::google::protobuf::int32 pong_received_;
  ::google::protobuf::int32 port_;
  ::google::protobuf::int32 flags_;
  mutable int _cached_size_;
  friend struct ::protobuf_cluster_5fmessage_2eproto::TableStruct;
  friend void ::protobuf_cluster_5fmessage_2eproto::InitDefaultsgossipImpl();
};
// -------------------------------------------------------------------

class command_gossip : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:cluster.command_gossip) */ {
 public:
  command_gossip();
  virtual ~command_gossip();

  command_gossip(const command_gossip& from);

  inline command_gossip& operator=(const command_gossip& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  command_gossip(command_gossip&& from) noexcept
    : command_gossip() {
    *this = ::std::move(from);
  }

  inline command_gossip& operator=(command_gossip&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const command_gossip& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const command_gossip* internal_default_instance() {
    return reinterpret_cast<const command_gossip*>(
               &_command_gossip_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    2;

  void Swap(command_gossip* other);
  friend void swap(command_gossip& a, command_gossip& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline command_gossip* New() const PROTOBUF_FINAL { return New(NULL); }

  command_gossip* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const command_gossip& from);
  void MergeFrom(const command_gossip& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(command_gossip* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .cluster.gossip gossips = 2;
  int gossips_size() const;
  void clear_gossips();
  static const int kGossipsFieldNumber = 2;
  const ::cluster::gossip& gossips(int index) const;
  ::cluster::gossip* mutable_gossips(int index);
  ::cluster::gossip* add_gossips();
  ::google::protobuf::RepeatedPtrField< ::cluster::gossip >*
      mutable_gossips();
  const ::google::protobuf::RepeatedPtrField< ::cluster::gossip >&
      gossips() const;

  // .cluster.command_header header = 1;
  bool has_header() const;
  void clear_header();
  static const int kHeaderFieldNumber = 1;
  const ::cluster::command_header& header() const;
  ::cluster::command_header* release_header();
  ::cluster::command_header* mutable_header();
  void set_allocated_header(::cluster::command_header* header);

  // @@protoc_insertion_point(class_scope:cluster.command_gossip)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::cluster::gossip > gossips_;
  ::cluster::command_header* header_;
  mutable int _cached_size_;
  friend struct ::protobuf_cluster_5fmessage_2eproto::TableStruct;
  friend void ::protobuf_cluster_5fmessage_2eproto::InitDefaultscommand_gossipImpl();
};
// -------------------------------------------------------------------

class command_fail : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:cluster.command_fail) */ {
 public:
  command_fail();
  virtual ~command_fail();

  command_fail(const command_fail& from);

  inline command_fail& operator=(const command_fail& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  command_fail(command_fail&& from) noexcept
    : command_fail() {
    *this = ::std::move(from);
  }

  inline command_fail& operator=(command_fail&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const command_fail& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const command_fail* internal_default_instance() {
    return reinterpret_cast<const command_fail*>(
               &_command_fail_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    3;

  void Swap(command_fail* other);
  friend void swap(command_fail& a, command_fail& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline command_fail* New() const PROTOBUF_FINAL { return New(NULL); }

  command_fail* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const command_fail& from);
  void MergeFrom(const command_fail& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(command_fail* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string node_name = 2;
  void clear_node_name();
  static const int kNodeNameFieldNumber = 2;
  const ::std::string& node_name() const;
  void set_node_name(const ::std::string& value);
  #if LANG_CXX11
  void set_node_name(::std::string&& value);
  #endif
  void set_node_name(const char* value);
  void set_node_name(const char* value, size_t size);
  ::std::string* mutable_node_name();
  ::std::string* release_node_name();
  void set_allocated_node_name(::std::string* node_name);

  // .cluster.command_header header = 1;
  bool has_header() const;
  void clear_header();
  static const int kHeaderFieldNumber = 1;
  const ::cluster::command_header& header() const;
  ::cluster::command_header* release_header();
  ::cluster::command_header* mutable_header();
  void set_allocated_header(::cluster::command_header* header);

  // @@protoc_insertion_point(class_scope:cluster.command_fail)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr node_name_;
  ::cluster::command_header* header_;
  mutable int _cached_size_;
  friend struct ::protobuf_cluster_5fmessage_2eproto::TableStruct;
  friend void ::protobuf_cluster_5fmessage_2eproto::InitDefaultscommand_failImpl();
};
// -------------------------------------------------------------------

class command_update : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:cluster.command_update) */ {
 public:
  command_update();
  virtual ~command_update();

  command_update(const command_update& from);

  inline command_update& operator=(const command_update& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  command_update(command_update&& from) noexcept
    : command_update() {
    *this = ::std::move(from);
  }

  inline command_update& operator=(command_update&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const command_update& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const command_update* internal_default_instance() {
    return reinterpret_cast<const command_update*>(
               &_command_update_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    4;

  void Swap(command_update* other);
  friend void swap(command_update& a, command_update& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline command_update* New() const PROTOBUF_FINAL { return New(NULL); }

  command_update* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const command_update& from);
  void MergeFrom(const command_update& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(command_update* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated bool slots = 4;
  int slots_size() const;
  void clear_slots();
  static const int kSlotsFieldNumber = 4;
  bool slots(int index) const;
  void set_slots(int index, bool value);
  void add_slots(bool value);
  const ::google::protobuf::RepeatedField< bool >&
      slots() const;
  ::google::protobuf::RepeatedField< bool >*
      mutable_slots();

  // string node_name = 3;
  void clear_node_name();
  static const int kNodeNameFieldNumber = 3;
  const ::std::string& node_name() const;
  void set_node_name(const ::std::string& value);
  #if LANG_CXX11
  void set_node_name(::std::string&& value);
  #endif
  void set_node_name(const char* value);
  void set_node_name(const char* value, size_t size);
  ::std::string* mutable_node_name();
  ::std::string* release_node_name();
  void set_allocated_node_name(::std::string* node_name);

  // .cluster.command_header header = 1;
  bool has_header() const;
  void clear_header();
  static const int kHeaderFieldNumber = 1;
  const ::cluster::command_header& header() const;
  ::cluster::command_header* release_header();
  ::cluster::command_header* mutable_header();
  void set_allocated_header(::cluster::command_header* header);

  // int64 config_epoch = 2;
  void clear_config_epoch();
  static const int kConfigEpochFieldNumber = 2;
  ::google::protobuf::int64 config_epoch() const;
  void set_config_epoch(::google::protobuf::int64 value);

  // @@protoc_insertion_point(class_scope:cluster.command_update)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedField< bool > slots_;
  mutable int _slots_cached_byte_size_;
  ::google::protobuf::internal::ArenaStringPtr node_name_;
  ::cluster::command_header* header_;
  ::google::protobuf::int64 config_epoch_;
  mutable int _cached_size_;
  friend struct ::protobuf_cluster_5fmessage_2eproto::TableStruct;
  friend void ::protobuf_cluster_5fmessage_2eproto::InitDefaultscommand_updateImpl();
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// command_header

// int64 current_epoch = 1;
inline void command_header::clear_current_epoch() {
  current_epoch_ = GOOGLE_LONGLONG(0);
}
inline ::google::protobuf::int64 command_header::current_epoch() const {
  // @@protoc_insertion_point(field_get:cluster.command_header.current_epoch)
  return current_epoch_;
}
inline void command_header::set_current_epoch(::google::protobuf::int64 value) {
  
  current_epoch_ = value;
  // @@protoc_insertion_point(field_set:cluster.command_header.current_epoch)
}

// int64 config_epoch = 2;
inline void command_header::clear_config_epoch() {
  config_epoch_ = GOOGLE_LONGLONG(0);
}
inline ::google::protobuf::int64 command_header::config_epoch() const {
  // @@protoc_insertion_point(field_get:cluster.command_header.config_epoch)
  return config_epoch_;
}
inline void command_header::set_config_epoch(::google::protobuf::int64 value) {
  
  config_epoch_ = value;
  // @@protoc_insertion_point(field_set:cluster.command_header.config_epoch)
}

// int64 offset = 3;
inline void command_header::clear_offset() {
  offset_ = GOOGLE_LONGLONG(0);
}
inline ::google::protobuf::int64 command_header::offset() const {
  // @@protoc_insertion_point(field_get:cluster.command_header.offset)
  return offset_;
}
inline void command_header::set_offset(::google::protobuf::int64 value) {
  
  offset_ = value;
  // @@protoc_insertion_point(field_set:cluster.command_header.offset)
}

// string sender_name = 4;
inline void command_header::clear_sender_name() {
  sender_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& command_header::sender_name() const {
  // @@protoc_insertion_point(field_get:cluster.command_header.sender_name)
  return sender_name_.GetNoArena();
}
inline void command_header::set_sender_name(const ::std::string& value) {
  
  sender_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:cluster.command_header.sender_name)
}
#if LANG_CXX11
inline void command_header::set_sender_name(::std::string&& value) {
  
  sender_name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:cluster.command_header.sender_name)
}
#endif
inline void command_header::set_sender_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  sender_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:cluster.command_header.sender_name)
}
inline void command_header::set_sender_name(const char* value, size_t size) {
  
  sender_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:cluster.command_header.sender_name)
}
inline ::std::string* command_header::mutable_sender_name() {
  
  // @@protoc_insertion_point(field_mutable:cluster.command_header.sender_name)
  return sender_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* command_header::release_sender_name() {
  // @@protoc_insertion_point(field_release:cluster.command_header.sender_name)
  
  return sender_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void command_header::set_allocated_sender_name(::std::string* sender_name) {
  if (sender_name != NULL) {
    
  } else {
    
  }
  sender_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), sender_name);
  // @@protoc_insertion_point(field_set_allocated:cluster.command_header.sender_name)
}

// string slaveof_name = 5;
inline void command_header::clear_slaveof_name() {
  slaveof_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& command_header::slaveof_name() const {
  // @@protoc_insertion_point(field_get:cluster.command_header.slaveof_name)
  return slaveof_name_.GetNoArena();
}
inline void command_header::set_slaveof_name(const ::std::string& value) {
  
  slaveof_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:cluster.command_header.slaveof_name)
}
#if LANG_CXX11
inline void command_header::set_slaveof_name(::std::string&& value) {
  
  slaveof_name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:cluster.command_header.slaveof_name)
}
#endif
inline void command_header::set_slaveof_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  slaveof_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:cluster.command_header.slaveof_name)
}
inline void command_header::set_slaveof_name(const char* value, size_t size) {
  
  slaveof_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:cluster.command_header.slaveof_name)
}
inline ::std::string* command_header::mutable_slaveof_name() {
  
  // @@protoc_insertion_point(field_mutable:cluster.command_header.slaveof_name)
  return slaveof_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* command_header::release_slaveof_name() {
  // @@protoc_insertion_point(field_release:cluster.command_header.slaveof_name)
  
  return slaveof_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void command_header::set_allocated_slaveof_name(::std::string* slaveof_name) {
  if (slaveof_name != NULL) {
    
  } else {
    
  }
  slaveof_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), slaveof_name);
  // @@protoc_insertion_point(field_set_allocated:cluster.command_header.slaveof_name)
}

// repeated bool myslots = 6;
inline int command_header::myslots_size() const {
  return myslots_.size();
}
inline void command_header::clear_myslots() {
  myslots_.Clear();
}
inline bool command_header::myslots(int index) const {
  // @@protoc_insertion_point(field_get:cluster.command_header.myslots)
  return myslots_.Get(index);
}
inline void command_header::set_myslots(int index, bool value) {
  myslots_.Set(index, value);
  // @@protoc_insertion_point(field_set:cluster.command_header.myslots)
}
inline void command_header::add_myslots(bool value) {
  myslots_.Add(value);
  // @@protoc_insertion_point(field_add:cluster.command_header.myslots)
}
inline const ::google::protobuf::RepeatedField< bool >&
command_header::myslots() const {
  // @@protoc_insertion_point(field_list:cluster.command_header.myslots)
  return myslots_;
}
inline ::google::protobuf::RepeatedField< bool >*
command_header::mutable_myslots() {
  // @@protoc_insertion_point(field_mutable_list:cluster.command_header.myslots)
  return &myslots_;
}

// int32 port = 7;
inline void command_header::clear_port() {
  port_ = 0;
}
inline ::google::protobuf::int32 command_header::port() const {
  // @@protoc_insertion_point(field_get:cluster.command_header.port)
  return port_;
}
inline void command_header::set_port(::google::protobuf::int32 value) {
  
  port_ = value;
  // @@protoc_insertion_point(field_set:cluster.command_header.port)
}

// int32 flags = 8;
inline void command_header::clear_flags() {
  flags_ = 0;
}
inline ::google::protobuf::int32 command_header::flags() const {
  // @@protoc_insertion_point(field_get:cluster.command_header.flags)
  return flags_;
}
inline void command_header::set_flags(::google::protobuf::int32 value) {
  
  flags_ = value;
  // @@protoc_insertion_point(field_set:cluster.command_header.flags)
}

// int32 state = 9;
inline void command_header::clear_state() {
  state_ = 0;
}
inline ::google::protobuf::int32 command_header::state() const {
  // @@protoc_insertion_point(field_get:cluster.command_header.state)
  return state_;
}
inline void command_header::set_state(::google::protobuf::int32 value) {
  
  state_ = value;
  // @@protoc_insertion_point(field_set:cluster.command_header.state)
}

// -------------------------------------------------------------------

// gossip

// string node_name = 1;
inline void gossip::clear_node_name() {
  node_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& gossip::node_name() const {
  // @@protoc_insertion_point(field_get:cluster.gossip.node_name)
  return node_name_.GetNoArena();
}
inline void gossip::set_node_name(const ::std::string& value) {
  
  node_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:cluster.gossip.node_name)
}
#if LANG_CXX11
inline void gossip::set_node_name(::std::string&& value) {
  
  node_name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:cluster.gossip.node_name)
}
#endif
inline void gossip::set_node_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  node_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:cluster.gossip.node_name)
}
inline void gossip::set_node_name(const char* value, size_t size) {
  
  node_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:cluster.gossip.node_name)
}
inline ::std::string* gossip::mutable_node_name() {
  
  // @@protoc_insertion_point(field_mutable:cluster.gossip.node_name)
  return node_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* gossip::release_node_name() {
  // @@protoc_insertion_point(field_release:cluster.gossip.node_name)
  
  return node_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void gossip::set_allocated_node_name(::std::string* node_name) {
  if (node_name != NULL) {
    
  } else {
    
  }
  node_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), node_name);
  // @@protoc_insertion_point(field_set_allocated:cluster.gossip.node_name)
}

// int32 ping_sent = 2;
inline void gossip::clear_ping_sent() {
  ping_sent_ = 0;
}
inline ::google::protobuf::int32 gossip::ping_sent() const {
  // @@protoc_insertion_point(field_get:cluster.gossip.ping_sent)
  return ping_sent_;
}
inline void gossip::set_ping_sent(::google::protobuf::int32 value) {
  
  ping_sent_ = value;
  // @@protoc_insertion_point(field_set:cluster.gossip.ping_sent)
}

// int32 pong_received = 3;
inline void gossip::clear_pong_received() {
  pong_received_ = 0;
}
inline ::google::protobuf::int32 gossip::pong_received() const {
  // @@protoc_insertion_point(field_get:cluster.gossip.pong_received)
  return pong_received_;
}
inline void gossip::set_pong_received(::google::protobuf::int32 value) {
  
  pong_received_ = value;
  // @@protoc_insertion_point(field_set:cluster.gossip.pong_received)
}

// string ip = 4;
inline void gossip::clear_ip() {
  ip_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& gossip::ip() const {
  // @@protoc_insertion_point(field_get:cluster.gossip.ip)
  return ip_.GetNoArena();
}
inline void gossip::set_ip(const ::std::string& value) {
  
  ip_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:cluster.gossip.ip)
}
#if LANG_CXX11
inline void gossip::set_ip(::std::string&& value) {
  
  ip_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:cluster.gossip.ip)
}
#endif
inline void gossip::set_ip(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  ip_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:cluster.gossip.ip)
}
inline void gossip::set_ip(const char* value, size_t size) {
  
  ip_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:cluster.gossip.ip)
}
inline ::std::string* gossip::mutable_ip() {
  
  // @@protoc_insertion_point(field_mutable:cluster.gossip.ip)
  return ip_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* gossip::release_ip() {
  // @@protoc_insertion_point(field_release:cluster.gossip.ip)
  
  return ip_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void gossip::set_allocated_ip(::std::string* ip) {
  if (ip != NULL) {
    
  } else {
    
  }
  ip_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ip);
  // @@protoc_insertion_point(field_set_allocated:cluster.gossip.ip)
}

// int32 port = 5;
inline void gossip::clear_port() {
  port_ = 0;
}
inline ::google::protobuf::int32 gossip::port() const {
  // @@protoc_insertion_point(field_get:cluster.gossip.port)
  return port_;
}
inline void gossip::set_port(::google::protobuf::int32 value) {
  
  port_ = value;
  // @@protoc_insertion_point(field_set:cluster.gossip.port)
}

// int32 flags = 6;
inline void gossip::clear_flags() {
  flags_ = 0;
}
inline ::google::protobuf::int32 gossip::flags() const {
  // @@protoc_insertion_point(field_get:cluster.gossip.flags)
  return flags_;
}
inline void gossip::set_flags(::google::protobuf::int32 value) {
  
  flags_ = value;
  // @@protoc_insertion_point(field_set:cluster.gossip.flags)
}

// -------------------------------------------------------------------

// command_gossip

// .cluster.command_header header = 1;
inline bool command_gossip::has_header() const {
  return this != internal_default_instance() && header_ != NULL;
}
inline void command_gossip::clear_header() {
  if (GetArenaNoVirtual() == NULL && header_ != NULL) {
    delete header_;
  }
  header_ = NULL;
}
inline const ::cluster::command_header& command_gossip::header() const {
  const ::cluster::command_header* p = header_;
  // @@protoc_insertion_point(field_get:cluster.command_gossip.header)
  return p != NULL ? *p : *reinterpret_cast<const ::cluster::command_header*>(
      &::cluster::_command_header_default_instance_);
}
inline ::cluster::command_header* command_gossip::release_header() {
  // @@protoc_insertion_point(field_release:cluster.command_gossip.header)
  
  ::cluster::command_header* temp = header_;
  header_ = NULL;
  return temp;
}
inline ::cluster::command_header* command_gossip::mutable_header() {
  
  if (header_ == NULL) {
    header_ = new ::cluster::command_header;
  }
  // @@protoc_insertion_point(field_mutable:cluster.command_gossip.header)
  return header_;
}
inline void command_gossip::set_allocated_header(::cluster::command_header* header) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete header_;
  }
  if (header) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      header = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, header, submessage_arena);
    }
    
  } else {
    
  }
  header_ = header;
  // @@protoc_insertion_point(field_set_allocated:cluster.command_gossip.header)
}

// repeated .cluster.gossip gossips = 2;
inline int command_gossip::gossips_size() const {
  return gossips_.size();
}
inline void command_gossip::clear_gossips() {
  gossips_.Clear();
}
inline const ::cluster::gossip& command_gossip::gossips(int index) const {
  // @@protoc_insertion_point(field_get:cluster.command_gossip.gossips)
  return gossips_.Get(index);
}
inline ::cluster::gossip* command_gossip::mutable_gossips(int index) {
  // @@protoc_insertion_point(field_mutable:cluster.command_gossip.gossips)
  return gossips_.Mutable(index);
}
inline ::cluster::gossip* command_gossip::add_gossips() {
  // @@protoc_insertion_point(field_add:cluster.command_gossip.gossips)
  return gossips_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::cluster::gossip >*
command_gossip::mutable_gossips() {
  // @@protoc_insertion_point(field_mutable_list:cluster.command_gossip.gossips)
  return &gossips_;
}
inline const ::google::protobuf::RepeatedPtrField< ::cluster::gossip >&
command_gossip::gossips() const {
  // @@protoc_insertion_point(field_list:cluster.command_gossip.gossips)
  return gossips_;
}

// -------------------------------------------------------------------

// command_fail

// .cluster.command_header header = 1;
inline bool command_fail::has_header() const {
  return this != internal_default_instance() && header_ != NULL;
}
inline void command_fail::clear_header() {
  if (GetArenaNoVirtual() == NULL && header_ != NULL) {
    delete header_;
  }
  header_ = NULL;
}
inline const ::cluster::command_header& command_fail::header() const {
  const ::cluster::command_header* p = header_;
  // @@protoc_insertion_point(field_get:cluster.command_fail.header)
  return p != NULL ? *p : *reinterpret_cast<const ::cluster::command_header*>(
      &::cluster::_command_header_default_instance_);
}
inline ::cluster::command_header* command_fail::release_header() {
  // @@protoc_insertion_point(field_release:cluster.command_fail.header)
  
  ::cluster::command_header* temp = header_;
  header_ = NULL;
  return temp;
}
inline ::cluster::command_header* command_fail::mutable_header() {
  
  if (header_ == NULL) {
    header_ = new ::cluster::command_header;
  }
  // @@protoc_insertion_point(field_mutable:cluster.command_fail.header)
  return header_;
}
inline void command_fail::set_allocated_header(::cluster::command_header* header) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete header_;
  }
  if (header) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      header = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, header, submessage_arena);
    }
    
  } else {
    
  }
  header_ = header;
  // @@protoc_insertion_point(field_set_allocated:cluster.command_fail.header)
}

// string node_name = 2;
inline void command_fail::clear_node_name() {
  node_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& command_fail::node_name() const {
  // @@protoc_insertion_point(field_get:cluster.command_fail.node_name)
  return node_name_.GetNoArena();
}
inline void command_fail::set_node_name(const ::std::string& value) {
  
  node_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:cluster.command_fail.node_name)
}
#if LANG_CXX11
inline void command_fail::set_node_name(::std::string&& value) {
  
  node_name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:cluster.command_fail.node_name)
}
#endif
inline void command_fail::set_node_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  node_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:cluster.command_fail.node_name)
}
inline void command_fail::set_node_name(const char* value, size_t size) {
  
  node_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:cluster.command_fail.node_name)
}
inline ::std::string* command_fail::mutable_node_name() {
  
  // @@protoc_insertion_point(field_mutable:cluster.command_fail.node_name)
  return node_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* command_fail::release_node_name() {
  // @@protoc_insertion_point(field_release:cluster.command_fail.node_name)
  
  return node_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void command_fail::set_allocated_node_name(::std::string* node_name) {
  if (node_name != NULL) {
    
  } else {
    
  }
  node_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), node_name);
  // @@protoc_insertion_point(field_set_allocated:cluster.command_fail.node_name)
}

// -------------------------------------------------------------------

// command_update

// .cluster.command_header header = 1;
inline bool command_update::has_header() const {
  return this != internal_default_instance() && header_ != NULL;
}
inline void command_update::clear_header() {
  if (GetArenaNoVirtual() == NULL && header_ != NULL) {
    delete header_;
  }
  header_ = NULL;
}
inline const ::cluster::command_header& command_update::header() const {
  const ::cluster::command_header* p = header_;
  // @@protoc_insertion_point(field_get:cluster.command_update.header)
  return p != NULL ? *p : *reinterpret_cast<const ::cluster::command_header*>(
      &::cluster::_command_header_default_instance_);
}
inline ::cluster::command_header* command_update::release_header() {
  // @@protoc_insertion_point(field_release:cluster.command_update.header)
  
  ::cluster::command_header* temp = header_;
  header_ = NULL;
  return temp;
}
inline ::cluster::command_header* command_update::mutable_header() {
  
  if (header_ == NULL) {
    header_ = new ::cluster::command_header;
  }
  // @@protoc_insertion_point(field_mutable:cluster.command_update.header)
  return header_;
}
inline void command_update::set_allocated_header(::cluster::command_header* header) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete header_;
  }
  if (header) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      header = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, header, submessage_arena);
    }
    
  } else {
    
  }
  header_ = header;
  // @@protoc_insertion_point(field_set_allocated:cluster.command_update.header)
}

// int64 config_epoch = 2;
inline void command_update::clear_config_epoch() {
  config_epoch_ = GOOGLE_LONGLONG(0);
}
inline ::google::protobuf::int64 command_update::config_epoch() const {
  // @@protoc_insertion_point(field_get:cluster.command_update.config_epoch)
  return config_epoch_;
}
inline void command_update::set_config_epoch(::google::protobuf::int64 value) {
  
  config_epoch_ = value;
  // @@protoc_insertion_point(field_set:cluster.command_update.config_epoch)
}

// string node_name = 3;
inline void command_update::clear_node_name() {
  node_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& command_update::node_name() const {
  // @@protoc_insertion_point(field_get:cluster.command_update.node_name)
  return node_name_.GetNoArena();
}
inline void command_update::set_node_name(const ::std::string& value) {
  
  node_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:cluster.command_update.node_name)
}
#if LANG_CXX11
inline void command_update::set_node_name(::std::string&& value) {
  
  node_name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:cluster.command_update.node_name)
}
#endif
inline void command_update::set_node_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  node_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:cluster.command_update.node_name)
}
inline void command_update::set_node_name(const char* value, size_t size) {
  
  node_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:cluster.command_update.node_name)
}
inline ::std::string* command_update::mutable_node_name() {
  
  // @@protoc_insertion_point(field_mutable:cluster.command_update.node_name)
  return node_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* command_update::release_node_name() {
  // @@protoc_insertion_point(field_release:cluster.command_update.node_name)
  
  return node_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void command_update::set_allocated_node_name(::std::string* node_name) {
  if (node_name != NULL) {
    
  } else {
    
  }
  node_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), node_name);
  // @@protoc_insertion_point(field_set_allocated:cluster.command_update.node_name)
}

// repeated bool slots = 4;
inline int command_update::slots_size() const {
  return slots_.size();
}
inline void command_update::clear_slots() {
  slots_.Clear();
}
inline bool command_update::slots(int index) const {
  // @@protoc_insertion_point(field_get:cluster.command_update.slots)
  return slots_.Get(index);
}
inline void command_update::set_slots(int index, bool value) {
  slots_.Set(index, value);
  // @@protoc_insertion_point(field_set:cluster.command_update.slots)
}
inline void command_update::add_slots(bool value) {
  slots_.Add(value);
  // @@protoc_insertion_point(field_add:cluster.command_update.slots)
}
inline const ::google::protobuf::RepeatedField< bool >&
command_update::slots() const {
  // @@protoc_insertion_point(field_list:cluster.command_update.slots)
  return slots_;
}
inline ::google::protobuf::RepeatedField< bool >*
command_update::mutable_slots() {
  // @@protoc_insertion_point(field_mutable_list:cluster.command_update.slots)
  return &slots_;
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace cluster

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_cluster_5fmessage_2eproto__INCLUDED
